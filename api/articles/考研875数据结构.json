{"title":"考研875数据结构","slug":"考研875数据结构","date":"2024-10-12T13:34:19.000Z","updated":"2024-10-18T09:57:30.098Z","comments":true,"path":"api/articles/考研875数据结构.json","excerpt":null,"covers":null,"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h2><blockquote>\n<p>建议另外过一遍 <a href=\"../../articles/fc6ebebe.html\">严蔚敏课笔记</a></p>\n</blockquote>\n<h4 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h4><ul>\n<li>数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。数据是计算机程序加工的原料。</li>\n</ul>\n<h4 id=\"数据元素\"><a href=\"#数据元素\" class=\"headerlink\" title=\"数据元素\"></a>数据元素</h4><ul>\n<li>数据元素是数据的<strong>基本单位</strong>，通常作为一个整体进行考虑和处理。</li>\n</ul>\n<h4 id=\"数据项\"><a href=\"#数据项\" class=\"headerlink\" title=\"数据项\"></a>数据项</h4><ul>\n<li>一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分割的<strong>最小单位</strong>。</li>\n<li>例如，学生记录就是一个数据元素，它由学号、姓名、性别等数据项组成。</li>\n</ul>\n<h4 id=\"数据对象\"><a href=\"#数据对象\" class=\"headerlink\" title=\"数据对象\"></a>数据对象</h4><ul>\n<li>数据对象是具有相同性质的数据元素的集合，是数据的一个子集。</li>\n<li>例如，整数数据对象是集合 N={0,±1,±2,…}。</li>\n</ul>\n<h4 id=\"数据、数据元素、数据项之间的关系\"><a href=\"#数据、数据元素、数据项之间的关系\" class=\"headerlink\" title=\"数据、数据元素、数据项之间的关系\"></a>数据、数据元素、数据项之间的关系</h4><ul>\n<li>数据-&gt;数据对象-&gt;数据元素-&gt;数据项</li>\n<li>两张表-&gt;数据；其中一张表-&gt;数据对象；表中每一行（记录）-&gt;数据元素；每条记录的每个属性-&gt;数据项</li>\n</ul>\n<h4 id=\"数据结构的定义\"><a href=\"#数据结构的定义\" class=\"headerlink\" title=\"数据结构的定义\"></a>数据结构的定义</h4><ul>\n<li>数据结构是相互之间存在一种或多种特定<strong>关系</strong>的<strong>数据元素</strong>的集合。在任何问题中，数据元素都不是孤立存在的，它们之间存在某种关系，这种数据元素相互之间的关系称为结构（Structure）。</li>\n</ul>\n<h4 id=\"数据结构的三要素\"><a href=\"#数据结构的三要素\" class=\"headerlink\" title=\"数据结构的三要素\"></a>数据结构的三要素</h4><ul>\n<li>数据结构包括三方面的内容：<strong>逻辑结构</strong>、<strong>存储结构</strong>和<strong>数据的运算</strong>。</li>\n<li>数据的<strong>逻辑结构</strong>和<strong>存储结构</strong>是密不可分的两个方面，一个<strong>算法的设计</strong>取决于所选定的<strong>逻辑结构</strong>，而<strong>算法的实现</strong>依赖于所采用的<strong>存储结构</strong>。</li>\n</ul>\n<h4 id=\"数据的逻辑结构\"><a href=\"#数据的逻辑结构\" class=\"headerlink\" title=\"数据的逻辑结构\"></a>数据的逻辑结构</h4><ul>\n<li>逻辑结构是指数据元素之间的<strong>逻辑关系</strong>，即从逻辑关系上描述数据。它与数据的存储无关，是独立于计算机的。</li>\n<li>数据的逻辑结构分为<strong>线性结构</strong>和<strong>非线性结构</strong>，<strong>线性表</strong>是典型的线性结构，<strong>集合、树和图</strong>是典型的非线性结构。<br>1) <strong>集合</strong>。结构中的元素之间除“同属一个集合”外，别无其它关系。<br>2) <strong>线性结构</strong>。结构中的数据元素之间只存在一对一的关系。<br>3) <strong>树形结构</strong>。结构中的数据元素之间存在一对多的关系。<br>4) <strong>图状结构</strong>或<strong>网状结构</strong>。结构中的数据元素之间存在多对多的关系。</li>\n</ul>\n<h4 id=\"数据的物理结构\"><a href=\"#数据的物理结构\" class=\"headerlink\" title=\"数据的物理结构\"></a>数据的物理结构</h4><ul>\n<li><code>存储结构</code>是指数据结构在计算机中的表示（又称<strong>映像</strong>），也称<code>物理结构</code>。它包括<strong>数据元素</strong>的表示和<strong>关系</strong>的表示。数据的存储结构是计算机语言实现的逻辑结构，它依赖于计算机语言。数据的存储结构主要有<strong>顺序存储、链式存储、索引存储和散列存储</strong>。<br>1) <strong>顺序存储</strong>。把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。<br>其<strong>优点</strong>是可以实现<u>随机存取</u>，每个元素占用最少的存储空间；<strong>缺点</strong>是只能使用相邻的一整块存储单元，因此可能产生较多的外部碎片。<br>2) <strong>链式存储</strong>。不要求逻辑上相邻的元素在物理位置上也相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系。<br>其<strong>优点</strong>是<u>不会出现碎片现象</u>，能充分利用所有存储单元；<strong>缺点</strong>是<u>每个元素因存储指针而占用额外的存储空间</u>，且只能实现顺序存取。<br>3) <strong>索引存储</strong>。在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为<strong>索引项</strong>，索引项的一般形式是（关键字，地址）。<br>其<strong>优点</strong>是<u>检索速度快</u>；<strong>缺点</strong>是<u>附加的索引表额外占用存储空间</u>。另外，增加和删除数据时也要修改索引表，因而<u>会花费较多的时间</u>。<br>4) <strong>散列存储</strong>。根据元素的关键字直接计算出该元素的存储地址，又称<strong>哈希（Hash）存储</strong>。<br>其<strong>优点</strong>时<u>检索、增加和删除结点的操作都很快</u>；<strong>缺点</strong>是若散列函数不好，则可能出现<u>元素存储单元的冲突</u>，而解决冲突<u>会增加时间和空间开销</u>。</li>\n</ul>\n<h4 id=\"数据的运算的定义\"><a href=\"#数据的运算的定义\" class=\"headerlink\" title=\"数据的运算的定义\"></a>数据的运算的定义</h4><ul>\n<li>（王道）施加在数据上的运算包括运算的<strong>定义</strong>和<strong>实现</strong>。运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，指出运算的具体操作步骤。</li>\n<li>（博客）数据的运算是指对数据实施的操作，数据的运算最终需要在对应的存储结构上用算法实现，所以数据运算分为运算的定义和运算的实现两个层面。<br>运算的定义是对运算功能的描述，是抽象的，是基于逻辑的。<br>运算的实现是程序员完成运算的实现算法，是具体的，是基于存储结构的。</li>\n</ul>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><ul>\n<li>数据类型是一个值的集合和定义在集合上的一组操作的总称。<br>1) <strong>原子类型</strong>。其值不可再分的数据类型。<br>2) <strong>结构类型</strong>。其值可以再分解为若干成分（分量）的数据类型。<br>3) <code>抽象数据类型</code>。一个数学模型及定义在该数学模型上的一组操作。它通常是对数据的某种抽象，定义了数据的取值范围及其结构形式，以及对数据操作的集合。</li>\n<li><code>抽象数据类型</code>的三个组成部分：数据对象、数据关系和基本操作。</li>\n<li>（蓝皮书，定义）<code>抽象数据类型</code>是一种构造数据类型，它具有三大特征，<strong>信息隐蔽、数据封装、使用与实现相分离</strong>。</li>\n</ul>\n<h4 id=\"数据类型、抽象数据类型和数据结构之间的关系\"><a href=\"#数据类型、抽象数据类型和数据结构之间的关系\" class=\"headerlink\" title=\"数据类型、抽象数据类型和数据结构之间的关系\"></a>数据类型、抽象数据类型和数据结构之间的关系</h4><ul>\n<li><strong>数据类型</strong>是一个值的集合和定义在此集合上的一组操作的总称。（值+操作）</li>\n<li><strong>抽象数据类型（ADT）</strong>是一个数学模型及定义在该数学模型上的一组操作。（数学模型+操作）它通常是对数据的某种抽象，定义了数据的取值范围及其结构形式，以及对数据操作的集合。（数据对象+数据关系+基本操作）</li>\n<li><strong>数据结构</strong>是相互之间存在一种或多种特定<strong>关系</strong>的<strong>数据元素</strong>的集合。（数据元素+数据关系）</li>\n</ul>\n<h2 id=\"二、算法和算法分析\"><a href=\"#二、算法和算法分析\" class=\"headerlink\" title=\"二、算法和算法分析\"></a>二、算法和算法分析</h2><h3 id=\"算法的定义\"><a href=\"#算法的定义\" class=\"headerlink\" title=\"算法的定义\"></a>算法的定义</h3><ul>\n<li>算法是对特定问题求解步骤的一种描述，它是指令的有限序列，其中的每一条指令表示一个或多个操作。</li>\n<li>算法和程序的区别：<ol>\n<li>算法是描述一个问题求解的步骤序列，而程序是算法在特定计算机上的实现。</li>\n<li>算法不依赖于计算机，而程序依赖于特定的计算机和特定的编程语言。</li>\n<li>算法必须满足五个特性，即有穷性、确定性、可行性、有输入、有输出，而程序可能不满足有穷性。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"算法的特性（五个）\"><a href=\"#算法的特性（五个）\" class=\"headerlink\" title=\"算法的特性（五个）\"></a>算法的特性（五个）</h3><ol>\n<li><strong>有穷性</strong>。一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。</li>\n<li><strong>确定性</strong>。算法中每条指令必须有确切的含义，对于相同的输入只能得出相同的输出。</li>\n<li><strong>可行性</strong>。算法中描述的操作都可以通过 已经实现的基本运算 执行有限次来实现。</li>\n<li><strong>输入</strong>。一个算法有零个或多个输入，这些输入取自于某个特定的对象的集合。</li>\n<li><strong>输出</strong>。一个算法有一个或多个输出，这些输出是与输入有着某些特定关系的量。</li>\n</ol>\n<h3 id=\"算法设计的要求\"><a href=\"#算法设计的要求\" class=\"headerlink\" title=\"算法设计的要求\"></a>算法设计的要求</h3><ol>\n<li><strong>正确性</strong>。算法应能够正确地解决求解问题。<ul>\n<li>首先，算法应当满足以特定的“规格说明”方式给出的需求。</li>\n<li>其次，对算法是否“正确”的理解可以有以下四个层次：<br>a. 程序中不含语法错误；<br>b. 程序对于几组输入数据能够得出满足规格说明要求的结果；<br>c. 程序对于精心选择的典型、苛刻而带有刁难性的几组输入数据能够得出满足规格说明要求的结果；<br>d. 程序对于一切合法的输入数据都能产生满足规格说明要求的结果。<br>（通常以第c层意义的正确性作为衡量一个程序是否合格的标准。）</li>\n</ul>\n</li>\n<li><strong>可读性</strong>。算法应具有良好的可读性，以帮助人们理解。<ul>\n<li>算法主要是为了人的阅读与交流，其次才是机器执行。可读性好有助于人对算法的理解；</li>\n<li>另一方面，晦涩难懂的程序易于隐藏较多错误，难以调试和修改。</li>\n</ul>\n</li>\n<li><strong>健壮性</strong>。算法能对输入的非法数据做出反应或处理，而不会产生莫名其妙的输出。<ul>\n<li>当输入数据非法时，算法也能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果。</li>\n<li>并且，处理出错的方法应是返回一个表示错误或错误性质的值，而不是打印错误信息或异常，并中止程序的执行，以便在更高的抽象层次上进行处理。</li>\n</ul>\n</li>\n<li><strong>效率与低存储量需求</strong>。效率是指算法执行的时间，存储量需求是指算法执行过程中所需要的最大存储空间，这两者都与问题的规模有关。<ul>\n<li>（因为：求100个人的平均分与求1000个人的平均分所花的执行时间或运行空间显然有一定的差别。）</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"算法的时间、空间复杂度的定义及计算\"><a href=\"#算法的时间、空间复杂度的定义及计算\" class=\"headerlink\" title=\"算法的时间、空间复杂度的定义及计算\"></a>算法的时间、空间复杂度的定义及计算</h3><ul>\n<li>（归纳下应该这么说）算法的<strong>时间复杂度</strong>是一个关于问题规模n的函数，表示算法中基本运算的执行次数的数量级，定性地描述该算法的运行时间。</li>\n<li>（归纳下应该这么说）算法的<strong>空间复杂度</strong>是问题规模n的函数，定性地描述该算法或程序运行所需要的存储空间大小。</li>\n<li>（<a href=\"https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">wiki</a>）算法的<strong>时间复杂度</strong>（time complexity）是一个函数，它定性描述该算法的运行时间。时间复杂度常用大O符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，也就是考察输入值大小趋近无穷时的情况。例如，如果一个算法对于任何大小为 n （必须比 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">n_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 大）的输入，它至多需要 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn><msup><mi>n</mi><mn>3</mn></msup><mo>+</mo><mn>3</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">5n^3 + 3n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">5</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span></span></span></span> 的时间运行完毕，那么它的渐近时间复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li>（<a href=\"https://zh.wikipedia.org/wiki/%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">wiki</a>）在计算机科学中，一个算法或程序的<strong>空间复杂度</strong>定性地描述该算法或程序运行所需要的存储空间大小。空间复杂度是相应计算问题的输入值的长度的函数，它表示一个算法完全执行所需要的存储空间大小。</li>\n<li>就像时间复杂度的计算不考虑算法所使用的空间大小一样，空间复杂度也不考虑算法运行需要的时间长短。</li>\n</ul>\n<h3 id=\"衡量算法在资源上的两个方面\"><a href=\"#衡量算法在资源上的两个方面\" class=\"headerlink\" title=\"衡量算法在资源上的两个方面\"></a>衡量算法在资源上的两个方面</h3><ul>\n<li>算法在编写成可执行程序后，运行时需要耗费时间资源和空间(内存)资源 。因此衡量一个算法的好坏，一般是从时间和空间两个维度来衡量的，即<strong>时间复杂度和空间复杂度</strong>。时间复杂度主要衡量一个算法的运行快慢，而空间复杂度主要衡量一个算法运行所需要的<strong>额外内存空间</strong>。根据算法编写出的程序，运行时间更短，运行期间占用的内存更少，该算法的运行效率就更高，算法也就更好。</li>\n<li>度量一个程序的执行时间通常有两种方法：</li>\n</ul>\n<ol>\n<li><p>事后统计的方法 （让算法变成一个程序，在机器上执行并计时）<br>缺点：<br>(1) 必须执行程序<br>(2) 其他因素掩盖算法本质</p>\n</li>\n<li><p>事前分析估算的方法（通常使用的）<br>和算法执行时间相关的因素：<br>(1) 算法选用的策略<br>(2) 问题的规模<br>(3) 编写程序的语言<br>(4) 编译程序产生的机器代码的质量<br>(5) 机器执行指令的速度<br>（后三条和计算机的软件和硬件有关，和设计算法无关，所以设计算法时只考虑前两条）</p>\n</li>\n</ol>\n<ul>\n<li>算法的存储量包括：<br>(1) 输入数据所占空间<br>(2) 程序本身所占空间<br>(3) 辅助变量所占空间<ul>\n<li>若<u><strong>输入数据</strong>所占空间只取决于问题本身，<strong>和算法无关</strong></u>，则只需要分析除输入和程序之外的<strong>辅助变量所占额外空间</strong>。</li>\n<li>若<u><strong>所需额外空间</strong>相对于<strong>输入数据量</strong>来说是<strong>常数</strong></u>，则称此算法为<strong>原地工作</strong>。</li>\n<li>若<u><strong>所需存储量</strong>依赖于<strong>特定的输入</strong></u>，则通常按<strong>最坏情况</strong>考虑。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"算法的渐进性分析方法，会用该方法对算法进行评估\"><a href=\"#算法的渐进性分析方法，会用该方法对算法进行评估\" class=\"headerlink\" title=\"算法的渐进性分析方法，会用该方法对算法进行评估\"></a>算法的渐进性分析方法，会用该方法对算法进行评估</h3><h4 id=\"渐进分析\"><a href=\"#渐进分析\" class=\"headerlink\" title=\"渐进分析\"></a>渐进分析</h4><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%91%E5%88%86%E6%9E%90\">渐进分析（asymptotic analysis、asymptotics）</a>，在数学分析中是一种描述函数在极限附近的行为的方法。有多个科学领域应用此方法。例子如下：<ul>\n<li>在计算机科学中，<a href=\"https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\">算法分析</a>考虑给定算法在输入非常大的数据集时候的性能。</li>\n<li>当实体系统的规模变得非常大的时候，分析它的行为。</li>\n</ul>\n</li>\n<li>最简单的例子如下：考虑一个函数f(n)，我们需要了解当n变得非常大的时候f(n)的性质。<br>令<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">f(n)=n^2+3n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span></span></span></span>，在n特别大的时候，第二项3n比起第一项<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>要小很多。<br>于是对于这个函数，有如下断言：“f(n)在n→∞的情况下与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>渐近等价”，记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>∼</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">f(n)∼n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>。<h4 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h4></li>\n<li>在计算机科学中，<a href=\"https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\">算法分析（Analysis of algorithm）</a>是分析执行一个给定算法需要消耗的计算资源数量（例如计算时间，存储器使用等）的过程。算法的效率或复杂度在理论上表示为一个函数。其定义域是输入数据的长度（通常考虑任意大的输入，没有上界），值域通常是执行步骤数量（时间复杂度）或者存储器位置数量（空间复杂度）。算法分析是计算复杂度理论的重要组成部分。</li>\n<li>理论分析常常利用<a href=\"https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%91%E5%88%86%E6%9E%90\">渐近分析</a>估计一个算法的复杂度，并使用<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7\">大O符号</a>、<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%A9%E7%AC%A6%E5%8F%B7\">大Ω符号</a>和<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%98%E7%AC%A6%E5%8F%B7\">大Θ符号</a>作为标记。举例，二分查找所需的执行步骤数量与查找列表的长度之对数成正比，记为O(log n)，简称为“对数时间”。通常使用渐近分析的原因是，同一算法的不同具体实现的效率可能有差别。但是，对于任何给定的算法，所有符合其设计者意图的实现，它们之间的性能差异应当仅仅是一个系数。</li>\n<li>精确分析算法的效率有时也是可行的，但这样的分析通常需要一些与具体实现相关的假设，称为计算模型。计算模型可以用抽象机器来定义，比如图灵机。或者可以假设某些基本操作在单位时间内可完成。</li>\n<li>假设二分查找的目标列表总共有 n 个元素。如果我们假设单次查找可以在一个时间单位内完成，那么至多只需要 logn + 1 单位的时间就可以得到结果。这样的分析在有些场合非常重要。</li>\n<li>算法分析在实际工作中是非常重要的，因为使用低效率的算法会显著降低系统性能。在对运行时间要求极高的场合，耗时太长的算法得到的结果可能是过期或者无用的。低效率算法也会大量消耗计算资源。<h4 id=\"渐进最优\"><a href=\"#渐进最优\" class=\"headerlink\" title=\"渐进最优\"></a>渐进最优</h4></li>\n<li>在计算机科学中，<a href=\"https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%9B%E6%9C%80%E4%BC%98\">渐进最优</a>一词用以评价算法的效率。如果已经证实一个问题需要使用Ω(f(n))的资源来解决，而某个算法用O(f(n))的资源来解决这个问题，则该算法就是渐进最优的。</li>\n<li>渐进最优的例子包括数据结构动态数组，能够在常数时间内索引，但性能在多数机器上不如普通数组的索引。另外，在所有基于比较的排序算法中，归并排序和堆排序是渐进最优的。</li>\n</ul>\n<h3 id=\"三个标记法\"><a href=\"#三个标记法\" class=\"headerlink\" title=\"三个标记法\"></a>三个标记法</h3><ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span></span></span></span>标记法<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7\">大O符号</a>（上界）表示函数在增长到一定程度时总小于一个特定函数的常数倍。</li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Ω</span></span></span></span>标记法<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%A9%E7%AC%A6%E5%8F%B7\">大Ω符号</a>表示总大于函数在增长到一定程度时总大于一个特定函数的常数倍。</li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Θ</mi></mrow><annotation encoding=\"application/x-tex\">\\Theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Θ</span></span></span></span>标记法<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%98%E7%AC%A6%E5%8F%B7\">大Θ符号</a>表示函数在某个区间上的渐近关系。如果两个函数在某个区间上的上界和下界都分别为另一个函数，那么这两个函数在该区间上是渐近相等的，可以用大Θ符号表示为：f(n) = Θ(g(n))</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"时空权衡原则\"><a href=\"#时空权衡原则\" class=\"headerlink\" title=\"时空权衡原则\"></a>时空权衡原则</h3><ul>\n<li>计算机科学中的 <a href=\"https://zh.wikipedia.org/wiki/%E6%97%B6%E7%A9%BA%E6%9D%83%E8%A1%A1\">时空权衡</a>（英语：space–time trade off，又叫<strong>空间换时间</strong>）是指一个算法或程序用增加空间使用量来换取时间减少的情况。这里，空间指的是执行一个给定任务所消耗的数据存储（内存、硬盘等），而时间指的是执行一个给定任务所消耗的时间（计算时间或反应时间）。</li>\n<li>一个给定的时空权衡的效用受到相关的固定和可变成本（如CPU速度、存储空间）的影响，并受到<u>收益递减的</u>影响。</li>\n</ul>\n<h2 id=\"三、线性表\"><a href=\"#三、线性表\" class=\"headerlink\" title=\"三、线性表\"></a>三、线性表</h2><h3 id=\"线性表的定义\"><a href=\"#线性表的定义\" class=\"headerlink\" title=\"线性表的定义\"></a>线性表的定义</h3><h3 id=\"线性表的逻辑结构\"><a href=\"#线性表的逻辑结构\" class=\"headerlink\" title=\"线性表的逻辑结构\"></a>线性表的逻辑结构</h3><h3 id=\"线性表的基本操作\"><a href=\"#线性表的基本操作\" class=\"headerlink\" title=\"线性表的基本操作\"></a>线性表的基本操作</h3><h3 id=\"顺序表的定义\"><a href=\"#顺序表的定义\" class=\"headerlink\" title=\"顺序表的定义\"></a>顺序表的定义</h3><h3 id=\"顺序表的特点\"><a href=\"#顺序表的特点\" class=\"headerlink\" title=\"顺序表的特点\"></a>顺序表的特点</h3><h3 id=\"链式表的定义\"><a href=\"#链式表的定义\" class=\"headerlink\" title=\"链式表的定义\"></a>链式表的定义</h3><h3 id=\"链式表的特点\"><a href=\"#链式表的特点\" class=\"headerlink\" title=\"链式表的特点\"></a>链式表的特点</h3><h3 id=\"用顺序存储结构对线性表基本操作的实现\"><a href=\"#用顺序存储结构对线性表基本操作的实现\" class=\"headerlink\" title=\"用顺序存储结构对线性表基本操作的实现\"></a>用顺序存储结构对线性表基本操作的实现</h3><h3 id=\"用链式存储结构对线性表基本操作的实现\"><a href=\"#用链式存储结构对线性表基本操作的实现\" class=\"headerlink\" title=\"用链式存储结构对线性表基本操作的实现\"></a>用链式存储结构对线性表基本操作的实现</h3><h3 id=\"链式存储结构的实现技术（比如）\"><a href=\"#链式存储结构的实现技术（比如）\" class=\"headerlink\" title=\"链式存储结构的实现技术（比如）\"></a>链式存储结构的实现技术（比如）</h3><h4 id=\"单向链表\"><a href=\"#单向链表\" class=\"headerlink\" title=\"单向链表\"></a>单向链表</h4><h4 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h4><h4 id=\"单循环链表\"><a href=\"#单循环链表\" class=\"headerlink\" title=\"单循环链表\"></a>单循环链表</h4><h4 id=\"双向循环链表\"><a href=\"#双向循环链表\" class=\"headerlink\" title=\"双向循环链表\"></a>双向循环链表</h4><h4 id=\"带头结点的链表\"><a href=\"#带头结点的链表\" class=\"headerlink\" title=\"带头结点的链表\"></a>带头结点的链表</h4><h3 id=\"线性表的应用\"><a href=\"#线性表的应用\" class=\"headerlink\" title=\"线性表的应用\"></a>线性表的应用</h3><h3 id=\"具有在实际中选取不同存储结构的判断能力\"><a href=\"#具有在实际中选取不同存储结构的判断能力\" class=\"headerlink\" title=\"具有在实际中选取不同存储结构的判断能力\"></a>具有在实际中选取不同存储结构的判断能力</h3><h2 id=\"四、栈和队列\"><a href=\"#四、栈和队列\" class=\"headerlink\" title=\"四、栈和队列\"></a>四、栈和队列</h2><h3 id=\"栈的定义\"><a href=\"#栈的定义\" class=\"headerlink\" title=\"栈的定义\"></a>栈的定义</h3><h3 id=\"栈的逻辑结构\"><a href=\"#栈的逻辑结构\" class=\"headerlink\" title=\"栈的逻辑结构\"></a>栈的逻辑结构</h3><h3 id=\"栈的基本操作\"><a href=\"#栈的基本操作\" class=\"headerlink\" title=\"栈的基本操作\"></a>栈的基本操作</h3><h3 id=\"顺序栈的定义\"><a href=\"#顺序栈的定义\" class=\"headerlink\" title=\"顺序栈的定义\"></a>顺序栈的定义</h3><h3 id=\"顺序栈的特点\"><a href=\"#顺序栈的特点\" class=\"headerlink\" title=\"顺序栈的特点\"></a>顺序栈的特点</h3><h3 id=\"链式栈的定义\"><a href=\"#链式栈的定义\" class=\"headerlink\" title=\"链式栈的定义\"></a>链式栈的定义</h3><h3 id=\"链式栈的特点\"><a href=\"#链式栈的特点\" class=\"headerlink\" title=\"链式栈的特点\"></a>链式栈的特点</h3><h3 id=\"队列的定义\"><a href=\"#队列的定义\" class=\"headerlink\" title=\"队列的定义\"></a>队列的定义</h3><h3 id=\"队列的逻辑结构\"><a href=\"#队列的逻辑结构\" class=\"headerlink\" title=\"队列的逻辑结构\"></a>队列的逻辑结构</h3><h3 id=\"队列的基本操作\"><a href=\"#队列的基本操作\" class=\"headerlink\" title=\"队列的基本操作\"></a>队列的基本操作</h3><h3 id=\"顺序队列的定义\"><a href=\"#顺序队列的定义\" class=\"headerlink\" title=\"顺序队列的定义\"></a>顺序队列的定义</h3><h3 id=\"顺序队列的特点\"><a href=\"#顺序队列的特点\" class=\"headerlink\" title=\"顺序队列的特点\"></a>顺序队列的特点</h3><h3 id=\"链式队列的定义\"><a href=\"#链式队列的定义\" class=\"headerlink\" title=\"链式队列的定义\"></a>链式队列的定义</h3><h3 id=\"链式队列的特点\"><a href=\"#链式队列的特点\" class=\"headerlink\" title=\"链式队列的特点\"></a>链式队列的特点</h3><h3 id=\"用顺序存储结构对栈和队列基本操作的实现\"><a href=\"#用顺序存储结构对栈和队列基本操作的实现\" class=\"headerlink\" title=\"用顺序存储结构对栈和队列基本操作的实现\"></a>用顺序存储结构对栈和队列基本操作的实现</h3><h3 id=\"用链式存储结构对栈和队列基本操作的实现\"><a href=\"#用链式存储结构对栈和队列基本操作的实现\" class=\"headerlink\" title=\"用链式存储结构对栈和队列基本操作的实现\"></a>用链式存储结构对栈和队列基本操作的实现</h3><h3 id=\"顺序存储结构中实现循环队列的具体要求\"><a href=\"#顺序存储结构中实现循环队列的具体要求\" class=\"headerlink\" title=\"顺序存储结构中实现循环队列的具体要求\"></a>顺序存储结构中实现循环队列的具体要求</h3><h3 id=\"理解递归调用和栈之间的关系\"><a href=\"#理解递归调用和栈之间的关系\" class=\"headerlink\" title=\"理解递归调用和栈之间的关系\"></a>理解递归调用和栈之间的关系</h3><h3 id=\"掌握栈和队列的经典应用\"><a href=\"#掌握栈和队列的经典应用\" class=\"headerlink\" title=\"掌握栈和队列的经典应用\"></a>掌握栈和队列的经典应用</h3><h2 id=\"五、二叉树、树和森林\"><a href=\"#五、二叉树、树和森林\" class=\"headerlink\" title=\"五、二叉树、树和森林\"></a>五、二叉树、树和森林</h2><h3 id=\"二叉树、树、森林的定义以及它们之间的异同点\"><a href=\"#二叉树、树、森林的定义以及它们之间的异同点\" class=\"headerlink\" title=\"二叉树、树、森林的定义以及它们之间的异同点\"></a>二叉树、树、森林的定义以及它们之间的异同点</h3><h3 id=\"二叉树的实现（包括）\"><a href=\"#二叉树的实现（包括）\" class=\"headerlink\" title=\"二叉树的实现（包括）\"></a>二叉树的实现（包括）</h3><blockquote>\n<p>理解二叉树采用顺序存储结构和链式存储结构的差异性</p>\n<h4 id=\"顺序存储结构\"><a href=\"#顺序存储结构\" class=\"headerlink\" title=\"顺序存储结构\"></a>顺序存储结构</h4></blockquote>\n<h4 id=\"链式存储结构\"><a href=\"#链式存储结构\" class=\"headerlink\" title=\"链式存储结构\"></a>链式存储结构</h4><h3 id=\"二叉树的遍历（四种）\"><a href=\"#二叉树的遍历（四种）\" class=\"headerlink\" title=\"二叉树的遍历（四种）\"></a>二叉树的遍历（四种）</h3><blockquote>\n<p>掌握二叉树的四种遍历，并具有能够依赖遍历完成对二叉树进行操作的能力</p>\n</blockquote>\n<h3 id=\"二叉树结构下的应用及扩展（例如）\"><a href=\"#二叉树结构下的应用及扩展（例如）\" class=\"headerlink\" title=\"二叉树结构下的应用及扩展（例如）\"></a>二叉树结构下的应用及扩展（例如）</h3><blockquote>\n<p>掌握利用二叉树及其扩展下的检索技术；掌握Huffman编码、堆的<strong>实现及应用</strong></p>\n<h4 id=\"二叉检索树\"><a href=\"#二叉检索树\" class=\"headerlink\" title=\"二叉检索树\"></a>二叉检索树</h4></blockquote>\n<h4 id=\"2-3-4树\"><a href=\"#2-3-4树\" class=\"headerlink\" title=\"2-3-4树\"></a>2-3-4树</h4><h4 id=\"B树\"><a href=\"#B树\" class=\"headerlink\" title=\"B树\"></a>B树</h4><h4 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h4><h4 id=\"Huffman编码\"><a href=\"#Huffman编码\" class=\"headerlink\" title=\"Huffman编码\"></a>Huffman编码</h4><h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><h3 id=\"平衡二叉树的定义\"><a href=\"#平衡二叉树的定义\" class=\"headerlink\" title=\"平衡二叉树的定义\"></a>平衡二叉树的定义</h3><h3 id=\"平衡因子的定义\"><a href=\"#平衡因子的定义\" class=\"headerlink\" title=\"平衡因子的定义\"></a>平衡因子的定义</h3><h3 id=\"平衡二叉树的旋转操作\"><a href=\"#平衡二叉树的旋转操作\" class=\"headerlink\" title=\"平衡二叉树的旋转操作\"></a>平衡二叉树的旋转操作</h3><h3 id=\"树和森林的存储结构\"><a href=\"#树和森林的存储结构\" class=\"headerlink\" title=\"树和森林的存储结构\"></a>树和森林的存储结构</h3><blockquote>\n<p>掌握树、森林能够采用的各种存储方式的差异性</p>\n</blockquote>\n<h3 id=\"树和森林的遍历\"><a href=\"#树和森林的遍历\" class=\"headerlink\" title=\"树和森林的遍历\"></a>树和森林的遍历</h3><blockquote>\n<p>掌握树、森林在遍历方面和二叉树的不同以及相关性</p>\n</blockquote>\n<h3 id=\"森林与二叉树的转换\"><a href=\"#森林与二叉树的转换\" class=\"headerlink\" title=\"森林与二叉树的转换\"></a>森林与二叉树的转换</h3><h3 id=\"森林结构的应用（例如）\"><a href=\"#森林结构的应用（例如）\" class=\"headerlink\" title=\"森林结构的应用（例如）\"></a>森林结构的应用（例如）</h3><h4 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h4><blockquote>\n<p>理解并查集的意义，以及掌握并查集的基本操作的实现</p>\n</blockquote>\n<h2 id=\"六、图\"><a href=\"#六、图\" class=\"headerlink\" title=\"六、图\"></a>六、图</h2><h3 id=\"图的定义（包括）\"><a href=\"#图的定义（包括）\" class=\"headerlink\" title=\"图的定义（包括）\"></a>图的定义（包括）</h3><h4 id=\"完全图\"><a href=\"#完全图\" class=\"headerlink\" title=\"完全图\"></a>完全图</h4><h4 id=\"连通图\"><a href=\"#连通图\" class=\"headerlink\" title=\"连通图\"></a>连通图</h4><h4 id=\"简单路径\"><a href=\"#简单路径\" class=\"headerlink\" title=\"简单路径\"></a>简单路径</h4><h4 id=\"有向图\"><a href=\"#有向图\" class=\"headerlink\" title=\"有向图\"></a>有向图</h4><h4 id=\"无向图\"><a href=\"#无向图\" class=\"headerlink\" title=\"无向图\"></a>无向图</h4><h4 id=\"无环图\"><a href=\"#无环图\" class=\"headerlink\" title=\"无环图\"></a>无环图</h4><h4 id=\"等\"><a href=\"#等\" class=\"headerlink\" title=\"等\"></a>等</h4><h3 id=\"图和二叉树、树和森林这种结构之间的异同点（明确理解）\"><a href=\"#图和二叉树、树和森林这种结构之间的异同点（明确理解）\" class=\"headerlink\" title=\"图和二叉树、树和森林这种结构之间的异同点（明确理解）\"></a>图和二叉树、树和森林这种结构之间的异同点（明确理解）</h3><h3 id=\"图的存储（包括）\"><a href=\"#图的存储（包括）\" class=\"headerlink\" title=\"图的存储（包括）\"></a>图的存储（包括）</h3><h4 id=\"邻接矩阵\"><a href=\"#邻接矩阵\" class=\"headerlink\" title=\"邻接矩阵\"></a>邻接矩阵</h4><h4 id=\"邻接表\"><a href=\"#邻接表\" class=\"headerlink\" title=\"邻接表\"></a>邻接表</h4><h4 id=\"差异性\"><a href=\"#差异性\" class=\"headerlink\" title=\"差异性\"></a>差异性</h4><h3 id=\"图的基本操作\"><a href=\"#图的基本操作\" class=\"headerlink\" title=\"图的基本操作\"></a>图的基本操作</h3><h3 id=\"图的两种遍历\"><a href=\"#图的两种遍历\" class=\"headerlink\" title=\"图的两种遍历\"></a>图的两种遍历</h3><h4 id=\"广度优先遍历\"><a href=\"#广度优先遍历\" class=\"headerlink\" title=\"广度优先遍历\"></a>广度优先遍历</h4><h4 id=\"深度优先遍历\"><a href=\"#深度优先遍历\" class=\"headerlink\" title=\"深度优先遍历\"></a>深度优先遍历</h4><h3 id=\"图的基本应用（包括）\"><a href=\"#图的基本应用（包括）\" class=\"headerlink\" title=\"图的基本应用（包括）\"></a>图的基本应用（包括）</h3><h4 id=\"最小支撑树\"><a href=\"#最小支撑树\" class=\"headerlink\" title=\"最小支撑树\"></a>最小支撑树</h4><ul>\n<li><p><strong>Prim算法</strong></p>\n</li>\n<li><p><strong>Kruskal算法</strong></p>\n</li>\n</ul>\n<h4 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h4><ul>\n<li><p><strong>Dijkstra算法</strong></p>\n</li>\n<li><p><strong>BellmanFord算法</strong></p>\n</li>\n<li><p><strong>Floyd算法</strong></p>\n</li>\n</ul>\n<h4 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h4><h4 id=\"关键路径\"><a href=\"#关键路径\" class=\"headerlink\" title=\"关键路径\"></a>关键路径</h4><h2 id=\"七、查找\"><a href=\"#七、查找\" class=\"headerlink\" title=\"七、查找\"></a>七、查找</h2><blockquote>\n<p>查找的定义和与查找有关的算法：顺序查找法、折半查找法、散列（Hash）技术。</p>\n</blockquote>\n<h3 id=\"理解查找的定义\"><a href=\"#理解查找的定义\" class=\"headerlink\" title=\"理解查找的定义\"></a>理解查找的定义</h3><ol>\n<li>查找。在数据集合中寻找满足某种条件的数据元素的过程称为<strong>查找</strong>。</li>\n<li>在数据集合中找了满足条件的数据元素为<strong>查找成功</strong>，否则为<strong>查找失败</strong>。</li>\n<li>用于查找的数据集合为<strong>查找表</strong>，它是由同一类型的数据元素（或记录）组成的。对查找表的<strong>常见操作</strong>有：① 查询符合条件的数据元素；② 插入、删除数据元素。</li>\n<li>静态查找表。若一个查找表的操作只涉及查找操作，则无须动态地修改查找表，此类查找表称为<strong>静态查找表</strong>。与此对应，需要动态地插入或删除的查找表称为<strong>动态查找表</strong>。适合静态查找表的<strong>查找方法</strong>有顺序查找、折半查找、散列查找等；适合动态查找表的<strong>查找方法</strong>有二叉排序树的查找、散列查找等。</li>\n<li>关键字。数据元素中的唯一标识该元素的某个数据项的值，使用基于关键字的查找，查找结果应该是唯一的。例如，在有一个学生元素构成的数据集合中，学生元素中“学号”这一数据项的值唯一地标识一名学生。</li>\n<li>平均查找长度。在查找过程中，一次查找的长度是指需要比较的关键字次数，而平均查找长度则是所有查找过程中进行关键字的比较次数的平均值，其数学定义为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>P</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">ASL=\\sum\\limits_{i=1}^{n}P_i C_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3291em;vertical-align:-0.9777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. 式中，n是查找表的长度（因为每一个元素都要查找，所有都得考虑进去），Pi是查找第i个数据元素的概率，<strong>一般认为每个数据元素的查找概率相等</strong>，即Pi=1/n；Ci是找到第i个数据元素所需进行的<strong>比较次数</strong>。平均查找长度是<strong>衡量算法效率</strong>的<strong>最主要</strong>指标。</li>\n<li><strong>有序线性表</strong>的<strong>顺序查找</strong>中的线性表可以是<strong>链式存储结构</strong>，而<strong>折半查找</strong>中的线性表只能是顺序存储结构。</li>\n</ol>\n<h3 id=\"衡量查找算法的一些指标：三个查找长度\"><a href=\"#衡量查找算法的一些指标：三个查找长度\" class=\"headerlink\" title=\"衡量查找算法的一些指标：三个查找长度\"></a>衡量查找算法的一些指标：三个查找长度</h3><h4 id=\"顺序查找法\"><a href=\"#顺序查找法\" class=\"headerlink\" title=\"顺序查找法\"></a>顺序查找法</h4><ul>\n<li><strong>一般无序线性表</strong><blockquote>\n<p>从后往前找，a[0]=x作为哨兵，若查找不成功，说明是从n比较到0都没找到，即比较了n+1次。</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>平均查找长度（成功不成功都计入，每个概率为1/2n）<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>n</mi></mrow></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>3</mn><mn>4</mn></mfrac><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ASL=\\frac{1}{2n}\\sum\\limits_{i=1}^{n}(n-1+1)+\\frac{1}{2}(n+1)=\\frac{3}{4}(n+1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3291em;vertical-align:-0.9777em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>成功查找的（平均）查找长度  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mo>∑</mo><msup><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msup><msub><mi>P</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mo>∑</mo><msup><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msup><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">ASL=\\sum\\limits{i=1}^{n}P_i C_i=\\frac{1}{n}\\sum\\limits{i=1}^{n}(n-i+1)=\\frac{n+1}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7138em;\"><span style=\"top:-3.1124em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7138em;\"><span style=\"top:-3.1124em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n<li>不成功查找的（平均）查找长度  ASL=n+1</li>\n</ol>\n<ul>\n<li><strong>有序线性表</strong></li>\n</ul>\n<ol>\n<li>平均查找长度</li>\n<li>成功查找的（平均）查找长度<br>有序的结果和一般线性表的顺序查找一样，<strong>但是！！！要注意！！！这里的查找顺序若是从前往后，就不是和上面一样的结果！！！</strong></li>\n<li>不成功查找的（平均）查找长度<blockquote>\n<p>表L是按关键字从小到大排列的，查找的顺序是从前往后。假设有n个结点（这些是查找成功的结点），虚构n+1个查找失败结点。Pi为1/(n+1)，1,2,…,n,n为查找失败时的比较次数。</p>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo>+</mo><mi>n</mi></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo>=</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>+</mo><mfrac><mi>n</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">ASL=\\frac{1+2+\\cdots+n+n}{n+1}=\\frac{n}{2}+\\frac{n}{n+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2484em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">2</span><span class=\"mbin mtight\">+</span><span class=\"minner mtight\">⋯</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0987em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"折半查找法（二分查找）\"><a href=\"#折半查找法（二分查找）\" class=\"headerlink\" title=\"折半查找法（二分查找）\"></a>折半查找法（二分查找）</h4><ol>\n<li>平均查找长度</li>\n<li>成功查找的（平均）查找长度<blockquote>\n<p>等概率，Pi为1/n。树上的每个结点都要考虑进去，每个结点的比较次数为它的层数。第一层次数为1（层高），有2^0（2^(j-1)）个结点要计算；第二层次数为2（层高），有2^1（2^(j-1)）个结点要计算……直到最后一层，这里不一定是满二叉树，但就按照满二叉树近似计算了。</p>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mo stretchy=\"false\">(</mo><mn>1</mn><mo>×</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>×</mo><mn>2</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>h</mi><mo>×</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mi>n</mi></mfrac><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn><mo>≈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">ASL=\\frac{1}{n}(1×1+2×2+\\cdots+h×2^{h-1})=\\frac{n+1}{n}log_2(n+1)-1≈log_2(n+1)-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>\n<p>这里记一下最终结果！（因为不知道咋算出来的）<br>另外，h为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo></mrow><annotation encoding=\"application/x-tex\">\\lceil log_2(n+1) \\rceil</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)⌉</span></span></span></span>.</p>\n</blockquote>\n</li>\n<li>不成功查找的（平均）查找长度<blockquote>\n<p>虚构出方形结点，挂到圆形结点的下方。如果查找失败，即为方形结点，但是次数是上面那个圆形结点的层数。比如二叉树第3层下面总共挂了4个方形结点，第4层挂了8个方形节点：<br>ASL=(3×4+4×8)/12=11/3</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"散列（Hash）查找法\"><a href=\"#散列（Hash）查找法\" class=\"headerlink\" title=\"散列（Hash）查找法\"></a>散列（Hash）查找法</h4><ol>\n<li>平均查找长度</li>\n<li>成功查找的（平均）查找长度</li>\n<li>不成功查找的（平均）查找长度</li>\n</ol>\n<h3 id=\"掌握顺序查找法和折半查找法，并理解二者之间的异同点\"><a href=\"#掌握顺序查找法和折半查找法，并理解二者之间的异同点\" class=\"headerlink\" title=\"掌握顺序查找法和折半查找法，并理解二者之间的异同点\"></a>掌握顺序查找法和折半查找法，并理解二者之间的异同点</h3><h3 id=\"掌握散列技术（包括）\"><a href=\"#掌握散列技术（包括）\" class=\"headerlink\" title=\"掌握散列技术（包括）\"></a>掌握散列技术（包括）</h3><h4 id=\"散列函数\"><a href=\"#散列函数\" class=\"headerlink\" title=\"散列函数\"></a>散列函数</h4><h4 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h4><h4 id=\"散列冲突的发生及其解决方法\"><a href=\"#散列冲突的发生及其解决方法\" class=\"headerlink\" title=\"散列冲突的发生及其解决方法\"></a>散列冲突的发生及其解决方法</h4><h4 id=\"负载因子\"><a href=\"#负载因子\" class=\"headerlink\" title=\"负载因子\"></a>负载因子</h4><h3 id=\"理解不同查找技术的优缺点\"><a href=\"#理解不同查找技术的优缺点\" class=\"headerlink\" title=\"理解不同查找技术的优缺点\"></a>理解不同查找技术的优缺点</h3><h2 id=\"八、排序\"><a href=\"#八、排序\" class=\"headerlink\" title=\"八、排序\"></a>八、排序</h2><h3 id=\"排序的定义（包括）\"><a href=\"#排序的定义（包括）\" class=\"headerlink\" title=\"排序的定义（包括）\"></a>排序的定义（包括）</h3><h4 id=\"内排序\"><a href=\"#内排序\" class=\"headerlink\" title=\"内排序\"></a>内排序</h4><h4 id=\"外排序\"><a href=\"#外排序\" class=\"headerlink\" title=\"外排序\"></a>外排序</h4><h4 id=\"内排序和外排序的区别\"><a href=\"#内排序和外排序的区别\" class=\"headerlink\" title=\"内排序和外排序的区别\"></a>内排序和外排序的区别</h4><h4 id=\"排序的稳定性\"><a href=\"#排序的稳定性\" class=\"headerlink\" title=\"排序的稳定性\"></a>排序的稳定性</h4><h3 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h3><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><h3 id=\"简单选择排序\"><a href=\"#简单选择排序\" class=\"headerlink\" title=\"简单选择排序\"></a>简单选择排序</h3><h3 id=\"Shell排序\"><a href=\"#Shell排序\" class=\"headerlink\" title=\"Shell排序\"></a>Shell排序</h3><h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><h3 id=\"时空复杂度和稳定性\"><a href=\"#时空复杂度和稳定性\" class=\"headerlink\" title=\"时空复杂度和稳定性\"></a>时空复杂度和稳定性</h3><blockquote>\n<p>对直接插入排序、冒泡排序、简单选择排序、Shell排序、快速排序、堆排序、归并排序、基数排序这些算法，掌握其在时间复杂度、空间复杂度以及是否稳定等方面的特点</p>\n</blockquote>\n<h3 id=\"K路归并排序\"><a href=\"#K路归并排序\" class=\"headerlink\" title=\"K路归并排序\"></a>K路归并排序</h3><h4 id=\"k路归并排序的外排序算法\"><a href=\"#k路归并排序的外排序算法\" class=\"headerlink\" title=\"k路归并排序的外排序算法\"></a>k路归并排序的外排序算法</h4><h3 id=\"选择合适排序算法\"><a href=\"#选择合适排序算法\" class=\"headerlink\" title=\"选择合适排序算法\"></a>选择合适排序算法</h3><blockquote>\n<p>具有在不同的应用需求下，能够依据各种排序算法的特点选择合适排序算法的能力</p>\n</blockquote>\n<h2 id=\"九、矩阵和串\"><a href=\"#九、矩阵和串\" class=\"headerlink\" title=\"九、矩阵和串\"></a>九、矩阵和串</h2><h3 id=\"矩阵和串的定义\"><a href=\"#矩阵和串的定义\" class=\"headerlink\" title=\"矩阵和串的定义\"></a>矩阵和串的定义</h3><h3 id=\"特殊矩阵的压缩存储\"><a href=\"#特殊矩阵的压缩存储\" class=\"headerlink\" title=\"特殊矩阵的压缩存储\"></a>特殊矩阵的压缩存储</h3><h3 id=\"稀疏矩阵的三元组表示法以及相应的操作\"><a href=\"#稀疏矩阵的三元组表示法以及相应的操作\" class=\"headerlink\" title=\"稀疏矩阵的三元组表示法以及相应的操作\"></a>稀疏矩阵的三元组表示法以及相应的操作</h3><h3 id=\"多维数组和一维数组的映射\"><a href=\"#多维数组和一维数组的映射\" class=\"headerlink\" title=\"多维数组和一维数组的映射\"></a>多维数组和一维数组的映射</h3><h3 id=\"串的模式匹配\"><a href=\"#串的模式匹配\" class=\"headerlink\" title=\"串的模式匹配\"></a>串的模式匹配</h3><h4 id=\"Brute-Force\"><a href=\"#Brute-Force\" class=\"headerlink\" title=\"Brute-Force\"></a>Brute-Force</h4><h4 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h4>","more":"<h2 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h2><blockquote>\n<p>建议另外过一遍 <a href=\"../../articles/fc6ebebe.html\">严蔚敏课笔记</a></p>\n</blockquote>\n<h4 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h4><ul>\n<li>数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。数据是计算机程序加工的原料。</li>\n</ul>\n<h4 id=\"数据元素\"><a href=\"#数据元素\" class=\"headerlink\" title=\"数据元素\"></a>数据元素</h4><ul>\n<li>数据元素是数据的<strong>基本单位</strong>，通常作为一个整体进行考虑和处理。</li>\n</ul>\n<h4 id=\"数据项\"><a href=\"#数据项\" class=\"headerlink\" title=\"数据项\"></a>数据项</h4><ul>\n<li>一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分割的<strong>最小单位</strong>。</li>\n<li>例如，学生记录就是一个数据元素，它由学号、姓名、性别等数据项组成。</li>\n</ul>\n<h4 id=\"数据对象\"><a href=\"#数据对象\" class=\"headerlink\" title=\"数据对象\"></a>数据对象</h4><ul>\n<li>数据对象是具有相同性质的数据元素的集合，是数据的一个子集。</li>\n<li>例如，整数数据对象是集合 N={0,±1,±2,…}。</li>\n</ul>\n<h4 id=\"数据、数据元素、数据项之间的关系\"><a href=\"#数据、数据元素、数据项之间的关系\" class=\"headerlink\" title=\"数据、数据元素、数据项之间的关系\"></a>数据、数据元素、数据项之间的关系</h4><ul>\n<li>数据-&gt;数据对象-&gt;数据元素-&gt;数据项</li>\n<li>两张表-&gt;数据；其中一张表-&gt;数据对象；表中每一行（记录）-&gt;数据元素；每条记录的每个属性-&gt;数据项</li>\n</ul>\n<h4 id=\"数据结构的定义\"><a href=\"#数据结构的定义\" class=\"headerlink\" title=\"数据结构的定义\"></a>数据结构的定义</h4><ul>\n<li>数据结构是相互之间存在一种或多种特定<strong>关系</strong>的<strong>数据元素</strong>的集合。在任何问题中，数据元素都不是孤立存在的，它们之间存在某种关系，这种数据元素相互之间的关系称为结构（Structure）。</li>\n</ul>\n<h4 id=\"数据结构的三要素\"><a href=\"#数据结构的三要素\" class=\"headerlink\" title=\"数据结构的三要素\"></a>数据结构的三要素</h4><ul>\n<li>数据结构包括三方面的内容：<strong>逻辑结构</strong>、<strong>存储结构</strong>和<strong>数据的运算</strong>。</li>\n<li>数据的<strong>逻辑结构</strong>和<strong>存储结构</strong>是密不可分的两个方面，一个<strong>算法的设计</strong>取决于所选定的<strong>逻辑结构</strong>，而<strong>算法的实现</strong>依赖于所采用的<strong>存储结构</strong>。</li>\n</ul>\n<h4 id=\"数据的逻辑结构\"><a href=\"#数据的逻辑结构\" class=\"headerlink\" title=\"数据的逻辑结构\"></a>数据的逻辑结构</h4><ul>\n<li>逻辑结构是指数据元素之间的<strong>逻辑关系</strong>，即从逻辑关系上描述数据。它与数据的存储无关，是独立于计算机的。</li>\n<li>数据的逻辑结构分为<strong>线性结构</strong>和<strong>非线性结构</strong>，<strong>线性表</strong>是典型的线性结构，<strong>集合、树和图</strong>是典型的非线性结构。<br>1) <strong>集合</strong>。结构中的元素之间除“同属一个集合”外，别无其它关系。<br>2) <strong>线性结构</strong>。结构中的数据元素之间只存在一对一的关系。<br>3) <strong>树形结构</strong>。结构中的数据元素之间存在一对多的关系。<br>4) <strong>图状结构</strong>或<strong>网状结构</strong>。结构中的数据元素之间存在多对多的关系。</li>\n</ul>\n<h4 id=\"数据的物理结构\"><a href=\"#数据的物理结构\" class=\"headerlink\" title=\"数据的物理结构\"></a>数据的物理结构</h4><ul>\n<li><code>存储结构</code>是指数据结构在计算机中的表示（又称<strong>映像</strong>），也称<code>物理结构</code>。它包括<strong>数据元素</strong>的表示和<strong>关系</strong>的表示。数据的存储结构是计算机语言实现的逻辑结构，它依赖于计算机语言。数据的存储结构主要有<strong>顺序存储、链式存储、索引存储和散列存储</strong>。<br>1) <strong>顺序存储</strong>。把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。<br>其<strong>优点</strong>是可以实现<u>随机存取</u>，每个元素占用最少的存储空间；<strong>缺点</strong>是只能使用相邻的一整块存储单元，因此可能产生较多的外部碎片。<br>2) <strong>链式存储</strong>。不要求逻辑上相邻的元素在物理位置上也相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系。<br>其<strong>优点</strong>是<u>不会出现碎片现象</u>，能充分利用所有存储单元；<strong>缺点</strong>是<u>每个元素因存储指针而占用额外的存储空间</u>，且只能实现顺序存取。<br>3) <strong>索引存储</strong>。在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为<strong>索引项</strong>，索引项的一般形式是（关键字，地址）。<br>其<strong>优点</strong>是<u>检索速度快</u>；<strong>缺点</strong>是<u>附加的索引表额外占用存储空间</u>。另外，增加和删除数据时也要修改索引表，因而<u>会花费较多的时间</u>。<br>4) <strong>散列存储</strong>。根据元素的关键字直接计算出该元素的存储地址，又称<strong>哈希（Hash）存储</strong>。<br>其<strong>优点</strong>时<u>检索、增加和删除结点的操作都很快</u>；<strong>缺点</strong>是若散列函数不好，则可能出现<u>元素存储单元的冲突</u>，而解决冲突<u>会增加时间和空间开销</u>。</li>\n</ul>\n<h4 id=\"数据的运算的定义\"><a href=\"#数据的运算的定义\" class=\"headerlink\" title=\"数据的运算的定义\"></a>数据的运算的定义</h4><ul>\n<li>（王道）施加在数据上的运算包括运算的<strong>定义</strong>和<strong>实现</strong>。运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，指出运算的具体操作步骤。</li>\n<li>（博客）数据的运算是指对数据实施的操作，数据的运算最终需要在对应的存储结构上用算法实现，所以数据运算分为运算的定义和运算的实现两个层面。<br>运算的定义是对运算功能的描述，是抽象的，是基于逻辑的。<br>运算的实现是程序员完成运算的实现算法，是具体的，是基于存储结构的。</li>\n</ul>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><ul>\n<li>数据类型是一个值的集合和定义在集合上的一组操作的总称。<br>1) <strong>原子类型</strong>。其值不可再分的数据类型。<br>2) <strong>结构类型</strong>。其值可以再分解为若干成分（分量）的数据类型。<br>3) <code>抽象数据类型</code>。一个数学模型及定义在该数学模型上的一组操作。它通常是对数据的某种抽象，定义了数据的取值范围及其结构形式，以及对数据操作的集合。</li>\n<li><code>抽象数据类型</code>的三个组成部分：数据对象、数据关系和基本操作。</li>\n<li>（蓝皮书，定义）<code>抽象数据类型</code>是一种构造数据类型，它具有三大特征，<strong>信息隐蔽、数据封装、使用与实现相分离</strong>。</li>\n</ul>\n<h4 id=\"数据类型、抽象数据类型和数据结构之间的关系\"><a href=\"#数据类型、抽象数据类型和数据结构之间的关系\" class=\"headerlink\" title=\"数据类型、抽象数据类型和数据结构之间的关系\"></a>数据类型、抽象数据类型和数据结构之间的关系</h4><ul>\n<li><strong>数据类型</strong>是一个值的集合和定义在此集合上的一组操作的总称。（值+操作）</li>\n<li><strong>抽象数据类型（ADT）</strong>是一个数学模型及定义在该数学模型上的一组操作。（数学模型+操作）它通常是对数据的某种抽象，定义了数据的取值范围及其结构形式，以及对数据操作的集合。（数据对象+数据关系+基本操作）</li>\n<li><strong>数据结构</strong>是相互之间存在一种或多种特定<strong>关系</strong>的<strong>数据元素</strong>的集合。（数据元素+数据关系）</li>\n</ul>\n<h2 id=\"二、算法和算法分析\"><a href=\"#二、算法和算法分析\" class=\"headerlink\" title=\"二、算法和算法分析\"></a>二、算法和算法分析</h2><h3 id=\"算法的定义\"><a href=\"#算法的定义\" class=\"headerlink\" title=\"算法的定义\"></a>算法的定义</h3><ul>\n<li>算法是对特定问题求解步骤的一种描述，它是指令的有限序列，其中的每一条指令表示一个或多个操作。</li>\n<li>算法和程序的区别：<ol>\n<li>算法是描述一个问题求解的步骤序列，而程序是算法在特定计算机上的实现。</li>\n<li>算法不依赖于计算机，而程序依赖于特定的计算机和特定的编程语言。</li>\n<li>算法必须满足五个特性，即有穷性、确定性、可行性、有输入、有输出，而程序可能不满足有穷性。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"算法的特性（五个）\"><a href=\"#算法的特性（五个）\" class=\"headerlink\" title=\"算法的特性（五个）\"></a>算法的特性（五个）</h3><ol>\n<li><strong>有穷性</strong>。一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。</li>\n<li><strong>确定性</strong>。算法中每条指令必须有确切的含义，对于相同的输入只能得出相同的输出。</li>\n<li><strong>可行性</strong>。算法中描述的操作都可以通过 已经实现的基本运算 执行有限次来实现。</li>\n<li><strong>输入</strong>。一个算法有零个或多个输入，这些输入取自于某个特定的对象的集合。</li>\n<li><strong>输出</strong>。一个算法有一个或多个输出，这些输出是与输入有着某些特定关系的量。</li>\n</ol>\n<h3 id=\"算法设计的要求\"><a href=\"#算法设计的要求\" class=\"headerlink\" title=\"算法设计的要求\"></a>算法设计的要求</h3><ol>\n<li><strong>正确性</strong>。算法应能够正确地解决求解问题。<ul>\n<li>首先，算法应当满足以特定的“规格说明”方式给出的需求。</li>\n<li>其次，对算法是否“正确”的理解可以有以下四个层次：<br>a. 程序中不含语法错误；<br>b. 程序对于几组输入数据能够得出满足规格说明要求的结果；<br>c. 程序对于精心选择的典型、苛刻而带有刁难性的几组输入数据能够得出满足规格说明要求的结果；<br>d. 程序对于一切合法的输入数据都能产生满足规格说明要求的结果。<br>（通常以第c层意义的正确性作为衡量一个程序是否合格的标准。）</li>\n</ul>\n</li>\n<li><strong>可读性</strong>。算法应具有良好的可读性，以帮助人们理解。<ul>\n<li>算法主要是为了人的阅读与交流，其次才是机器执行。可读性好有助于人对算法的理解；</li>\n<li>另一方面，晦涩难懂的程序易于隐藏较多错误，难以调试和修改。</li>\n</ul>\n</li>\n<li><strong>健壮性</strong>。算法能对输入的非法数据做出反应或处理，而不会产生莫名其妙的输出。<ul>\n<li>当输入数据非法时，算法也能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果。</li>\n<li>并且，处理出错的方法应是返回一个表示错误或错误性质的值，而不是打印错误信息或异常，并中止程序的执行，以便在更高的抽象层次上进行处理。</li>\n</ul>\n</li>\n<li><strong>效率与低存储量需求</strong>。效率是指算法执行的时间，存储量需求是指算法执行过程中所需要的最大存储空间，这两者都与问题的规模有关。<ul>\n<li>（因为：求100个人的平均分与求1000个人的平均分所花的执行时间或运行空间显然有一定的差别。）</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"算法的时间、空间复杂度的定义及计算\"><a href=\"#算法的时间、空间复杂度的定义及计算\" class=\"headerlink\" title=\"算法的时间、空间复杂度的定义及计算\"></a>算法的时间、空间复杂度的定义及计算</h3><ul>\n<li>（归纳下应该这么说）算法的<strong>时间复杂度</strong>是一个关于问题规模n的函数，表示算法中基本运算的执行次数的数量级，定性地描述该算法的运行时间。</li>\n<li>（归纳下应该这么说）算法的<strong>空间复杂度</strong>是问题规模n的函数，定性地描述该算法或程序运行所需要的存储空间大小。</li>\n<li>（<a href=\"https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">wiki</a>）算法的<strong>时间复杂度</strong>（time complexity）是一个函数，它定性描述该算法的运行时间。时间复杂度常用大O符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，也就是考察输入值大小趋近无穷时的情况。例如，如果一个算法对于任何大小为 n （必须比 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">n_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 大）的输入，它至多需要 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn><msup><mi>n</mi><mn>3</mn></msup><mo>+</mo><mn>3</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">5n^3 + 3n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">5</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span></span></span></span> 的时间运行完毕，那么它的渐近时间复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li>（<a href=\"https://zh.wikipedia.org/wiki/%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">wiki</a>）在计算机科学中，一个算法或程序的<strong>空间复杂度</strong>定性地描述该算法或程序运行所需要的存储空间大小。空间复杂度是相应计算问题的输入值的长度的函数，它表示一个算法完全执行所需要的存储空间大小。</li>\n<li>就像时间复杂度的计算不考虑算法所使用的空间大小一样，空间复杂度也不考虑算法运行需要的时间长短。</li>\n</ul>\n<h3 id=\"衡量算法在资源上的两个方面\"><a href=\"#衡量算法在资源上的两个方面\" class=\"headerlink\" title=\"衡量算法在资源上的两个方面\"></a>衡量算法在资源上的两个方面</h3><ul>\n<li>算法在编写成可执行程序后，运行时需要耗费时间资源和空间(内存)资源 。因此衡量一个算法的好坏，一般是从时间和空间两个维度来衡量的，即<strong>时间复杂度和空间复杂度</strong>。时间复杂度主要衡量一个算法的运行快慢，而空间复杂度主要衡量一个算法运行所需要的<strong>额外内存空间</strong>。根据算法编写出的程序，运行时间更短，运行期间占用的内存更少，该算法的运行效率就更高，算法也就更好。</li>\n<li>度量一个程序的执行时间通常有两种方法：</li>\n</ul>\n<ol>\n<li><p>事后统计的方法 （让算法变成一个程序，在机器上执行并计时）<br>缺点：<br>(1) 必须执行程序<br>(2) 其他因素掩盖算法本质</p>\n</li>\n<li><p>事前分析估算的方法（通常使用的）<br>和算法执行时间相关的因素：<br>(1) 算法选用的策略<br>(2) 问题的规模<br>(3) 编写程序的语言<br>(4) 编译程序产生的机器代码的质量<br>(5) 机器执行指令的速度<br>（后三条和计算机的软件和硬件有关，和设计算法无关，所以设计算法时只考虑前两条）</p>\n</li>\n</ol>\n<ul>\n<li>算法的存储量包括：<br>(1) 输入数据所占空间<br>(2) 程序本身所占空间<br>(3) 辅助变量所占空间<ul>\n<li>若<u><strong>输入数据</strong>所占空间只取决于问题本身，<strong>和算法无关</strong></u>，则只需要分析除输入和程序之外的<strong>辅助变量所占额外空间</strong>。</li>\n<li>若<u><strong>所需额外空间</strong>相对于<strong>输入数据量</strong>来说是<strong>常数</strong></u>，则称此算法为<strong>原地工作</strong>。</li>\n<li>若<u><strong>所需存储量</strong>依赖于<strong>特定的输入</strong></u>，则通常按<strong>最坏情况</strong>考虑。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"算法的渐进性分析方法，会用该方法对算法进行评估\"><a href=\"#算法的渐进性分析方法，会用该方法对算法进行评估\" class=\"headerlink\" title=\"算法的渐进性分析方法，会用该方法对算法进行评估\"></a>算法的渐进性分析方法，会用该方法对算法进行评估</h3><h4 id=\"渐进分析\"><a href=\"#渐进分析\" class=\"headerlink\" title=\"渐进分析\"></a>渐进分析</h4><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%91%E5%88%86%E6%9E%90\">渐进分析（asymptotic analysis、asymptotics）</a>，在数学分析中是一种描述函数在极限附近的行为的方法。有多个科学领域应用此方法。例子如下：<ul>\n<li>在计算机科学中，<a href=\"https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\">算法分析</a>考虑给定算法在输入非常大的数据集时候的性能。</li>\n<li>当实体系统的规模变得非常大的时候，分析它的行为。</li>\n</ul>\n</li>\n<li>最简单的例子如下：考虑一个函数f(n)，我们需要了解当n变得非常大的时候f(n)的性质。<br>令<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">f(n)=n^2+3n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span></span></span></span>，在n特别大的时候，第二项3n比起第一项<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>要小很多。<br>于是对于这个函数，有如下断言：“f(n)在n→∞的情况下与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>渐近等价”，记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>∼</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">f(n)∼n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>。<h4 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h4></li>\n<li>在计算机科学中，<a href=\"https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\">算法分析（Analysis of algorithm）</a>是分析执行一个给定算法需要消耗的计算资源数量（例如计算时间，存储器使用等）的过程。算法的效率或复杂度在理论上表示为一个函数。其定义域是输入数据的长度（通常考虑任意大的输入，没有上界），值域通常是执行步骤数量（时间复杂度）或者存储器位置数量（空间复杂度）。算法分析是计算复杂度理论的重要组成部分。</li>\n<li>理论分析常常利用<a href=\"https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%91%E5%88%86%E6%9E%90\">渐近分析</a>估计一个算法的复杂度，并使用<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7\">大O符号</a>、<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%A9%E7%AC%A6%E5%8F%B7\">大Ω符号</a>和<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%98%E7%AC%A6%E5%8F%B7\">大Θ符号</a>作为标记。举例，二分查找所需的执行步骤数量与查找列表的长度之对数成正比，记为O(log n)，简称为“对数时间”。通常使用渐近分析的原因是，同一算法的不同具体实现的效率可能有差别。但是，对于任何给定的算法，所有符合其设计者意图的实现，它们之间的性能差异应当仅仅是一个系数。</li>\n<li>精确分析算法的效率有时也是可行的，但这样的分析通常需要一些与具体实现相关的假设，称为计算模型。计算模型可以用抽象机器来定义，比如图灵机。或者可以假设某些基本操作在单位时间内可完成。</li>\n<li>假设二分查找的目标列表总共有 n 个元素。如果我们假设单次查找可以在一个时间单位内完成，那么至多只需要 logn + 1 单位的时间就可以得到结果。这样的分析在有些场合非常重要。</li>\n<li>算法分析在实际工作中是非常重要的，因为使用低效率的算法会显著降低系统性能。在对运行时间要求极高的场合，耗时太长的算法得到的结果可能是过期或者无用的。低效率算法也会大量消耗计算资源。<h4 id=\"渐进最优\"><a href=\"#渐进最优\" class=\"headerlink\" title=\"渐进最优\"></a>渐进最优</h4></li>\n<li>在计算机科学中，<a href=\"https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%9B%E6%9C%80%E4%BC%98\">渐进最优</a>一词用以评价算法的效率。如果已经证实一个问题需要使用Ω(f(n))的资源来解决，而某个算法用O(f(n))的资源来解决这个问题，则该算法就是渐进最优的。</li>\n<li>渐进最优的例子包括数据结构动态数组，能够在常数时间内索引，但性能在多数机器上不如普通数组的索引。另外，在所有基于比较的排序算法中，归并排序和堆排序是渐进最优的。</li>\n</ul>\n<h3 id=\"三个标记法\"><a href=\"#三个标记法\" class=\"headerlink\" title=\"三个标记法\"></a>三个标记法</h3><ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span></span></span></span>标记法<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7\">大O符号</a>（上界）表示函数在增长到一定程度时总小于一个特定函数的常数倍。</li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Ω</span></span></span></span>标记法<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%A9%E7%AC%A6%E5%8F%B7\">大Ω符号</a>表示总大于函数在增长到一定程度时总大于一个特定函数的常数倍。</li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Θ</mi></mrow><annotation encoding=\"application/x-tex\">\\Theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Θ</span></span></span></span>标记法<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%98%E7%AC%A6%E5%8F%B7\">大Θ符号</a>表示函数在某个区间上的渐近关系。如果两个函数在某个区间上的上界和下界都分别为另一个函数，那么这两个函数在该区间上是渐近相等的，可以用大Θ符号表示为：f(n) = Θ(g(n))</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"时空权衡原则\"><a href=\"#时空权衡原则\" class=\"headerlink\" title=\"时空权衡原则\"></a>时空权衡原则</h3><ul>\n<li>计算机科学中的 <a href=\"https://zh.wikipedia.org/wiki/%E6%97%B6%E7%A9%BA%E6%9D%83%E8%A1%A1\">时空权衡</a>（英语：space–time trade off，又叫<strong>空间换时间</strong>）是指一个算法或程序用增加空间使用量来换取时间减少的情况。这里，空间指的是执行一个给定任务所消耗的数据存储（内存、硬盘等），而时间指的是执行一个给定任务所消耗的时间（计算时间或反应时间）。</li>\n<li>一个给定的时空权衡的效用受到相关的固定和可变成本（如CPU速度、存储空间）的影响，并受到<u>收益递减的</u>影响。</li>\n</ul>\n<h2 id=\"三、线性表\"><a href=\"#三、线性表\" class=\"headerlink\" title=\"三、线性表\"></a>三、线性表</h2><h3 id=\"线性表的定义\"><a href=\"#线性表的定义\" class=\"headerlink\" title=\"线性表的定义\"></a>线性表的定义</h3><h3 id=\"线性表的逻辑结构\"><a href=\"#线性表的逻辑结构\" class=\"headerlink\" title=\"线性表的逻辑结构\"></a>线性表的逻辑结构</h3><h3 id=\"线性表的基本操作\"><a href=\"#线性表的基本操作\" class=\"headerlink\" title=\"线性表的基本操作\"></a>线性表的基本操作</h3><h3 id=\"顺序表的定义\"><a href=\"#顺序表的定义\" class=\"headerlink\" title=\"顺序表的定义\"></a>顺序表的定义</h3><h3 id=\"顺序表的特点\"><a href=\"#顺序表的特点\" class=\"headerlink\" title=\"顺序表的特点\"></a>顺序表的特点</h3><h3 id=\"链式表的定义\"><a href=\"#链式表的定义\" class=\"headerlink\" title=\"链式表的定义\"></a>链式表的定义</h3><h3 id=\"链式表的特点\"><a href=\"#链式表的特点\" class=\"headerlink\" title=\"链式表的特点\"></a>链式表的特点</h3><h3 id=\"用顺序存储结构对线性表基本操作的实现\"><a href=\"#用顺序存储结构对线性表基本操作的实现\" class=\"headerlink\" title=\"用顺序存储结构对线性表基本操作的实现\"></a>用顺序存储结构对线性表基本操作的实现</h3><h3 id=\"用链式存储结构对线性表基本操作的实现\"><a href=\"#用链式存储结构对线性表基本操作的实现\" class=\"headerlink\" title=\"用链式存储结构对线性表基本操作的实现\"></a>用链式存储结构对线性表基本操作的实现</h3><h3 id=\"链式存储结构的实现技术（比如）\"><a href=\"#链式存储结构的实现技术（比如）\" class=\"headerlink\" title=\"链式存储结构的实现技术（比如）\"></a>链式存储结构的实现技术（比如）</h3><h4 id=\"单向链表\"><a href=\"#单向链表\" class=\"headerlink\" title=\"单向链表\"></a>单向链表</h4><h4 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h4><h4 id=\"单循环链表\"><a href=\"#单循环链表\" class=\"headerlink\" title=\"单循环链表\"></a>单循环链表</h4><h4 id=\"双向循环链表\"><a href=\"#双向循环链表\" class=\"headerlink\" title=\"双向循环链表\"></a>双向循环链表</h4><h4 id=\"带头结点的链表\"><a href=\"#带头结点的链表\" class=\"headerlink\" title=\"带头结点的链表\"></a>带头结点的链表</h4><h3 id=\"线性表的应用\"><a href=\"#线性表的应用\" class=\"headerlink\" title=\"线性表的应用\"></a>线性表的应用</h3><h3 id=\"具有在实际中选取不同存储结构的判断能力\"><a href=\"#具有在实际中选取不同存储结构的判断能力\" class=\"headerlink\" title=\"具有在实际中选取不同存储结构的判断能力\"></a>具有在实际中选取不同存储结构的判断能力</h3><h2 id=\"四、栈和队列\"><a href=\"#四、栈和队列\" class=\"headerlink\" title=\"四、栈和队列\"></a>四、栈和队列</h2><h3 id=\"栈的定义\"><a href=\"#栈的定义\" class=\"headerlink\" title=\"栈的定义\"></a>栈的定义</h3><h3 id=\"栈的逻辑结构\"><a href=\"#栈的逻辑结构\" class=\"headerlink\" title=\"栈的逻辑结构\"></a>栈的逻辑结构</h3><h3 id=\"栈的基本操作\"><a href=\"#栈的基本操作\" class=\"headerlink\" title=\"栈的基本操作\"></a>栈的基本操作</h3><h3 id=\"顺序栈的定义\"><a href=\"#顺序栈的定义\" class=\"headerlink\" title=\"顺序栈的定义\"></a>顺序栈的定义</h3><h3 id=\"顺序栈的特点\"><a href=\"#顺序栈的特点\" class=\"headerlink\" title=\"顺序栈的特点\"></a>顺序栈的特点</h3><h3 id=\"链式栈的定义\"><a href=\"#链式栈的定义\" class=\"headerlink\" title=\"链式栈的定义\"></a>链式栈的定义</h3><h3 id=\"链式栈的特点\"><a href=\"#链式栈的特点\" class=\"headerlink\" title=\"链式栈的特点\"></a>链式栈的特点</h3><h3 id=\"队列的定义\"><a href=\"#队列的定义\" class=\"headerlink\" title=\"队列的定义\"></a>队列的定义</h3><h3 id=\"队列的逻辑结构\"><a href=\"#队列的逻辑结构\" class=\"headerlink\" title=\"队列的逻辑结构\"></a>队列的逻辑结构</h3><h3 id=\"队列的基本操作\"><a href=\"#队列的基本操作\" class=\"headerlink\" title=\"队列的基本操作\"></a>队列的基本操作</h3><h3 id=\"顺序队列的定义\"><a href=\"#顺序队列的定义\" class=\"headerlink\" title=\"顺序队列的定义\"></a>顺序队列的定义</h3><h3 id=\"顺序队列的特点\"><a href=\"#顺序队列的特点\" class=\"headerlink\" title=\"顺序队列的特点\"></a>顺序队列的特点</h3><h3 id=\"链式队列的定义\"><a href=\"#链式队列的定义\" class=\"headerlink\" title=\"链式队列的定义\"></a>链式队列的定义</h3><h3 id=\"链式队列的特点\"><a href=\"#链式队列的特点\" class=\"headerlink\" title=\"链式队列的特点\"></a>链式队列的特点</h3><h3 id=\"用顺序存储结构对栈和队列基本操作的实现\"><a href=\"#用顺序存储结构对栈和队列基本操作的实现\" class=\"headerlink\" title=\"用顺序存储结构对栈和队列基本操作的实现\"></a>用顺序存储结构对栈和队列基本操作的实现</h3><h3 id=\"用链式存储结构对栈和队列基本操作的实现\"><a href=\"#用链式存储结构对栈和队列基本操作的实现\" class=\"headerlink\" title=\"用链式存储结构对栈和队列基本操作的实现\"></a>用链式存储结构对栈和队列基本操作的实现</h3><h3 id=\"顺序存储结构中实现循环队列的具体要求\"><a href=\"#顺序存储结构中实现循环队列的具体要求\" class=\"headerlink\" title=\"顺序存储结构中实现循环队列的具体要求\"></a>顺序存储结构中实现循环队列的具体要求</h3><h3 id=\"理解递归调用和栈之间的关系\"><a href=\"#理解递归调用和栈之间的关系\" class=\"headerlink\" title=\"理解递归调用和栈之间的关系\"></a>理解递归调用和栈之间的关系</h3><h3 id=\"掌握栈和队列的经典应用\"><a href=\"#掌握栈和队列的经典应用\" class=\"headerlink\" title=\"掌握栈和队列的经典应用\"></a>掌握栈和队列的经典应用</h3><h2 id=\"五、二叉树、树和森林\"><a href=\"#五、二叉树、树和森林\" class=\"headerlink\" title=\"五、二叉树、树和森林\"></a>五、二叉树、树和森林</h2><h3 id=\"二叉树、树、森林的定义以及它们之间的异同点\"><a href=\"#二叉树、树、森林的定义以及它们之间的异同点\" class=\"headerlink\" title=\"二叉树、树、森林的定义以及它们之间的异同点\"></a>二叉树、树、森林的定义以及它们之间的异同点</h3><h3 id=\"二叉树的实现（包括）\"><a href=\"#二叉树的实现（包括）\" class=\"headerlink\" title=\"二叉树的实现（包括）\"></a>二叉树的实现（包括）</h3><blockquote>\n<p>理解二叉树采用顺序存储结构和链式存储结构的差异性</p>\n<h4 id=\"顺序存储结构\"><a href=\"#顺序存储结构\" class=\"headerlink\" title=\"顺序存储结构\"></a>顺序存储结构</h4></blockquote>\n<h4 id=\"链式存储结构\"><a href=\"#链式存储结构\" class=\"headerlink\" title=\"链式存储结构\"></a>链式存储结构</h4><h3 id=\"二叉树的遍历（四种）\"><a href=\"#二叉树的遍历（四种）\" class=\"headerlink\" title=\"二叉树的遍历（四种）\"></a>二叉树的遍历（四种）</h3><blockquote>\n<p>掌握二叉树的四种遍历，并具有能够依赖遍历完成对二叉树进行操作的能力</p>\n</blockquote>\n<h3 id=\"二叉树结构下的应用及扩展（例如）\"><a href=\"#二叉树结构下的应用及扩展（例如）\" class=\"headerlink\" title=\"二叉树结构下的应用及扩展（例如）\"></a>二叉树结构下的应用及扩展（例如）</h3><blockquote>\n<p>掌握利用二叉树及其扩展下的检索技术；掌握Huffman编码、堆的<strong>实现及应用</strong></p>\n<h4 id=\"二叉检索树\"><a href=\"#二叉检索树\" class=\"headerlink\" title=\"二叉检索树\"></a>二叉检索树</h4></blockquote>\n<h4 id=\"2-3-4树\"><a href=\"#2-3-4树\" class=\"headerlink\" title=\"2-3-4树\"></a>2-3-4树</h4><h4 id=\"B树\"><a href=\"#B树\" class=\"headerlink\" title=\"B树\"></a>B树</h4><h4 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h4><h4 id=\"Huffman编码\"><a href=\"#Huffman编码\" class=\"headerlink\" title=\"Huffman编码\"></a>Huffman编码</h4><h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><h3 id=\"平衡二叉树的定义\"><a href=\"#平衡二叉树的定义\" class=\"headerlink\" title=\"平衡二叉树的定义\"></a>平衡二叉树的定义</h3><h3 id=\"平衡因子的定义\"><a href=\"#平衡因子的定义\" class=\"headerlink\" title=\"平衡因子的定义\"></a>平衡因子的定义</h3><h3 id=\"平衡二叉树的旋转操作\"><a href=\"#平衡二叉树的旋转操作\" class=\"headerlink\" title=\"平衡二叉树的旋转操作\"></a>平衡二叉树的旋转操作</h3><h3 id=\"树和森林的存储结构\"><a href=\"#树和森林的存储结构\" class=\"headerlink\" title=\"树和森林的存储结构\"></a>树和森林的存储结构</h3><blockquote>\n<p>掌握树、森林能够采用的各种存储方式的差异性</p>\n</blockquote>\n<h3 id=\"树和森林的遍历\"><a href=\"#树和森林的遍历\" class=\"headerlink\" title=\"树和森林的遍历\"></a>树和森林的遍历</h3><blockquote>\n<p>掌握树、森林在遍历方面和二叉树的不同以及相关性</p>\n</blockquote>\n<h3 id=\"森林与二叉树的转换\"><a href=\"#森林与二叉树的转换\" class=\"headerlink\" title=\"森林与二叉树的转换\"></a>森林与二叉树的转换</h3><h3 id=\"森林结构的应用（例如）\"><a href=\"#森林结构的应用（例如）\" class=\"headerlink\" title=\"森林结构的应用（例如）\"></a>森林结构的应用（例如）</h3><h4 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h4><blockquote>\n<p>理解并查集的意义，以及掌握并查集的基本操作的实现</p>\n</blockquote>\n<h2 id=\"六、图\"><a href=\"#六、图\" class=\"headerlink\" title=\"六、图\"></a>六、图</h2><h3 id=\"图的定义（包括）\"><a href=\"#图的定义（包括）\" class=\"headerlink\" title=\"图的定义（包括）\"></a>图的定义（包括）</h3><h4 id=\"完全图\"><a href=\"#完全图\" class=\"headerlink\" title=\"完全图\"></a>完全图</h4><h4 id=\"连通图\"><a href=\"#连通图\" class=\"headerlink\" title=\"连通图\"></a>连通图</h4><h4 id=\"简单路径\"><a href=\"#简单路径\" class=\"headerlink\" title=\"简单路径\"></a>简单路径</h4><h4 id=\"有向图\"><a href=\"#有向图\" class=\"headerlink\" title=\"有向图\"></a>有向图</h4><h4 id=\"无向图\"><a href=\"#无向图\" class=\"headerlink\" title=\"无向图\"></a>无向图</h4><h4 id=\"无环图\"><a href=\"#无环图\" class=\"headerlink\" title=\"无环图\"></a>无环图</h4><h4 id=\"等\"><a href=\"#等\" class=\"headerlink\" title=\"等\"></a>等</h4><h3 id=\"图和二叉树、树和森林这种结构之间的异同点（明确理解）\"><a href=\"#图和二叉树、树和森林这种结构之间的异同点（明确理解）\" class=\"headerlink\" title=\"图和二叉树、树和森林这种结构之间的异同点（明确理解）\"></a>图和二叉树、树和森林这种结构之间的异同点（明确理解）</h3><h3 id=\"图的存储（包括）\"><a href=\"#图的存储（包括）\" class=\"headerlink\" title=\"图的存储（包括）\"></a>图的存储（包括）</h3><h4 id=\"邻接矩阵\"><a href=\"#邻接矩阵\" class=\"headerlink\" title=\"邻接矩阵\"></a>邻接矩阵</h4><h4 id=\"邻接表\"><a href=\"#邻接表\" class=\"headerlink\" title=\"邻接表\"></a>邻接表</h4><h4 id=\"差异性\"><a href=\"#差异性\" class=\"headerlink\" title=\"差异性\"></a>差异性</h4><h3 id=\"图的基本操作\"><a href=\"#图的基本操作\" class=\"headerlink\" title=\"图的基本操作\"></a>图的基本操作</h3><h3 id=\"图的两种遍历\"><a href=\"#图的两种遍历\" class=\"headerlink\" title=\"图的两种遍历\"></a>图的两种遍历</h3><h4 id=\"广度优先遍历\"><a href=\"#广度优先遍历\" class=\"headerlink\" title=\"广度优先遍历\"></a>广度优先遍历</h4><h4 id=\"深度优先遍历\"><a href=\"#深度优先遍历\" class=\"headerlink\" title=\"深度优先遍历\"></a>深度优先遍历</h4><h3 id=\"图的基本应用（包括）\"><a href=\"#图的基本应用（包括）\" class=\"headerlink\" title=\"图的基本应用（包括）\"></a>图的基本应用（包括）</h3><h4 id=\"最小支撑树\"><a href=\"#最小支撑树\" class=\"headerlink\" title=\"最小支撑树\"></a>最小支撑树</h4><ul>\n<li><p><strong>Prim算法</strong></p>\n</li>\n<li><p><strong>Kruskal算法</strong></p>\n</li>\n</ul>\n<h4 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h4><ul>\n<li><p><strong>Dijkstra算法</strong></p>\n</li>\n<li><p><strong>BellmanFord算法</strong></p>\n</li>\n<li><p><strong>Floyd算法</strong></p>\n</li>\n</ul>\n<h4 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h4><h4 id=\"关键路径\"><a href=\"#关键路径\" class=\"headerlink\" title=\"关键路径\"></a>关键路径</h4><h2 id=\"七、查找\"><a href=\"#七、查找\" class=\"headerlink\" title=\"七、查找\"></a>七、查找</h2><blockquote>\n<p>查找的定义和与查找有关的算法：顺序查找法、折半查找法、散列（Hash）技术。</p>\n</blockquote>\n<h3 id=\"理解查找的定义\"><a href=\"#理解查找的定义\" class=\"headerlink\" title=\"理解查找的定义\"></a>理解查找的定义</h3><ol>\n<li>查找。在数据集合中寻找满足某种条件的数据元素的过程称为<strong>查找</strong>。</li>\n<li>在数据集合中找了满足条件的数据元素为<strong>查找成功</strong>，否则为<strong>查找失败</strong>。</li>\n<li>用于查找的数据集合为<strong>查找表</strong>，它是由同一类型的数据元素（或记录）组成的。对查找表的<strong>常见操作</strong>有：① 查询符合条件的数据元素；② 插入、删除数据元素。</li>\n<li>静态查找表。若一个查找表的操作只涉及查找操作，则无须动态地修改查找表，此类查找表称为<strong>静态查找表</strong>。与此对应，需要动态地插入或删除的查找表称为<strong>动态查找表</strong>。适合静态查找表的<strong>查找方法</strong>有顺序查找、折半查找、散列查找等；适合动态查找表的<strong>查找方法</strong>有二叉排序树的查找、散列查找等。</li>\n<li>关键字。数据元素中的唯一标识该元素的某个数据项的值，使用基于关键字的查找，查找结果应该是唯一的。例如，在有一个学生元素构成的数据集合中，学生元素中“学号”这一数据项的值唯一地标识一名学生。</li>\n<li>平均查找长度。在查找过程中，一次查找的长度是指需要比较的关键字次数，而平均查找长度则是所有查找过程中进行关键字的比较次数的平均值，其数学定义为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>P</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">ASL=\\sum\\limits_{i=1}^{n}P_i C_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3291em;vertical-align:-0.9777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. 式中，n是查找表的长度（因为每一个元素都要查找，所有都得考虑进去），Pi是查找第i个数据元素的概率，<strong>一般认为每个数据元素的查找概率相等</strong>，即Pi=1/n；Ci是找到第i个数据元素所需进行的<strong>比较次数</strong>。平均查找长度是<strong>衡量算法效率</strong>的<strong>最主要</strong>指标。</li>\n<li><strong>有序线性表</strong>的<strong>顺序查找</strong>中的线性表可以是<strong>链式存储结构</strong>，而<strong>折半查找</strong>中的线性表只能是顺序存储结构。</li>\n</ol>\n<h3 id=\"衡量查找算法的一些指标：三个查找长度\"><a href=\"#衡量查找算法的一些指标：三个查找长度\" class=\"headerlink\" title=\"衡量查找算法的一些指标：三个查找长度\"></a>衡量查找算法的一些指标：三个查找长度</h3><h4 id=\"顺序查找法\"><a href=\"#顺序查找法\" class=\"headerlink\" title=\"顺序查找法\"></a>顺序查找法</h4><ul>\n<li><strong>一般无序线性表</strong><blockquote>\n<p>从后往前找，a[0]=x作为哨兵，若查找不成功，说明是从n比较到0都没找到，即比较了n+1次。</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>平均查找长度（成功不成功都计入，每个概率为1/2n）<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>n</mi></mrow></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>3</mn><mn>4</mn></mfrac><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ASL=\\frac{1}{2n}\\sum\\limits_{i=1}^{n}(n-1+1)+\\frac{1}{2}(n+1)=\\frac{3}{4}(n+1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3291em;vertical-align:-0.9777em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>成功查找的（平均）查找长度  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mo>∑</mo><msup><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msup><msub><mi>P</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mo>∑</mo><msup><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msup><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">ASL=\\sum\\limits{i=1}^{n}P_i C_i=\\frac{1}{n}\\sum\\limits{i=1}^{n}(n-i+1)=\\frac{n+1}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7138em;\"><span style=\"top:-3.1124em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7138em;\"><span style=\"top:-3.1124em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n<li>不成功查找的（平均）查找长度  ASL=n+1</li>\n</ol>\n<ul>\n<li><strong>有序线性表</strong></li>\n</ul>\n<ol>\n<li>平均查找长度</li>\n<li>成功查找的（平均）查找长度<br>有序的结果和一般线性表的顺序查找一样，<strong>但是！！！要注意！！！这里的查找顺序若是从前往后，就不是和上面一样的结果！！！</strong></li>\n<li>不成功查找的（平均）查找长度<blockquote>\n<p>表L是按关键字从小到大排列的，查找的顺序是从前往后。假设有n个结点（这些是查找成功的结点），虚构n+1个查找失败结点。Pi为1/(n+1)，1,2,…,n,n为查找失败时的比较次数。</p>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo>+</mo><mi>n</mi></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo>=</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>+</mo><mfrac><mi>n</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">ASL=\\frac{1+2+\\cdots+n+n}{n+1}=\\frac{n}{2}+\\frac{n}{n+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2484em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">2</span><span class=\"mbin mtight\">+</span><span class=\"minner mtight\">⋯</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0987em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"折半查找法（二分查找）\"><a href=\"#折半查找法（二分查找）\" class=\"headerlink\" title=\"折半查找法（二分查找）\"></a>折半查找法（二分查找）</h4><ol>\n<li>平均查找长度</li>\n<li>成功查找的（平均）查找长度<blockquote>\n<p>等概率，Pi为1/n。树上的每个结点都要考虑进去，每个结点的比较次数为它的层数。第一层次数为1（层高），有2^0（2^(j-1)）个结点要计算；第二层次数为2（层高），有2^1（2^(j-1)）个结点要计算……直到最后一层，这里不一定是满二叉树，但就按照满二叉树近似计算了。</p>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mo stretchy=\"false\">(</mo><mn>1</mn><mo>×</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>×</mo><mn>2</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>h</mi><mo>×</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mi>n</mi></mfrac><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn><mo>≈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">ASL=\\frac{1}{n}(1×1+2×2+\\cdots+h×2^{h-1})=\\frac{n+1}{n}log_2(n+1)-1≈log_2(n+1)-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>\n<p>这里记一下最终结果！（因为不知道咋算出来的）<br>另外，h为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo></mrow><annotation encoding=\"application/x-tex\">\\lceil log_2(n+1) \\rceil</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)⌉</span></span></span></span>.</p>\n</blockquote>\n</li>\n<li>不成功查找的（平均）查找长度<blockquote>\n<p>虚构出方形结点，挂到圆形结点的下方。如果查找失败，即为方形结点，但是次数是上面那个圆形结点的层数。比如二叉树第3层下面总共挂了4个方形结点，第4层挂了8个方形节点：<br>ASL=(3×4+4×8)/12=11/3</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"散列（Hash）查找法\"><a href=\"#散列（Hash）查找法\" class=\"headerlink\" title=\"散列（Hash）查找法\"></a>散列（Hash）查找法</h4><ol>\n<li>平均查找长度</li>\n<li>成功查找的（平均）查找长度</li>\n<li>不成功查找的（平均）查找长度</li>\n</ol>\n<h3 id=\"掌握顺序查找法和折半查找法，并理解二者之间的异同点\"><a href=\"#掌握顺序查找法和折半查找法，并理解二者之间的异同点\" class=\"headerlink\" title=\"掌握顺序查找法和折半查找法，并理解二者之间的异同点\"></a>掌握顺序查找法和折半查找法，并理解二者之间的异同点</h3><h3 id=\"掌握散列技术（包括）\"><a href=\"#掌握散列技术（包括）\" class=\"headerlink\" title=\"掌握散列技术（包括）\"></a>掌握散列技术（包括）</h3><h4 id=\"散列函数\"><a href=\"#散列函数\" class=\"headerlink\" title=\"散列函数\"></a>散列函数</h4><h4 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h4><h4 id=\"散列冲突的发生及其解决方法\"><a href=\"#散列冲突的发生及其解决方法\" class=\"headerlink\" title=\"散列冲突的发生及其解决方法\"></a>散列冲突的发生及其解决方法</h4><h4 id=\"负载因子\"><a href=\"#负载因子\" class=\"headerlink\" title=\"负载因子\"></a>负载因子</h4><h3 id=\"理解不同查找技术的优缺点\"><a href=\"#理解不同查找技术的优缺点\" class=\"headerlink\" title=\"理解不同查找技术的优缺点\"></a>理解不同查找技术的优缺点</h3><h2 id=\"八、排序\"><a href=\"#八、排序\" class=\"headerlink\" title=\"八、排序\"></a>八、排序</h2><h3 id=\"排序的定义（包括）\"><a href=\"#排序的定义（包括）\" class=\"headerlink\" title=\"排序的定义（包括）\"></a>排序的定义（包括）</h3><h4 id=\"内排序\"><a href=\"#内排序\" class=\"headerlink\" title=\"内排序\"></a>内排序</h4><h4 id=\"外排序\"><a href=\"#外排序\" class=\"headerlink\" title=\"外排序\"></a>外排序</h4><h4 id=\"内排序和外排序的区别\"><a href=\"#内排序和外排序的区别\" class=\"headerlink\" title=\"内排序和外排序的区别\"></a>内排序和外排序的区别</h4><h4 id=\"排序的稳定性\"><a href=\"#排序的稳定性\" class=\"headerlink\" title=\"排序的稳定性\"></a>排序的稳定性</h4><h3 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h3><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><h3 id=\"简单选择排序\"><a href=\"#简单选择排序\" class=\"headerlink\" title=\"简单选择排序\"></a>简单选择排序</h3><h3 id=\"Shell排序\"><a href=\"#Shell排序\" class=\"headerlink\" title=\"Shell排序\"></a>Shell排序</h3><h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><h3 id=\"时空复杂度和稳定性\"><a href=\"#时空复杂度和稳定性\" class=\"headerlink\" title=\"时空复杂度和稳定性\"></a>时空复杂度和稳定性</h3><blockquote>\n<p>对直接插入排序、冒泡排序、简单选择排序、Shell排序、快速排序、堆排序、归并排序、基数排序这些算法，掌握其在时间复杂度、空间复杂度以及是否稳定等方面的特点</p>\n</blockquote>\n<h3 id=\"K路归并排序\"><a href=\"#K路归并排序\" class=\"headerlink\" title=\"K路归并排序\"></a>K路归并排序</h3><h4 id=\"k路归并排序的外排序算法\"><a href=\"#k路归并排序的外排序算法\" class=\"headerlink\" title=\"k路归并排序的外排序算法\"></a>k路归并排序的外排序算法</h4><h3 id=\"选择合适排序算法\"><a href=\"#选择合适排序算法\" class=\"headerlink\" title=\"选择合适排序算法\"></a>选择合适排序算法</h3><blockquote>\n<p>具有在不同的应用需求下，能够依据各种排序算法的特点选择合适排序算法的能力</p>\n</blockquote>\n<h2 id=\"九、矩阵和串\"><a href=\"#九、矩阵和串\" class=\"headerlink\" title=\"九、矩阵和串\"></a>九、矩阵和串</h2><h3 id=\"矩阵和串的定义\"><a href=\"#矩阵和串的定义\" class=\"headerlink\" title=\"矩阵和串的定义\"></a>矩阵和串的定义</h3><h3 id=\"特殊矩阵的压缩存储\"><a href=\"#特殊矩阵的压缩存储\" class=\"headerlink\" title=\"特殊矩阵的压缩存储\"></a>特殊矩阵的压缩存储</h3><h3 id=\"稀疏矩阵的三元组表示法以及相应的操作\"><a href=\"#稀疏矩阵的三元组表示法以及相应的操作\" class=\"headerlink\" title=\"稀疏矩阵的三元组表示法以及相应的操作\"></a>稀疏矩阵的三元组表示法以及相应的操作</h3><h3 id=\"多维数组和一维数组的映射\"><a href=\"#多维数组和一维数组的映射\" class=\"headerlink\" title=\"多维数组和一维数组的映射\"></a>多维数组和一维数组的映射</h3><h3 id=\"串的模式匹配\"><a href=\"#串的模式匹配\" class=\"headerlink\" title=\"串的模式匹配\"></a>串的模式匹配</h3><h4 id=\"Brute-Force\"><a href=\"#Brute-Force\" class=\"headerlink\" title=\"Brute-Force\"></a>Brute-Force</h4><h4 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h4>","categories":[],"tags":[]}