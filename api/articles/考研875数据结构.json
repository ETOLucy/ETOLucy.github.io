{"title":"考研875数据结构","slug":"考研875数据结构","date":"2024-10-12T13:34:19.000Z","updated":"2024-11-05T10:36:00.973Z","comments":true,"path":"api/articles/考研875数据结构.json","excerpt":null,"covers":["/articles/9eb01842/GL_1.png","/articles/9eb01842/GL_11.png","/articles/9eb01842/GL_2.png","/articles/9eb01842/GL_22.png","/articles/9eb01842/GL_3.png","/articles/9eb01842/满二叉树.jpg","/articles/9eb01842/完全二叉树.jpg"],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h2><blockquote>\n<p>建议另外过一遍 <a href=\"../../articles/fc6ebebe.html\">严蔚敏课笔记</a><br>注意：代码缩进本该为4个空格，这里为了美观和方便，缩进是2个空格。</p>\n</blockquote>\n<h4 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h4><ul>\n<li>数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。数据是计算机程序加工的原料。</li>\n</ul>\n<h4 id=\"数据元素\"><a href=\"#数据元素\" class=\"headerlink\" title=\"数据元素\"></a>数据元素</h4><ul>\n<li>数据元素是数据的<strong>基本单位</strong>，通常作为一个整体进行考虑和处理。</li>\n</ul>\n<h4 id=\"数据项\"><a href=\"#数据项\" class=\"headerlink\" title=\"数据项\"></a>数据项</h4><ul>\n<li>一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分割的<strong>最小单位</strong>。</li>\n<li>例如，学生记录就是一个数据元素，它由学号、姓名、性别等数据项组成。</li>\n</ul>\n<h4 id=\"数据对象\"><a href=\"#数据对象\" class=\"headerlink\" title=\"数据对象\"></a>数据对象</h4><ul>\n<li>数据对象是具有相同性质的数据元素的集合，是数据的一个子集。</li>\n<li>例如，整数数据对象是集合 N&#x3D;{0,±1,±2,…}。</li>\n</ul>\n<h4 id=\"数据、数据元素、数据项之间的关系\"><a href=\"#数据、数据元素、数据项之间的关系\" class=\"headerlink\" title=\"数据、数据元素、数据项之间的关系\"></a>数据、数据元素、数据项之间的关系</h4><ul>\n<li>数据-&gt;数据对象-&gt;数据元素-&gt;数据项</li>\n<li>两张表-&gt;数据；其中一张表-&gt;数据对象；表中每一行（记录）-&gt;数据元素；每条记录的每个属性-&gt;数据项</li>\n</ul>\n<h4 id=\"数据结构的定义\"><a href=\"#数据结构的定义\" class=\"headerlink\" title=\"数据结构的定义\"></a>数据结构的定义</h4><ul>\n<li>数据结构是相互之间存在一种或多种特定<strong>关系</strong>的<strong>数据元素</strong>的集合。在任何问题中，数据元素都不是孤立存在的，它们之间存在某种关系，这种数据元素相互之间的关系称为结构（Structure）。</li>\n</ul>\n<h4 id=\"数据结构的三要素\"><a href=\"#数据结构的三要素\" class=\"headerlink\" title=\"数据结构的三要素\"></a>数据结构的三要素</h4><ul>\n<li>数据结构包括三方面的内容：<strong>逻辑结构</strong>、<strong>存储结构</strong>和<strong>数据的运算</strong>。</li>\n<li>数据的<strong>逻辑结构</strong>和<strong>存储结构</strong>是密不可分的两个方面，一个<strong>算法的设计</strong>取决于所选定的<strong>逻辑结构</strong>，而<strong>算法的实现</strong>依赖于所采用的<strong>存储结构</strong>。</li>\n</ul>\n<h4 id=\"数据的逻辑结构\"><a href=\"#数据的逻辑结构\" class=\"headerlink\" title=\"数据的逻辑结构\"></a>数据的逻辑结构</h4><ul>\n<li>逻辑结构是指数据元素之间的<strong>逻辑关系</strong>，即从逻辑关系上描述数据。它与数据的存储无关，是独立于计算机的。</li>\n<li>数据的逻辑结构分为<strong>线性结构</strong>和<strong>非线性结构</strong>，<strong>线性表</strong>是典型的线性结构，<strong>集合、树和图</strong>是典型的非线性结构。</li>\n</ul>\n<ol>\n<li><strong>集合</strong>。结构中的元素之间除“同属一个集合”外，别无其它关系。</li>\n<li><strong>线性结构</strong>。结构中的数据元素之间只存在一对一的关系。</li>\n<li><strong>树形结构</strong>。结构中的数据元素之间存在一对多的关系。</li>\n<li><strong>图状结构</strong>或<strong>网状结构</strong>。结构中的数据元素之间存在多对多的关系。</li>\n</ol>\n<h4 id=\"数据的物理结构\"><a href=\"#数据的物理结构\" class=\"headerlink\" title=\"数据的物理结构\"></a>数据的物理结构</h4><ul>\n<li><code>存储结构</code>是指数据结构在计算机中的表示（又称<strong>映像</strong>），也称<code>物理结构</code>。它包括<strong>数据元素</strong>的表示和<strong>关系</strong>的表示。数据的存储结构是计算机语言实现的逻辑结构，它依赖于计算机语言。数据的存储结构主要有<strong>顺序存储、链式存储、索引存储和散列存储</strong>。</li>\n</ul>\n<ol>\n<li><strong>顺序存储</strong>。把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。<br>其<strong>优点</strong>是可以实现<u>随机存取</u>，每个元素占用最少的存储空间；<strong>缺点</strong>是只能使用相邻的一整块存储单元，因此可能产生较多的外部碎片。</li>\n<li><strong>链式存储</strong>。不要求逻辑上相邻的元素在物理位置上也相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系。<br>其<strong>优点</strong>是<u>不会出现碎片现象</u>，能充分利用所有存储单元；<strong>缺点</strong>是<u>每个元素因存储指针而占用额外的存储空间</u>，且只能实现顺序存取。</li>\n<li><strong>索引存储</strong>。在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为<strong>索引项</strong>，索引项的一般形式是（关键字，地址）。<br>其<strong>优点</strong>是<u>检索速度快</u>；<strong>缺点</strong>是<u>附加的索引表额外占用存储空间</u>。另外，增加和删除数据时也要修改索引表，因而<u>会花费较多的时间</u>。</li>\n<li><strong>散列存储</strong>。根据元素的关键字直接计算出该元素的存储地址，又称<strong>哈希（Hash）存储</strong>。<br>其<strong>优点</strong>时<u>检索、增加和删除结点的操作都很快</u>；<strong>缺点</strong>是若散列函数不好，则可能出现<u>元素存储单元的冲突</u>，而解决冲突<u>会增加时间和空间开销</u>。</li>\n</ol>\n<h4 id=\"数据的运算的定义\"><a href=\"#数据的运算的定义\" class=\"headerlink\" title=\"数据的运算的定义\"></a>数据的运算的定义</h4><ul>\n<li>（王道）施加在数据上的运算包括运算的<strong>定义</strong>和<strong>实现</strong>。运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，指出运算的具体操作步骤。</li>\n<li>（博客）数据的运算是指对数据实施的操作，数据的运算最终需要在对应的存储结构上用算法实现，所以数据运算分为运算的定义和运算的实现两个层面。<br>运算的定义是对运算功能的描述，是抽象的，是基于逻辑的。<br>运算的实现是程序员完成运算的实现算法，是具体的，是基于存储结构的。</li>\n</ul>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><ul>\n<li>数据类型是一个值的集合和定义在集合上的一组操作的总称。</li>\n</ul>\n<ol>\n<li><strong>原子类型</strong>。其值不可再分的数据类型。</li>\n<li><strong>结构类型</strong>。其值可以再分解为若干成分（分量）的数据类型。</li>\n<li><code>抽象数据类型</code>。一个数学模型及定义在该数学模型上的一组操作。它通常是对数据的某种抽象，定义了数据的取值范围及其结构形式，以及对数据操作的集合。</li>\n</ol>\n<ul>\n<li><code>抽象数据类型</code>的三个组成部分：数据对象、数据关系和基本操作。</li>\n<li>（蓝皮书，定义）<code>抽象数据类型</code>是一种构造数据类型，它具有三大特征，<strong>信息隐蔽、数据封装、使用与实现相分离</strong>。</li>\n</ul>\n<h4 id=\"数据类型、抽象数据类型和数据结构之间的关系\"><a href=\"#数据类型、抽象数据类型和数据结构之间的关系\" class=\"headerlink\" title=\"数据类型、抽象数据类型和数据结构之间的关系\"></a>数据类型、抽象数据类型和数据结构之间的关系</h4><ul>\n<li><strong>数据类型</strong>是一个值的集合和定义在此集合上的一组操作的总称。（值+操作）</li>\n<li><strong>抽象数据类型（ADT）</strong>是一个数学模型及定义在该数学模型上的一组操作。（数学模型+操作）它通常是对数据的某种抽象，定义了数据的取值范围及其结构形式，以及对数据操作的集合。（数据对象+数据关系+基本操作）</li>\n<li><strong>数据结构</strong>是相互之间存在一种或多种特定<strong>关系</strong>的<strong>数据元素</strong>的集合。（数据元素+数据关系）</li>\n</ul>\n<h2 id=\"二、算法和算法分析\"><a href=\"#二、算法和算法分析\" class=\"headerlink\" title=\"二、算法和算法分析\"></a>二、算法和算法分析</h2><h3 id=\"算法的定义\"><a href=\"#算法的定义\" class=\"headerlink\" title=\"算法的定义\"></a>算法的定义</h3><ul>\n<li>算法是对特定问题求解步骤的一种描述，它是指令的有限序列，其中的每一条指令表示一个或多个操作。</li>\n<li>算法和程序的区别：<ol>\n<li>算法是描述一个问题求解的步骤序列，而程序是算法在特定计算机上的实现。</li>\n<li>算法不依赖于计算机，而程序依赖于特定的计算机和特定的编程语言。</li>\n<li>算法必须满足五个特性，即有穷性、确定性、可行性、有输入、有输出，而程序可能不满足有穷性。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"算法的特性（五个）\"><a href=\"#算法的特性（五个）\" class=\"headerlink\" title=\"算法的特性（五个）\"></a>算法的特性（五个）</h3><ol>\n<li><strong>有穷性</strong>。一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。</li>\n<li><strong>确定性</strong>。算法中每条指令必须有确切的含义，对于相同的输入只能得出相同的输出。</li>\n<li><strong>可行性</strong>。算法中描述的操作都可以通过 已经实现的基本运算 执行有限次来实现。</li>\n<li><strong>输入</strong>。一个算法有零个或多个输入，这些输入取自于某个特定的对象的集合。</li>\n<li><strong>输出</strong>。一个算法有一个或多个输出，这些输出是与输入有着某些特定关系的量。</li>\n</ol>\n<h3 id=\"算法设计的要求\"><a href=\"#算法设计的要求\" class=\"headerlink\" title=\"算法设计的要求\"></a>算法设计的要求</h3><ol>\n<li><strong>正确性</strong>。算法应能够正确地解决求解问题。</li>\n</ol>\n<ul>\n<li>首先，算法应当满足以特定的“规格说明”方式给出的需求。</li>\n<li>其次，对算法是否“正确”的理解可以有以下四个层次：<br>  a. 程序中不含语法错误；<br>  b. 程序对于几组输入数据能够得出满足规格说明要求的结果；<br>  c. 程序对于精心选择的典型、苛刻而带有刁难性的几组输入数据能够得出满足规格说明要求的结果；<br>  d. 程序对于一切合法的输入数据都能产生满足规格说明要求的结果。<br>  （通常以第c层意义的正确性作为衡量一个程序是否合格的标准。）</li>\n</ul>\n<ol start=\"2\">\n<li><strong>可读性</strong>。算法应具有良好的可读性，以帮助人们理解。</li>\n</ol>\n<ul>\n<li>算法主要是为了人的阅读与交流，其次才是机器执行。可读性好有助于人对算法的理解；</li>\n<li>另一方面，晦涩难懂的程序易于隐藏较多错误，难以调试和修改。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>健壮性</strong>。算法能对输入的非法数据做出反应或处理，而不会产生莫名其妙的输出。</li>\n</ol>\n<ul>\n<li>当输入数据非法时，算法也能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果。</li>\n<li>并且，处理出错的方法应是返回一个表示错误或错误性质的值，而不是打印错误信息或异常，并中止程序的执行，以便在更高的抽象层次上进行处理。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>效率与低存储量需求</strong>。效率是指算法执行的时间，存储量需求是指算法执行过程中所需要的最大存储空间，这两者都与问题的规模有关。</li>\n</ol>\n<ul>\n<li>（因为：求100个人的平均分与求1000个人的平均分所花的执行时间或运行空间显然有一定的差别。）</li>\n</ul>\n<h3 id=\"算法的时间、空间复杂度的定义及计算\"><a href=\"#算法的时间、空间复杂度的定义及计算\" class=\"headerlink\" title=\"算法的时间、空间复杂度的定义及计算\"></a>算法的时间、空间复杂度的定义及计算</h3><ul>\n<li>（归纳下应该这么说）算法的<strong>时间复杂度</strong>是一个关于问题规模n的函数，表示算法中基本运算的执行次数的数量级，定性地描述该算法的运行时间。</li>\n<li>（归纳下应该这么说）算法的<strong>空间复杂度</strong>是问题规模n的函数，定性地描述该算法或程序运行所需要的存储空间大小。</li>\n<li>（<a href=\"https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">wiki</a>）算法的<strong>时间复杂度</strong>（time complexity）是一个函数，它定性描述该算法的运行时间。时间复杂度常用大O符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，也就是考察输入值大小趋近无穷时的情况。例如，如果一个算法对于任何大小为 n （必须比 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">n_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 大）的输入，它至多需要 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn><msup><mi>n</mi><mn>3</mn></msup><mo>+</mo><mn>3</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">5n^3 + 3n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">5</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span></span></span></span> 的时间运行完毕，那么它的渐近时间复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li>（<a href=\"https://zh.wikipedia.org/wiki/%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">wiki</a>）在计算机科学中，一个算法或程序的<strong>空间复杂度</strong>定性地描述该算法或程序运行所需要的存储空间大小。空间复杂度是相应计算问题的输入值的长度的函数，它表示一个算法完全执行所需要的存储空间大小。</li>\n<li>就像时间复杂度的计算不考虑算法所使用的空间大小一样，空间复杂度也不考虑算法运行需要的时间长短。</li>\n</ul>\n<h3 id=\"衡量算法在资源上的两个方面\"><a href=\"#衡量算法在资源上的两个方面\" class=\"headerlink\" title=\"衡量算法在资源上的两个方面\"></a>衡量算法在资源上的两个方面</h3><ul>\n<li>算法在编写成可执行程序后，运行时需要耗费时间资源和空间(内存)资源 。因此衡量一个算法的好坏，一般是从时间和空间两个维度来衡量的，即<strong>时间复杂度和空间复杂度</strong>。时间复杂度主要衡量一个算法的运行快慢，而空间复杂度主要衡量一个算法运行所需要的<strong>额外内存空间</strong>。根据算法编写出的程序，运行时间更短，运行期间占用的内存更少，该算法的运行效率就更高，算法也就更好。</li>\n<li>度量一个程序的执行时间通常有两种方法：</li>\n</ul>\n<ol>\n<li><p>事后统计的方法 （让算法变成一个程序，在机器上执行并计时）<br>缺点：<br>(1) 必须执行程序<br>(2) 其他因素掩盖算法本质</p>\n</li>\n<li><p>事前分析估算的方法（通常使用的）<br>和算法执行时间相关的因素：<br>(1) 算法选用的策略<br>(2) 问题的规模<br>(3) 编写程序的语言<br>(4) 编译程序产生的机器代码的质量<br>(5) 机器执行指令的速度<br>（后三条和计算机的软件和硬件有关，和设计算法无关，所以设计算法时只考虑前两条）</p>\n</li>\n</ol>\n<ul>\n<li>算法的存储量包括：<br>(1) 输入数据所占空间<br>(2) 程序本身所占空间<br>(3) 辅助变量所占空间<ul>\n<li>若<u><strong>输入数据</strong>所占空间只取决于问题本身，<strong>和算法无关</strong></u>，则只需要分析除输入和程序之外的<strong>辅助变量所占额外空间</strong>。</li>\n<li>若<u><strong>所需额外空间</strong>相对于<strong>输入数据量</strong>来说是<strong>常数</strong></u>，则称此算法为<strong>原地工作</strong>。</li>\n<li>若<u><strong>所需存储量</strong>依赖于<strong>特定的输入</strong></u>，则通常按<strong>最坏情况</strong>考虑。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"算法的渐进性分析方法，会用该方法对算法进行评估\"><a href=\"#算法的渐进性分析方法，会用该方法对算法进行评估\" class=\"headerlink\" title=\"算法的渐进性分析方法，会用该方法对算法进行评估\"></a>算法的渐进性分析方法，会用该方法对算法进行评估</h3><h4 id=\"渐进分析\"><a href=\"#渐进分析\" class=\"headerlink\" title=\"渐进分析\"></a>渐进分析</h4><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%91%E5%88%86%E6%9E%90\">渐进分析（asymptotic analysis、asymptotics）</a>，在数学分析中是一种描述函数在极限附近的行为的方法。有多个科学领域应用此方法。例子如下：<ul>\n<li>在计算机科学中，<a href=\"https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\">算法分析</a>考虑给定算法在输入非常大的数据集时候的性能。</li>\n<li>当实体系统的规模变得非常大的时候，分析它的行为。</li>\n</ul>\n</li>\n<li>最简单的例子如下：考虑一个函数f(n)，我们需要了解当n变得非常大的时候f(n)的性质。<br>  令<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">f(n)=n^2+3n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span></span></span></span>，在n特别大的时候，第二项3n比起第一项<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>要小很多。<br>  于是对于这个函数，有如下断言：“f(n)在n→∞的情况下与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>渐近等价”，记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>∼</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">f(n)∼n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>。</li>\n</ul>\n<h4 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h4><ul>\n<li>在计算机科学中，<a href=\"https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\">算法分析（Analysis of algorithm）</a>是分析执行一个给定算法需要消耗的计算资源数量（例如计算时间，存储器使用等）的过程。算法的效率或复杂度在理论上表示为一个函数。其定义域是输入数据的长度（通常考虑任意大的输入，没有上界），值域通常是执行步骤数量（时间复杂度）或者存储器位置数量（空间复杂度）。算法分析是计算复杂度理论的重要组成部分。</li>\n<li>理论分析常常利用<a href=\"https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%91%E5%88%86%E6%9E%90\">渐近分析</a>估计一个算法的复杂度，并使用<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7\">大O符号</a>、<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%A9%E7%AC%A6%E5%8F%B7\">大Ω符号</a>和<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%98%E7%AC%A6%E5%8F%B7\">大Θ符号</a>作为标记。举例，二分查找所需的执行步骤数量与查找列表的长度之对数成正比，记为O(log n)，简称为“对数时间”。通常使用渐近分析的原因是，同一算法的不同具体实现的效率可能有差别。但是，对于任何给定的算法，所有符合其设计者意图的实现，它们之间的性能差异应当仅仅是一个系数。</li>\n<li>精确分析算法的效率有时也是可行的，但这样的分析通常需要一些与具体实现相关的假设，称为计算模型。计算模型可以用抽象机器来定义，比如图灵机。或者可以假设某些基本操作在单位时间内可完成。</li>\n<li>假设二分查找的目标列表总共有 n 个元素。如果我们假设单次查找可以在一个时间单位内完成，那么至多只需要 logn + 1 单位的时间就可以得到结果。这样的分析在有些场合非常重要。</li>\n<li>算法分析在实际工作中是非常重要的，因为使用低效率的算法会显著降低系统性能。在对运行时间要求极高的场合，耗时太长的算法得到的结果可能是过期或者无用的。低效率算法也会大量消耗计算资源。</li>\n</ul>\n<h4 id=\"渐进最优\"><a href=\"#渐进最优\" class=\"headerlink\" title=\"渐进最优\"></a>渐进最优</h4><ul>\n<li>在计算机科学中，<a href=\"https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%9B%E6%9C%80%E4%BC%98\">渐进最优</a>一词用以评价算法的效率。如果已经证实一个问题需要使用Ω(f(n))的资源来解决，而某个算法用O(f(n))的资源来解决这个问题，则该算法就是渐进最优的。</li>\n<li>渐进最优的例子包括数据结构动态数组，能够在常数时间内索引，但性能在多数机器上不如普通数组的索引。另外，在所有基于比较的排序算法中，归并排序和堆排序是渐进最优的。</li>\n</ul>\n<h3 id=\"三个标记法\"><a href=\"#三个标记法\" class=\"headerlink\" title=\"三个标记法\"></a>三个标记法</h3><ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span></span></span></span>标记法\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7\">大O符号</a>（上界）表示函数在增长到一定程度时总小于一个特定函数的常数倍。</li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Ω</span></span></span></span>标记法\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%A9%E7%AC%A6%E5%8F%B7\">大Ω符号</a>表示函数在增长到一定程度时总大于一个特定函数的常数倍。</li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Θ</mi></mrow><annotation encoding=\"application/x-tex\">\\Theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Θ</span></span></span></span>标记法\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%98%E7%AC%A6%E5%8F%B7\">大Θ符号</a>表示函数在某个区间上的渐近关系。如果两个函数在某个区间上的上界和下界都分别为另一个函数，那么这两个函数在该区间上是渐近相等的，可以用大Θ符号表示为：f(n) &#x3D; Θ(g(n))</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"时空权衡原则\"><a href=\"#时空权衡原则\" class=\"headerlink\" title=\"时空权衡原则\"></a>时空权衡原则</h3><ul>\n<li>计算机科学中的 <a href=\"https://zh.wikipedia.org/wiki/%E6%97%B6%E7%A9%BA%E6%9D%83%E8%A1%A1\">时空权衡</a>（英语：space–time trade off，又叫<strong>空间换时间</strong>）是指一个算法或程序用增加空间使用量来换取时间减少的情况。这里，空间指的是执行一个给定任务所消耗的数据存储（内存、硬盘等），而时间指的是执行一个给定任务所消耗的时间（计算时间或反应时间）。</li>\n<li>一个给定的时空权衡的效用受到相关的固定和可变成本（如CPU速度、存储空间）的影响，并受到<u>收益递减的</u>影响。</li>\n</ul>\n<h2 id=\"三、线性表\"><a href=\"#三、线性表\" class=\"headerlink\" title=\"三、线性表\"></a>三、线性表</h2><h3 id=\"线性表的定义\"><a href=\"#线性表的定义\" class=\"headerlink\" title=\"线性表的定义\"></a>线性表的定义</h3><ul>\n<li>线性表是具有相同数据类型的n个数据元素的有限序列，n为表长，当n&#x3D;0时，该线性表是空表。</li>\n</ul>\n<h3 id=\"线性表的逻辑结构\"><a href=\"#线性表的逻辑结构\" class=\"headerlink\" title=\"线性表的逻辑结构\"></a>线性表的逻辑结构</h3><ul>\n<li>线性表是一种逻辑结构，表示元素之间一对一的相邻关系；顺序表和链表是存储结构。</li>\n<li>线性表的<strong>逻辑特性</strong>：若用L命名线性表，则其一般表示为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L=(a_1,a_2,\\cdots,a_i,a_{i+1},\\cdots,a_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。式中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">a_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是唯一的“第一个”数据元素，又称<strong>表头元素</strong>；<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是唯一的“最后一个”数据元素，又称<strong>表尾元素</strong>。除第一个元素外，每个元素<strong>有且仅有</strong>一个直接前驱。除最后一个元素外，每个元素<strong>有且仅有</strong>一个直接后继（“直接前驱”和“前驱”、“直接后继”和“后继”通常被视为同义词）。这种线性有序的逻辑结构正是线性表名字的又来。</li>\n<li>线性表的<strong>特点</strong>：<ol>\n<li>表中元素的个数有限。</li>\n<li>表中元素具有逻辑上的顺序性，表中元素有其先后次序。</li>\n<li>表中元素都是数据元素，每个元素都是单个元素。</li>\n<li>表中元素的数据类型都相同，这意味着每个元素占有相同大小的存储空间。</li>\n<li>表中元素具有抽象性，即仅讨论元素间的逻辑关系，而不考虑元素究竟表示什么内容。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"线性表的基本操作\"><a href=\"#线性表的基本操作\" class=\"headerlink\" title=\"线性表的基本操作\"></a>线性表的基本操作</h3><ol>\n<li>InitList(&amp;L): 初始化表。构造一个空的线性表。</li>\n<li>Length(L): 求表长。返回线性表L的长度，即L中数据元素的个数。</li>\n<li>LocateElem(L,e): 按值查找操作。在表L中查找具有给定关键字值的元素。</li>\n<li>GetElem(L,i): 按位查找操作。获取表L中第i个位置的元素的值。</li>\n<li>ListInsert(&amp;L,i,e): 插入操作。在表L中的第i个位置上插入指定的元素e。</li>\n<li>ListDelete(&amp;L,i,&amp;e): 删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。</li>\n<li>PrintList(L): 输出操作。按前后顺序输出线性表L的所有元素值。</li>\n<li>Empty(L): 判空操作。若L为空表，则返回true，否则返回false。</li>\n<li>DestroyList(&amp;L): 销毁操作。销毁线性表，并释放线性表L所占用的内存空间。</li>\n</ol>\n<h3 id=\"顺序表的定义\"><a href=\"#顺序表的定义\" class=\"headerlink\" title=\"顺序表的定义\"></a>顺序表的定义</h3><ul>\n<li>线性表的顺序存储又称<strong>顺序表</strong>。它是用一组地址连续的存储单元依次存储线性表中的数据元素，从而使得逻辑上相邻的两个元素在物理位置上也相邻。</li>\n<li>（称i为元素<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>在顺序表中的<strong>位序</strong>。）</li>\n</ul>\n<h3 id=\"顺序表的特点\"><a href=\"#顺序表的特点\" class=\"headerlink\" title=\"顺序表的特点\"></a>顺序表的特点</h3><ul>\n<li>表中元素的<strong>逻辑顺序</strong>与其存储的<strong>物理顺序</strong><u>相同</u>，因此可以随机存取表中的任一元素，它的存储位置可用一个简单、直观的公式表示。</li>\n</ul>\n<h3 id=\"用顺序存储结构对线性表基本操作的实现\"><a href=\"#用顺序存储结构对线性表基本操作的实现\" class=\"headerlink\" title=\"用顺序存储结构对线性表基本操作的实现\"></a>用顺序存储结构对线性表基本操作的实现</h3><div class=\"tip warning faa-parent animated-hover\"><p class=\"faa-horizontal\"> 注意不可以用int替代数据元素的数据类型，因为数据类型未给定，得用ElemType代替。</p></div>\n\n<ul>\n<li><p>线性表的动态分配顺序存储结构</p>\n<blockquote>\n<p>数组指针elem指示线性表的基地址，listsize指示顺序表当前分配的存储空间大小，一旦因插入元素而导致空间不足时，可进行再分配，即为顺序表增加一个大小为存储LISTINCREMENT个数据元素的空间。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LIST_INIT_SIZE 100 <span class=\"comment\">//线性表存储空间的初始分配量</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LISTINCREMENT 10 <span class=\"comment\">//线性表存储空间的分配增量</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  ElemType *elem; <span class=\"comment\">//存储空间基址</span></span><br><span class=\"line\">  <span class=\"type\">int</span> length; <span class=\"comment\">//当前长度</span></span><br><span class=\"line\">  <span class=\"type\">int</span> listsize; <span class=\"comment\">//当前分配的存储容量（以sizeof(Elemtype)为单位）</span></span><br><span class=\"line\">&#125;Sqlist;</span><br></pre></td></tr></table></figure></li>\n<li><p>顺序表的初始化</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">InitList_Sq</span><span class=\"params\">(SqList &amp;L)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//构造一个空的线性表L</span></span><br><span class=\"line\">  L.elem = (ElemType *)<span class=\"built_in\">malloc</span>(LIST_INIT_SIZE * <span class=\"keyword\">sizeof</span>(ElemType));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (! L.elem) <span class=\"built_in\">exit</span>(OVERFLOW); <span class=\"comment\">//存储分配失败</span></span><br><span class=\"line\">  L.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">  L.listsize = LIST_INIT_SIZE; <span class=\"comment\">//初始存储容量</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>插入操作</p>\n<blockquote>\n<p>在第i（1≤i≤n）个元素之前插入一个元素，需将<strong>第n至第i（共n-i+1个）</strong>个元素向后移动一个位置。<br>C语言中数组的下标从“0”开始，因此表中第i个数据元素是L.elem[i-1]。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">ListInsert_Sq</span><span class=\"params\">(SqList &amp;L, <span class=\"type\">int</span> i, ElemType e)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//在顺序线性表L中第i个位置之前插入新的元素e</span></span><br><span class=\"line\">  <span class=\"comment\">//i的合法值为 1≤i≤ListLength_Sq(L)+1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L.length+<span class=\"number\">1</span>) <span class=\"keyword\">return</span> ERROR; <span class=\"comment\">//i值不合法</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (L.length &gt;= L.listsize) &#123; <span class=\"comment\">//当前存储空间已满，增加分配</span></span><br><span class=\"line\">    newbase = (ElemType *)<span class=\"built_in\">realloc</span>(L.elem, (L.listsize+LISTINCREMENT) * <span class=\"keyword\">sizeof</span>(ElemType));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!newbase) <span class=\"built_in\">exit</span>(OVERFLOW); <span class=\"comment\">//存储分配失败</span></span><br><span class=\"line\">    L.elem = newbase;</span><br><span class=\"line\">    L.listsize += LISTINCREMENT; <span class=\"comment\">//增加存储容量</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  q = &amp;(L.elem[i<span class=\"number\">-1</span>]); <span class=\"comment\">//q为插入位置</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (p = &amp;(L.elem[L.length<span class=\"number\">-1</span>]); p &gt;= q; --p)</span><br><span class=\"line\">    *(p+<span class=\"number\">1</span>) = *p; <span class=\"comment\">//插入位置及之后的元素右移</span></span><br><span class=\"line\">  *q = e; <span class=\"comment\">//插入e</span></span><br><span class=\"line\">  ++ L.length; <span class=\"comment\">//表长增1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>删除操作</p>\n<blockquote>\n<p>删除第i（1≤i≤n）个元素时，需将<strong>从第i+1至n（共n-i）</strong>个元素依次向前移动一个位置。<br>C语言中数组的下标从“0”开始，因此表中第i个数据元素是L.elem[i-1]。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">ListDelete_Sq</span><span class=\"params\">(SqList &amp;L, <span class=\"type\">int</span> i, ElemType &amp;e)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//在顺序线性表L中删除第i个元素，并用e返回其值</span></span><br><span class=\"line\">  <span class=\"comment\">//i的合法值为 1≤i≤ListLength_Sq(L)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L.length) <span class=\"keyword\">return</span> ERROR; <span class=\"comment\">//i值不合法</span></span><br><span class=\"line\">  p = &amp;(L.elem[i<span class=\"number\">-1</span>]); <span class=\"comment\">//p为被删除元素的位置</span></span><br><span class=\"line\">  e = *p; <span class=\"comment\">//被删除元素的值赋给e</span></span><br><span class=\"line\">  q = L.elem + L.length - <span class=\"number\">1</span>; <span class=\"comment\">//表尾元素的位置（elem表示线性表的基址）</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (++p; p &lt;= q; ++p)</span><br><span class=\"line\">    *(p<span class=\"number\">-1</span>) = *p; <span class=\"comment\">//被删除元素之后的元素左移</span></span><br><span class=\"line\">  --L.length; <span class=\"comment\">//表长减1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>移动元素次数的期望值</p>\n<blockquote>\n<p>当在顺序存储结构的线性表中某个位置上插入或删除一个数据元素时，其时间主要耗费在移动元素上（换句话说，移动元素的操作为预估算法时间复杂度的基本操作），而移动元素的个数取决于插入或删除元素的位置。</p>\n</blockquote>\n<ul>\n<li>假设等概率，<ul>\n<li>插入（在i前插入）：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mrow><mi>i</mi><mi>s</mi></mrow></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msubsup><msub><mi>p</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msubsup><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">E_{is} = \\sum\\limits_{i=1}^{n+1}p_i(n-i+1) = \\frac{1}{n+1}\\sum\\limits_{i=1}^{n+1}(n-i+1) = \\frac{n}{2} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4788em;vertical-align:-0.9777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5011em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4788em;vertical-align:-0.9777em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5011em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n<li>删除（第i个）：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mrow><mi>d</mi><mi>l</mi></mrow></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>q</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">E_{dl} = \\sum\\limits_{i=1}^{n}q_i(n-i) = \\frac{1}{n}\\sum\\limits_{i=1}^{n}(n-i) = \\frac{n-1}{2} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3291em;vertical-align:-0.9777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3291em;vertical-align:-0.9777em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n</ul>\n</li>\n<li>若表长为n，则算法 ListInsert_Sq 和 ListDelete_Sq 的时间复杂度为 O(n) 。</li>\n<li>“求表长”（ListLength_Sq）和“取第i个数据元素”（GetElem_Sq）的时间复杂度为 O(1) 。</li>\n<li>LocateElem_Sq 的时间复杂度为 O(L.length) ， union_Sq（A&#x3D;A∪B） 的时间复杂度为 O ( La.length × Lb.length ) ， MergeList_Sq（C&#x3D;A∪B） 的时间复杂度为 O ( La.ListLength + Lb.ListLength ) 。</li>\n</ul>\n</li>\n<li><p>按值查找（顺序查找）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">LocateElem_Sq</span><span class=\"params\">(SqList L, ElemType e, Status (*compare)(ElemType, ElemType))</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//在顺序线性表L中查找第1个值与e满足compare()的元素的位序</span></span><br><span class=\"line\">  <span class=\"comment\">//若找到，则返回其在L中的位序，否则返回0</span></span><br><span class=\"line\">  i = <span class=\"number\">1</span>; <span class=\"comment\">//i的初值为第1个元素的位序</span></span><br><span class=\"line\">  p = L.elem; <span class=\"comment\">//p的初值为第1个元素的存储位置</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &lt;= L.length &amp;&amp; !(*compare)(*p ++, e))</span><br><span class=\"line\">    ++i;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i &lt;= L.length)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>线性表的合并（A&#x3D;A∪B）</p>\n<blockquote>\n<p>将存在于线性表LB中，而<strong>不存在于线性表LA中</strong>的数据元素插入到线性表LA中去。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">union</span><span class=\"params\">(List &amp;La, List &amp;Lb)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//将所有在线性表Lb中但不在La中的数据元素插入到La中</span></span><br><span class=\"line\">  La.len = ListLength(La); Lb.len = ListLength(Lb); <span class=\"comment\">//求线性表的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= Lb.len; i++) &#123;</span><br><span class=\"line\">    GetElem(Lb, i, e); <span class=\"comment\">//取Lb中第i个数据元素赋给e</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!LocateElem(La, e, equal)) ListInsert(La, ++ La_len, e); <span class=\"comment\">//La中不存在和e相同的数据元素，则插入之</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>顺序表的合并（C&#x3D;A∪B）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">MergeList_Sq</span><span class=\"params\">(SqList La, SqList Lb, SqList &amp;Lc)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//已知顺序线性表La和Lb的元素按值非递减排列</span></span><br><span class=\"line\">  <span class=\"comment\">//归并La和Lb得到新的顺序线性表Lc，Lc的元素也按值非递减排列</span></span><br><span class=\"line\">  pa = La.elem; pb = Lb.elem;</span><br><span class=\"line\">  Lc.listsize = Lc.length = La.length + Lb.length;</span><br><span class=\"line\">  pc = Lc.elem = (ElemType *)<span class=\"built_in\">malloc</span>(Lc.listsize*<span class=\"keyword\">sizeof</span>(ElemType));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!Lc.elem) <span class=\"built_in\">exit</span>(OVERFLOW); <span class=\"comment\">//存储分配失败</span></span><br><span class=\"line\">  pa_last = La.elem + La.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  pb_last = Lb.elem + Lb.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (pa &lt;= pa_last &amp;&amp; pb &lt;= pb_last) &#123; <span class=\"comment\">//归并</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*pa &lt;= *pb) *pc ++ = *pa ++;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> *pc ++ = *pb ++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (pa &lt;= pa_last) *pc ++ = *pa ++; <span class=\"comment\">//插入La的剩余元素</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (pb &lt;= pb_last) *pc ++ = *pb ++; <span class=\"comment\">//插入Lb的剩余元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"链式表的定义\"><a href=\"#链式表的定义\" class=\"headerlink\" title=\"链式表的定义\"></a>链式表的定义</h3><ul>\n<li>链式表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。</li>\n</ul>\n<h3 id=\"链式表的特点\"><a href=\"#链式表的特点\" class=\"headerlink\" title=\"链式表的特点\"></a>链式表的特点</h3><ul>\n<li>用一组任意（可连续，也可不连续）的存储单元存储数据元素，对于每个数据元素都需要一个<u>存储其本身信息</u>的<strong>数据域</strong>和<u>存储直接后继存储位置</u>的<strong>指针域</strong>。</li>\n</ul>\n<h3 id=\"用链式存储结构对线性表基本操作的实现（见下）\"><a href=\"#用链式存储结构对线性表基本操作的实现（见下）\" class=\"headerlink\" title=\"用链式存储结构对线性表基本操作的实现（见下）\"></a>用链式存储结构对线性表基本操作的实现（见下）</h3><h3 id=\"链式存储结构的实现技术（比如）\"><a href=\"#链式存储结构的实现技术（比如）\" class=\"headerlink\" title=\"链式存储结构的实现技术（比如）\"></a>链式存储结构的实现技术（比如）</h3><h4 id=\"单向链表\"><a href=\"#单向链表\" class=\"headerlink\" title=\"单向链表\"></a>单向链表</h4><ul>\n<li>线性表的链式存储又称单链表。它是通过一组任意的存储单元来存储线性表中的数据元素。</li>\n<li>为了建立数据元素之间的线性关系，对每个链表结点，除存放元素自身的信息之外，还需要存放一个指向其后继的指针。</li>\n<li>结点类型描述：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">  ElemType data;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LNode, *LinkList;</span><br></pre></td></tr></table></figure></li>\n<li>利用单链表可以解决顺序表需要大量连续存储单元的缺点，但附加的指针域，也存在浪费存储空间的缺点。</li>\n<li>由于单链表的元素离散地分布在存储空间中，因此是非随机存取的存储结构，即不能直接找到表中某个特定结点。查找特定结点时，需要从表头开始遍历，依次查找。</li>\n<li>通常用<strong>头指针L（或head等）</strong>来标识一个单链表，<u>指出链表的起始地址</u>，<u>头指针为NULL时表示一个空表</u>。</li>\n<li>此外，为了操作上的方便，在单链表第一个数据结点之前附加一个结点，称为<strong>头结点</strong>。</li>\n<li>头结点的数据域可以不设任何信息，但也可以记录表长等信息。单链表带头结点时，头指针L指向头结点；单链表不带头结点时，头指针指向第一个数据结点。</li>\n<li>表尾结点的指针域为NULL（用“^”表示）。</li>\n<li><strong>头结点和头指针的关系</strong>：不管带不带头结点，头指针都始终指向链表的第一个结点，<u>而头结点是带头结点的链表中的第一个结点</u>，结点内通常不存储信息。</li>\n<li>引入<u>头结点</u>后，可以带来<strong>两个优点</strong>：<ol>\n<li>由于第一个数据结点的位置被存放在头结点的指针域中，因此<strong>在链表的第一个位置上的操作和在表的其他位置上的操作一致</strong>，无须进行特殊处理。</li>\n<li>无论链表是否为空，其头指针都是指向头结点的非空指针（空表中头结点的指针域为空），因此<strong>空表和非空表的处理也就得到了统一</strong>。</li>\n</ol>\n</li>\n<li>初始化（王道）：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//带头结点</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">InitList</span><span class=\"params\">(LinkList &amp;L)</span> &#123;</span><br><span class=\"line\">  L=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">  L-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不带头结点</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">InitList</span><span class=\"params\">(LinkList &amp;L)</span> &#123;</span><br><span class=\"line\">  L=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>求表长（王道）：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Length</span><span class=\"params\">(LinkList L)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> len=<span class=\"number\">0</span>;</span><br><span class=\"line\">  LNode *p=L;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(p-&gt;next!=<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    p=p-&gt;next;</span><br><span class=\"line\">    len++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>按序号查找结点（王道+书）：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//王道</span></span><br><span class=\"line\">LNode *<span class=\"title function_\">GetElem</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">  LNode *p = L;</span><br><span class=\"line\">  <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(p != NUll &amp;&amp; j &lt; i) &#123;</span><br><span class=\"line\">    p = p -&gt; next;</span><br><span class=\"line\">    j ++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//书</span></span><br><span class=\"line\">Status <span class=\"title function_\">GetElem_L</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> i, ElemType &amp;e)</span> &#123;</span><br><span class=\"line\">  p = L -&gt; next; j = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (p &amp;&amp; j &lt; i) &#123;</span><br><span class=\"line\">    p = p -&gt; next; ++ j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!p) <span class=\"keyword\">return</span> ERROR; <span class=\"comment\">//表长小于i，没有第i个元素</span></span><br><span class=\"line\">  e = p -&gt; data;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>按值查找表结点（王道）：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LNode *<span class=\"title function_\">LocateElem</span><span class=\"params\">(LinkList L, ElemType e)</span> &#123;</span><br><span class=\"line\">  LNode *p = L -&gt; next;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span> &amp;&amp; p -&gt; data != e) &#123;</span><br><span class=\"line\">    p = p -&gt; next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>插入结点（王道，书上与王道一致不写了）：<blockquote>\n<p>注意，当链表不带头结点时，需要判断插入位置i是否为1，若是，则要做特殊处理，将头指针L指向新的首结点。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//王道，将值为x的新结点插入到第i个位置</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">ListInsert</span><span class=\"params\">(LinkList &amp;L, <span class=\"type\">int</span> i, ElemType e)</span> &#123;</span><br><span class=\"line\">  LNode *p = L;</span><br><span class=\"line\">  <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span> &amp;&amp; j &lt; i - <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">    p = p -&gt; next;</span><br><span class=\"line\">    j ++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//i值不合法</span></span><br><span class=\"line\">  LNode *s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">  s -&gt; data = e;</span><br><span class=\"line\">  s -&gt; next = p -&gt; next;</span><br><span class=\"line\">  p -&gt; next = s;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>可以将前插操作写成后插操作+data互换<blockquote>\n<p>在单链表插入算法中，通常都采用后插操作。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//需要将*s插入到*p前，用*s插入到*p后+互换data</span></span><br><span class=\"line\">s -&gt; next = p -&gt; next;</span><br><span class=\"line\">p -&gt; next = s;</span><br><span class=\"line\">temp = p -&gt; data;</span><br><span class=\"line\">p -&gt; data = s -&gt; data;</span><br><span class=\"line\">s -&gt; data = temp;</span><br></pre></td></tr></table></figure></li>\n<li>删除结点（王道，书上与王道一致不写了）：<blockquote>\n<p>注意，当链表不带头结点时，需要判断插入位置i是否为1，若是，则要做特殊处理，将头指针L指向新的首结点。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">ListDelete</span><span class=\"params\">(LinkList &amp;L, <span class=\"type\">int</span> i, ElemType &amp;e)</span> &#123;</span><br><span class=\"line\">  LNode *p = L;</span><br><span class=\"line\">  <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span> &amp;&amp; j &lt; i - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    p = p -&gt; next;</span><br><span class=\"line\">    j ++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span> || p -&gt; next == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//i值不合法</span></span><br><span class=\"line\">  LNode *q = p -&gt; next;</span><br><span class=\"line\">  e = q -&gt; data;</span><br><span class=\"line\">  p -&gt; next = q -&gt; next;</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>可以将删除p写成删除p的后继+交换data<blockquote>\n<p>删除结点的通常做法是找到p前驱，然后执行删除操作。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q = p -&gt; next;</span><br><span class=\"line\">p -&gt; data = p -&gt; next -&gt; data;</span><br><span class=\"line\">p -&gt; next = q -&gt; next;</span><br><span class=\"line\"><span class=\"built_in\">free</span>(q);</span><br></pre></td></tr></table></figure></li>\n<li>采用头插法建立单链表（插入头结点之后），可以用来实现链表的逆置。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList &amp;L)</span> &#123;</span><br><span class=\"line\">  LNode *s; <span class=\"type\">int</span> x; <span class=\"comment\">//定义新结点</span></span><br><span class=\"line\">  L = (LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode)); <span class=\"comment\">//创建头结点</span></span><br><span class=\"line\">  L -&gt; next = <span class=\"literal\">NULL</span>; <span class=\"comment\">//初始为空链表</span></span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x); <span class=\"comment\">//输入结点的值</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(x!=<span class=\"number\">9999</span>) &#123; <span class=\"comment\">//输入9999表示结束</span></span><br><span class=\"line\">    s = (LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode)); <span class=\"comment\">//创建新结点</span></span><br><span class=\"line\">    s -&gt; data = x;</span><br><span class=\"line\">    s -&gt; next = L -&gt; next;</span><br><span class=\"line\">    L -&gt; next = s; <span class=\"comment\">//L为头指针</span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>采用尾插法建立单链表。为此必须增加一个尾指针r，使其始终指向当前链表的尾结点。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkList <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList &amp;L)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x;</span><br><span class=\"line\">  L = (LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode)); <span class=\"comment\">//创建头结点</span></span><br><span class=\"line\">  LNode *s, *r = L; <span class=\"comment\">//r为表尾指针</span></span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(x != <span class=\"number\">9999</span>) &#123; <span class=\"comment\">//输入9999表示结束</span></span><br><span class=\"line\">    s = (LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    s -&gt; data = x;</span><br><span class=\"line\">    r -&gt; next = s;</span><br><span class=\"line\">    r = s; <span class=\"comment\">//r指向新的表尾结点</span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  r -&gt; next = <span class=\"literal\">NULL</span>; <span class=\"comment\">//尾结点指针置空</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>归并两个链表（书）<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">MergeList_L</span><span class=\"params\">(LinkList &amp;La, LinkList &amp;Lb, LinkList &amp;Lc)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//已知单链线性表La和Lb的元素按值非递减排列</span></span><br><span class=\"line\">  <span class=\"comment\">//归并La和Lb得到新的单链线性表Lc，Lc的元素也按值非递减排列</span></span><br><span class=\"line\">  pa = La -&gt; next; pb = Lb -&gt; next;</span><br><span class=\"line\">  Lc = pc = La; <span class=\"comment\">//用La的头结点作为Lc的头结点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(pa &amp;&amp; pb) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pa -&gt; data &lt;= pb -&gt; data) &#123;</span><br><span class=\"line\">      pc -&gt; next = pa; pc = pa; pa = pa -&gt; next; <span class=\"comment\">//将pa所指结点链接到pc所指结点之后</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      pc -&gt; next = pb; pc = pb; pb = pb -&gt; next; <span class=\"comment\">//将pb所指结点链接到pc所指结点之后</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pc -&gt; next = pa ? pa : pb; <span class=\"comment\">//插入剩余段（pa存在连pa，否则连pb）</span></span><br><span class=\"line\">  <span class=\"built_in\">free</span>(Lb); <span class=\"comment\">//释放Lb的头结点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"静态链表\"><a href=\"#静态链表\" class=\"headerlink\" title=\"静态链表\"></a>静态链表</h4><ul>\n<li>静态链表是用数组来描述线性表的链式存储结构（其他链表为指针型描述），结点也有数据域data和指针域next。</li>\n<li>与其他链表中的指针不同的是，这里的指针是<u>结点在数组中的相对地址（书：相对位置）（数组下标）</u>，又称<strong>游标</strong>。</li>\n<li>和顺序表一样，<strong>静态链表也要预先分配一块连续的内存空间</strong>。</li>\n<li>静态链表的插入、删除操作与动态链表的相同，只需要修改指针，而不需要移动元素，故仍具有链式存储结构的主要优点。</li>\n<li>这种描述方法便于在不支持指针的高级程序设计语言（如Basic）中使用链表结构。</li>\n<li>数组的一个分量表示一个结点，数组的第零分量可看成头结点，其指针域只是链表的第一个结点。</li>\n<li>线性表的静态单链表存储结构：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 1000 <span class=\"comment\">//链表的最大长度</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  ElemType data;</span><br><span class=\"line\">  <span class=\"type\">int</span> cur;</span><br><span class=\"line\">&#125;component, SLinkList[MAXSIZE];</span><br></pre></td></tr></table></figure></li>\n<li>定位函数（书）<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">LocateElem_SL</span><span class=\"params\">(SLinkList S, ElemType e)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//在静态单链线性表L中查找第1个值为e的元素</span></span><br><span class=\"line\">  <span class=\"comment\">//若找到，则返回它在L中的位序，否则返回0</span></span><br><span class=\"line\">  i = S[<span class=\"number\">0</span>].cur; <span class=\"comment\">//i表中第一个结点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &amp;&amp; S[i].data != e) i = S[i].cur; <span class=\"comment\">//在表中顺链查找</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>求(A-B)∪(B-A)（书P33，挺复杂的，有时间可看）</li>\n</ul>\n<h4 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h4><ul>\n<li>单链表只能从前往后依次遍历；要访问某个结点的前驱（插入、删除操作时），只能从头开始遍历，访问前驱的时间复杂度为O(n)。</li>\n<li>为了克服单链表的这个缺点，引入了<strong>双链表</strong>，双链表结点中有两个指针prior和next，分别指向其直接前驱和直接后继。</li>\n<li>表头结点的prior域和尾结点的next域都是NULL。</li>\n<li>线性表的双向链表存储结构（书）：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DuLNode</span> &#123;</span></span><br><span class=\"line\">  ElemType data;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DuLNode</span> *<span class=\"title\">prior</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DuLNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;DuLNode, *DuLinkList;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"单循环链表\"><a href=\"#单循环链表\" class=\"headerlink\" title=\"单循环链表\"></a>单循环链表</h4><ul>\n<li>循环单链表和单链表的区别在于，表中最后一个结点的指针不是NULL，而改为指向头结点，从而整个链表形成一个环。</li>\n<li>在循环单链表中，<strong>表尾结点*r的next域指向L</strong>，故表中没有指针域为NULL的结点，因此，循环单链表的<strong>判空条件</strong>不是头结点的指针是否为空，而是<strong>它（头结点的指针）是否等于头指针L</strong>。</li>\n<li>循环单链表的插入、删除算法与单链表的几乎一样，所<strong>不同</strong>的是若操作是在<strong>表尾</strong>进行，则执行的操作不同，以让单链表继续保持循环的性质。</li>\n<li>当然，正是因为循环单链表是一个“环”，所有在任何位置上的插入和删除操作都是等价的，而无须判断是否是表尾。</li>\n<li>在单链表中只能从表头结点开始往后顺序遍历整个链表，而循环单链表<u>可以从表中的任意一个结点开始</u>遍历整个链表。</li>\n<li><strong>有时</strong>对循环单链表不设头指针，<strong>而仅设尾指针</strong>，<u>以使得操作效率更高</u>。其原因是，若设的是头指针，对在表尾插入元素需要O(n)的时间复杂度，而若设的是尾指针r，<strong>r-&gt;next即为头指针</strong>，对在表头或插入元素都只需要O(1)的时间复杂度。</li>\n</ul>\n<h4 id=\"双向循环链表\"><a href=\"#双向循环链表\" class=\"headerlink\" title=\"双向循环链表\"></a>双向循环链表</h4><ul>\n<li>与循环单链表不同的是，在循环双链表中，头结点的prior指针还要指向表尾结点。</li>\n<li><strong>表尾结点*p的next域也指向L</strong>；当循环双链表为<strong>空表</strong>时，其<strong>头结点的prior域和next域都等于L</strong>。</li>\n</ul>\n<h4 id=\"带头结点的链表\"><a href=\"#带头结点的链表\" class=\"headerlink\" title=\"带头结点的链表\"></a>带头结点的链表</h4><p>（对于单链表：）</p>\n<ul>\n<li>头结点的数据域可以不设任何信息，但也可以记录表长等信息。单链表带头结点时，头指针L指向头结点；单链表不带头结点时，头指针指向第一个数据结点。</li>\n<li><strong>头结点和头指针的关系</strong>：不管带不带头结点，头指针都始终指向链表的第一个结点，<u>而头结点是带头结点的链表中的第一个结点</u>，结点内通常不存储信息。</li>\n<li>引入<u>头结点</u>后，可以带来<strong>两个优点</strong>：<ol>\n<li>由于第一个数据结点的位置被存放在头结点的指针域中，因此<strong>在链表的第一个位置上的操作和在表的其他位置上的操作一致</strong>，无须进行特殊处理。</li>\n<li>无论链表是否为空，其头指针都是指向头结点的非空指针（空表中头结点的指针域为空），因此<strong>空表和非空表的处理也就得到了统一</strong>。</li>\n</ol>\n</li>\n<li>初始化（王道）：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//带头结点</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">InitList</span><span class=\"params\">(LinkList &amp;L)</span> &#123;</span><br><span class=\"line\">  L=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">  L-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不带头结点</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">InitList</span><span class=\"params\">(LinkList &amp;L)</span> &#123;</span><br><span class=\"line\">  L=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>对于插入操作，当链表不带头结点时，需要判断插入位置i是否为1，若是，则要做特殊处理，将头指针L指向新的首结点。</li>\n<li>对于删除操作，当链表不带头结点时，需要判断插入位置i是否为1，若是，则要做特殊处理，将头指针L指向新的首结点。</li>\n</ul>\n<p>（单循环链表，关于头结点的部分）</p>\n<ul>\n<li>循环单链表和单链表的区别在于，表中最后一个结点的指针不是NULL，而改为指向头结点，从而整个链表形成一个环。</li>\n<li>在循环单链表中，<strong>表尾结点*r的next域指向L</strong>，故表中没有指针域为NULL的结点，因此，循环单链表的<strong>判空条件</strong>不是头结点的指针是否为空，而是<strong>它（头结点的指针）是否等于头指针L</strong>。<br>（双向循环链表，关于头结点的部分）</li>\n</ul>\n<h4 id=\"双向循环链表-1\"><a href=\"#双向循环链表-1\" class=\"headerlink\" title=\"双向循环链表\"></a>双向循环链表</h4><ul>\n<li>与循环单链表不同的是，在循环双链表中，头结点的prior指针还要指向表尾结点。</li>\n<li><strong>表尾结点*p的next域也指向L</strong>；当循环双链表为<strong>空表</strong>时，其<strong>头结点的prior域和next域都等于L</strong>。</li>\n</ul>\n<h3 id=\"线性表的应用\"><a href=\"#线性表的应用\" class=\"headerlink\" title=\"线性表的应用\"></a>线性表的应用</h3><h4 id=\"一元多项式的表示和相加\"><a href=\"#一元多项式的表示和相加\" class=\"headerlink\" title=\"一元多项式的表示和相加\"></a>一元多项式的表示和相加</h4><blockquote>\n<p>这个应该是线性表的应用吧，书P39</p>\n</blockquote>\n<ul>\n<li>代码很复杂，大致思路：</li>\n</ul>\n<ol>\n<li>先将一个一元n次多项式按照升幂写成<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>P</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>p</mi><mn>1</mn></msub><msup><mi>x</mi><msub><mi>e</mi><mn>1</mn></msub></msup><mo>+</mo><msub><mi>p</mi><mn>2</mn></msub><msup><mi>x</mi><msub><mi>x</mi><mn>2</mn></msub></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>p</mi><mi>m</mi></msub><msup><mi>x</mi><msub><mi>e</mi><mi>m</mi></msub></msup></mrow><annotation encoding=\"application/x-tex\">P_n(x) = p_1 x^{e_1} + p_2 x^{x_2} + \\cdots + p_m x^{e_m} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>，<br>其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是指数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">e_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的项的非零系数，且满足<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>e</mi><mn>1</mn></msub><mo>&lt;</mo><msub><mi>e</mi><mn>2</mn></msub><mo>&lt;</mo><mo>⋯</mo><mo>&lt;</mo><msub><mi>e</mi><mi>m</mi></msub><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">0 \\leq e_1 &lt; e_2 &lt; \\cdots &lt; e_m = n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></li>\n<li>用线性链表表示一元多项式，每个结点表示多项式中的一项，每个结点存储系数和指数。</li>\n<li>实现两个多项式（用两个线性链表表示）的相加：类似于归并，因为指数升序排列，对于指数相同的把系数相加即可。</li>\n<li>实现多项式相乘：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mo stretchy=\"false\">[</mo><msub><mi>b</mi><mn>1</mn></msub><msup><mi>x</mi><msub><mi>e</mi><mn>1</mn></msub></msup><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><msup><mi>x</mi><msub><mi>e</mi><mn>2</mn></msub></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>b</mi><mi>n</mi></msub><msup><mi>x</mi><msub><mi>e</mi><mi>n</mi></msub></msup><mo stretchy=\"false\">]</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>b</mi><mi>i</mi></msub><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mi>x</mi><msub><mi>e</mi><mi>i</mi></msub></msup></mrow><annotation encoding=\"application/x-tex\">M(x)=A(x)×B(x)\n    =A(x)×[b_1x^{e_1}+b_2x^{e_2}+\\cdots +b_nx^{e_n}]\n    =\\sum\\limits_{i=1}^n b_i A(x)x^{e_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3291em;vertical-align:-0.9777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li>\n</ol>\n<h3 id=\"具有在实际中选取不同存储结构的判断能力\"><a href=\"#具有在实际中选取不同存储结构的判断能力\" class=\"headerlink\" title=\"具有在实际中选取不同存储结构的判断能力\"></a>具有在实际中选取不同存储结构的判断能力</h3><h4 id=\"顺序表和链表的比较\"><a href=\"#顺序表和链表的比较\" class=\"headerlink\" title=\"顺序表和链表的比较\"></a>顺序表和链表的比较</h4><p>（出自蓝皮书）</p>\n<ul>\n<li>顺序表<ul>\n<li>优点：</li>\n</ul>\n<ol>\n<li>时间上，它可以顺序存储，还可以随机存取，访问速度快；</li>\n<li>空间上，它的存储利用率高，不需要指针。</li>\n</ol>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>时间上，顺序表在插入删除时，如果需要保持原来的顺序，必须平均移动一半的元素，更新速度慢；</li>\n<li>空间上，如果采用静态分配的存储结构，一旦存储数组的空间已满，不能扩充，再插入元素将导致溢出。</li>\n</ol>\n</li>\n<li>链表<ul>\n<li>优点：</li>\n</ul>\n<ol>\n<li>时间上，插入删除不需要大量移动元素，只需修改指针，更新速度快；</li>\n<li>空间上，链表基本没有满和溢出的问题，只要内存可以分配节点，就可以扩充。</li>\n</ol>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>时间上，链表只能顺序访问，所以查找一个元素平均要搜索半个表，访问速度慢；</li>\n<li>空间上，每个元素需要附加一个指针，存储利用率较低。</li>\n<li>此外，由于链表的单线联系的特性，如果操作不慎，导致断链，将会丢失后面的所有元素。</li>\n</ol>\n</li>\n</ul>\n<p>（出自王道）</p>\n<ol>\n<li>存取（读&#x2F;写）方式</li>\n</ol>\n<ul>\n<li>顺序表可以顺序存取，也可以随机存；</li>\n<li>链表只能从表头开始依次顺序存取。</li>\n</ul>\n<ol start=\"2\">\n<li>逻辑结构与物理结构</li>\n</ol>\n<ul>\n<li>采用顺序存储时，逻辑上相邻的元素，对应的物理存储位置也相邻；</li>\n<li>采用链式存储时，逻辑上相邻的元素，物理存储位置不一定相邻，对应的逻辑关系是通过指针链接来表示的。</li>\n</ul>\n<ol start=\"3\">\n<li>查找、插入和删除操作</li>\n</ol>\n<ul>\n<li>对于按值查找，<ul>\n<li>顺序表无序时，两者的时间复杂度均为O(n)；</li>\n<li>顺序表有序时，可采用折半查找，此时的时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>对于按序号查找，<ul>\n<li>顺序表支持随机访问，时间复杂度为O(1)；</li>\n<li>链表的平均时间复杂度为O(n)。</li>\n</ul>\n</li>\n<li>插入、删除操作<ul>\n<li>顺序表平均需要移动半个表长的元素；</li>\n<li>链表只需修改相关结点的指针域即可。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>空间分配</li>\n</ol>\n<ul>\n<li>顺序存储<ul>\n<li>在静态存储分配情形下，<ul>\n<li>一旦存储空间装满就不能扩充，若再加入新元素，则会出现内存溢出，因此需要预先分配足够大的存储空间。</li>\n<li>预先分配过大，可能会导致顺序表后部大量闲置；预先分配过小，又会造成溢出。</li>\n</ul>\n</li>\n<li>在动态存储分配情形下，<ul>\n<li>虽然存储空间可以扩充，但需要移动大量元素，导致操作效率降低；</li>\n<li>而且若内存中没有更大块的连续存储空间，则会导致分配失败。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>链式存储<ul>\n<li>结点空间只在需要时申请分配，</li>\n<li>只要有内存就可以分配，</li>\n<li>操作灵活、高效。</li>\n<li>此外，由于链表的每个结点都带有指针域，因此存储密度不够大。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"在实际中怎样选取存储结构\"><a href=\"#在实际中怎样选取存储结构\" class=\"headerlink\" title=\"在实际中怎样选取存储结构\"></a>在实际中怎样选取存储结构</h4><p>（出自王道）</p>\n<ol>\n<li>基于存储的考虑</li>\n</ol>\n<ul>\n<li>难以估计线性表的长度或存储规模时，不宜采用顺序表；</li>\n<li>但链表的存储密度较低，显然链式存储结构的存储密度是小于1的。</li>\n</ul>\n<ol start=\"2\">\n<li>基于运算的考虑</li>\n</ol>\n<ul>\n<li>若经常做的运算是按序号访问数据元素，<strong>顺序表优于链表</strong>。<ul>\n<li>在顺序表中按序号访问<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的时间复杂度为O(1)；</li>\n<li>链表中按序号访问的时间复杂度为O(n)。</li>\n</ul>\n</li>\n<li>关于插入、删除操作。<ul>\n<li>在顺序表中进行插入、删除操作时，平均移动表中一半的元素，当数据元素的信息量较大且表较长时，这一点是不应忽视的；</li>\n<li>在链表中进行插入、删除操作时，虽然也要找插入位置，但操作主要是比较操作，从这个角度考虑显然<strong>链表优于顺序表</strong>。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>基于环境的考虑</li>\n</ol>\n<ul>\n<li>顺序表容易实现，任何高级语言中都有数组类型；</li>\n<li>链表的操作是基于指针的，相对来讲，前者实现较为简单，这也是用户考虑的一个因素。</li>\n<li>总之，两种存储结构各有长短，选择哪一种由实际问题的主要因素决定。</li>\n<li>通常较稳定的线性表选择顺序存储，而频繁进行插入、删除操作的线性表（即动态性较强）宜选择链式存储。</li>\n</ul>\n<h3 id=\"广义表\"><a href=\"#广义表\" class=\"headerlink\" title=\"广义表\"></a>广义表</h3><blockquote>\n<p>不记得在哪的知识点了，先写在这儿了。<br>内容来自<a href=\"https://www.cnblogs.com/kuailest/p/16743376.html\">博客</a>。</p>\n</blockquote>\n<h4 id=\"广义表的定义\"><a href=\"#广义表的定义\" class=\"headerlink\" title=\"广义表的定义\"></a>广义表的定义</h4><ul>\n<li><strong>线性表</strong> 线性表指的是n≥0个元素a1, a2, a3…的有序数列，并且线性表的元素具有原子性，即结构上是不可分割的一个整体。</li>\n<li><strong>广义表(Generalized list)</strong> 而广义表则是线性表的一种扩展延伸。相对于线性表，广义表最大的特点在于其元素既可以是一个确定的类型，同时也可以是另一个有不定数量的元素组成的表（广义表）。<br>不难看出从广义表的定义是递归的。广义表是线性表的递归数据结构。</li>\n</ul>\n<h4 id=\"广义表的基本概念\"><a href=\"#广义表的基本概念\" class=\"headerlink\" title=\"广义表的基本概念\"></a>广义表的基本概念</h4><ul>\n<li><p><strong>广义表的表示</strong><br>我们通常可以用 GL &#x3D; (a1, a2, a3… an)来表示一个广义表，其中n为表的长度，n≥0，当n&#x3D;&#x3D;0时，我们称广义表为空表，GL为广义表的名字。<br>为了能更好的区分广义表中的元素我们有以下定义：<br><strong>原子</strong> 如果ai是单个元素，我们称之为GL的原子<br><strong>子表</strong> 如果ai是一个广义表，我们陈之为GL的子表<br>我们通常把广义表中的原子用小写字母表示，而子表用大写字母表示。例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A=() //空表</span><br><span class=\"line\">B=(e) //只含有一个原子的广义表</span><br><span class=\"line\">C=(a,(b,c,d)) //含有一个原子和一个子表的广义表</span><br><span class=\"line\">D=(A,B,C)=((),(e),(a,(b,c,d))) //含有三个子表的广义表，且第一个表为空表</span><br><span class=\"line\">E=(a,E) //广义表 E 中有两个元素，原子 a 和它本身。这是一个递归广义表，等同于：E = (a,(a,(a,…)))。</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>广义表的深度和长度</strong><br><strong>广义表的长度</strong>： 广义表中元素的个数（包括原子和子表）<br><strong>广义表的深度</strong>： 广义表中括号的最大层数叫广义表的深度</p>\n</li>\n<li><p><strong>广义表的表头和表尾</strong><br><strong>表头</strong>： 当广义表不为空表时，第一个元素（可能为子表和原子）称为表头<br><strong>表尾</strong>： 除去表头，剩余元素组成的新广义表称为表尾<br>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LS=(1,(1,2,3),5), 其中表头Head(LS)为原子1，表尾为Tail(LS)=((1,2,3),5)</span><br><span class=\"line\">LS=(1), 其中表头Head(LS)为原子1，表尾为空表</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"广义表的存储结构\"><a href=\"#广义表的存储结构\" class=\"headerlink\" title=\"广义表的存储结构\"></a>广义表的存储结构</h4><p>广义表是一种递归的数据结构，它的元素有两种类型，因此很难为广义表分配固定的存储空间，所以其存储结构适合用链式存储结构。<br>为了能使原子和子表在结构上保持一致，又容易区分我们通常采用如下结构：<br><strong>广义表的第一种存储结构</strong><br><img src=\"/articles/9eb01842/GL_1.png\" width=80% height=70% /></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span>ATOM,LIST &#125; ElemTag; <span class=\"comment\">//ATOM==0:表示原子,LIST==1:表示子表</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">GLNode</span> &#123;</span></span><br><span class=\"line\">  ElemTag tag; <span class=\"comment\">//公共部分，用以区分原子部分和表结点</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span> <span class=\"comment\">//原子部分和表结点的联合部分</span></span><br><span class=\"line\">    AtomType atom; <span class=\"comment\">//atom是原子结点的值域,  AtomType由用户定义</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">GLNode</span> *<span class=\"title\">hp</span>, *<span class=\"title\">tp</span>;</span>&#125; ptr;</span><br><span class=\"line\">    <span class=\"comment\">// ptr是表结点的指针域,ptr.hp和ptr.tp分别指向表头和表尾</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125; *Glist; <span class=\"comment\">//广义表类型</span></span><br></pre></td></tr></table></figure>\n<p>e.g. 表示（a,(b,c,d)）<br><img src=\"/articles/9eb01842/GL_11.png\" width=100% height=70% /></p>\n<p><strong>广义表的第二种存储结构</strong><br><img src=\"/articles/9eb01842/GL_2.png\" width=80% height=70% /><br>第二种表示形式实际上就只是在原子中添加了tp指针指向下一个原子或子表</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Typedef <span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span> ATOM,LIST&#125; ElemTag;</span><br><span class=\"line\"><span class=\"comment\">//ATOM==0:表示原子,LIST==1:表示子表</span></span><br><span class=\"line\">Typedef <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">GLNode</span> &#123;</span></span><br><span class=\"line\">  ElemTag tag; <span class=\"comment\">//公共部分，用以区分原子部分和表结点</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span> <span class=\"comment\">//原子部分和表结点的联合部分</span></span><br><span class=\"line\">    AtomType atom; <span class=\"comment\">//原子结点的值域</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">GLNode</span> *<span class=\"title\">hp</span>;</span> <span class=\"comment\">//表结点的表头指针</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">GLNode</span> *<span class=\"title\">tp</span>;</span></span><br><span class=\"line\">  <span class=\"comment\">//相当于线性链表的next，指向下一个元素结点</span></span><br><span class=\"line\">&#125; *Glist; <span class=\"comment\">//广义表类型Glist 是一种扩展的线性链表</span></span><br></pre></td></tr></table></figure>\n<p>e.g. 表示（a,(b,c,d)）<br><img src=\"/articles/9eb01842/GL_22.png\" width=100% height=70% /></p>\n<h4 id=\"广义表的计算（以第二种存储结构为例）\"><a href=\"#广义表的计算（以第二种存储结构为例）\" class=\"headerlink\" title=\"广义表的计算（以第二种存储结构为例）\"></a>广义表的计算（以第二种存储结构为例）</h4><p>（<a href=\"https://zh.wikipedia.org/wiki/%E5%B9%BF%E4%B9%89%E8%A1%A8\">wiki</a>）D&#x3D;(( ),(e),(a,(b,c,d)))是多层次的广义表，长度为3，深度为3。<br><strong>广义表长度的计算</strong>（类似于链表的长度，直接统计tp）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">GLLength</span><span class=\"params\">(GLNode *g)</span> &#123; <span class=\"comment\">//g为一个广义表头节点的指针</span></span><br><span class=\"line\">  <span class=\"type\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\">  g=g-&gt;hp; <span class=\"comment\">//g指向广义表的第一个元素</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (g!=<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    n++;</span><br><span class=\"line\">    g=g-&gt;tp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>广义表的深度</strong>（括号的最大层数）<br>对于带头节点的广义表g,广义表深度的递归定义是它等于所有子表中表的最大深度加1。若g为原子,其深度为0。<br><img src=\"/articles/9eb01842/GL_3.png\" width=70% height=70% /><br>求广义表深度的递归模型f()如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">GLDepth</span><span class=\"params\">(GLNode *g)</span> &#123; <span class=\"comment\">//求带头节点的广义表g的深度</span></span><br><span class=\"line\">  <span class=\"type\">int</span> max=<span class=\"number\">0</span>,dep;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (g-&gt;tag==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">//为原子时返回0</span></span><br><span class=\"line\">  g=g-&gt;hp; <span class=\"comment\">//g指向第一个元素</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (g==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">//为空表时返回1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (g!=<span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">//遍历表中的每一个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (g-&gt;tag==<span class=\"number\">1</span>) &#123;　<span class=\"comment\">//元素为子表的情况</span></span><br><span class=\"line\">      dep=GLDepth(g); <span class=\"comment\">//递归调用求出子表的深度</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dep&gt;max) max=dep;</span><br><span class=\"line\">      <span class=\"comment\">//max为同一层所求过的子表中深度的最大值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g=g-&gt;tp; <span class=\"comment\">//使g指向下一个元素</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>(max+<span class=\"number\">1</span>); <span class=\"comment\">//返回表的深度</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、栈和队列\"><a href=\"#四、栈和队列\" class=\"headerlink\" title=\"四、栈和队列\"></a>四、栈和队列</h2><blockquote>\n<p>博客：<br><a href=\"https://cloud.tencent.com/developer/article/2456014\">栈的深度解析：顺序栈与链栈的实现</a><br><a href=\"https://cloud.tencent.com/developer/article/2456015\">队列的深度解析：链式队列的实现</a></p>\n</blockquote>\n<h3 id=\"栈的定义\"><a href=\"#栈的定义\" class=\"headerlink\" title=\"栈的定义\"></a>栈的定义</h3><ul>\n<li><strong>栈</strong>是一种后进先出（LIFO）的线性表，只允许在表尾进行插入和删除操作。</li>\n<li><strong>栈顶</strong>——<u>表尾端</u>（线性表允许进行插入和删除操作的那一端）。</li>\n<li><strong>栈底</strong>——<u>表头端</u>（线性表不允许进行插入和删除操作的那一端）。</li>\n<li><strong>空栈</strong>——不含任何元素的空表。</li>\n</ul>\n<h3 id=\"栈的逻辑结构\"><a href=\"#栈的逻辑结构\" class=\"headerlink\" title=\"栈的逻辑结构\"></a>栈的逻辑结构</h3><ul>\n<li>栈是操作受限的线性表，可被称为限定性的数据结构，其操作特性是后进先出（Last In First Out，LIFO）。</li>\n<li>栈是只允许在一端进行插入和删除操作的线性表，允许进行插入和删除操作的那一端称为栈顶，不允许进行插入和删除操作的另一端称为栈底。</li>\n</ul>\n<h3 id=\"栈的特点（考点没写）\"><a href=\"#栈的特点（考点没写）\" class=\"headerlink\" title=\"栈的特点（考点没写）\"></a>栈的特点（考点没写）</h3><ul>\n<li><strong>操作限制：</strong>只能在栈顶进行元素的添加（入栈）和移除（出栈）。</li>\n<li><strong>栈顶元素：</strong>当前可以访问和操作的元素。</li>\n<li><strong>空栈：</strong>栈为空时，无法进行出栈操作。</li>\n</ul>\n<h3 id=\"栈的操作特性（考点没写）\"><a href=\"#栈的操作特性（考点没写）\" class=\"headerlink\" title=\"栈的操作特性（考点没写）\"></a>栈的操作特性（考点没写）</h3><ul>\n<li>后进先出（Last In First Out，LIFO）</li>\n</ul>\n<h3 id=\"栈的基本操作\"><a href=\"#栈的基本操作\" class=\"headerlink\" title=\"栈的基本操作\"></a>栈的基本操作</h3><ul>\n<li><strong>入栈（Push）：</strong>将新元素添加到栈顶。</li>\n<li><strong>出栈（Pop）：</strong>移除并返回栈顶元素。</li>\n<li><strong>查看栈顶元素（GetTop）：</strong>返回栈顶元素，但不删除它。</li>\n<li><strong>判断是否为空（IsEmpty）：</strong>检查栈是否没有元素。</li>\n<li><strong>统计栈的大小（Size）：</strong>获取栈中有效元素个数。</li>\n</ul>\n<h3 id=\"栈的数学性质（考点没写）\"><a href=\"#栈的数学性质（考点没写）\" class=\"headerlink\" title=\"栈的数学性质（考点没写）\"></a>栈的数学性质（考点没写）</h3><ul>\n<li>当n个不同元素进栈时，出栈元素不同排列的个数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><msubsup><mi mathvariant=\"normal\">C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{n+1}\\mathrm{C}_{2n}^{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2484em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathrm\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4519em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span></span></span></span>。这个公式称为卡特兰数（Catalan）公式。</li>\n<li>证明：</li>\n</ul>\n<ol>\n<li>画个n*n条路（边）的方格，从一个顶点走到另一个斜对角的端点总共要走2n条边，从中选择n条边为竖着走或横着走（类比为进栈或出栈），剩下n条为横着走或竖着走，得到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"normal\">C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathrm{C}_{2n}^{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9314em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4519em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span></span></span></span>种方式。</li>\n<li>过了斜对角线的路径是有问题的，就是在某个前缀操作里边出栈次数多于入栈了（拿鬼出栈啊），求出这些非法路径的数目。</li>\n<li>设不能越过的对角线为y&#x3D;x，从(0,0)→(n,n)。画出y&#x3D;x+1，作为对称轴。若越过y&#x3D;x，与y&#x3D;x+1就会有交点，把第一次碰到y&#x3D;x+1以后的部分关于y&#x3D;x+1对称，路径变为(0,0)→(n-1,n+1)。显然每一条非法路径都可以这么变为(0,0)→(n-1,n+1)，而任何合法方案由于不接触直线y&#x3D;x+1，无论从哪个点对称都不是一条连续的路径。</li>\n<li>非法路径条数为(0,0)→(n-1,n+1)的方案数，为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"normal\">C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathrm{C}_{2n}^{n-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1205em;vertical-align:-0.2663em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8542em;\"><span style=\"top:-2.4337em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.1031em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2663em;\"><span></span></span></span></span></span></span></span></span></span>。</li>\n<li>合法路径数&#x3D;<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"normal\">C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup><mo>−</mo><msubsup><mi mathvariant=\"normal\">C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mo>=</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo></mrow><mrow><mi>n</mi><mo stretchy=\"false\">!</mo><mi>n</mi><mo stretchy=\"false\">!</mo></mrow></mfrac><mo>−</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo></mrow><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mrow><mi>n</mi><mo stretchy=\"false\">!</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>−</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo><mi>n</mi></mrow><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mi>n</mi><mo stretchy=\"false\">!</mo></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo stretchy=\"false\">[</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo><mi>n</mi></mrow><mrow><mi>n</mi><mo stretchy=\"false\">!</mo><mi>n</mi><mo stretchy=\"false\">!</mo></mrow></mfrac><mo stretchy=\"false\">]</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><msubsup><mi mathvariant=\"normal\">C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathrm{C}_ {2n}^{n}-\\mathrm{C}_{2n}^{n-1} =\\frac{(2n)!}{n!n!}-\\frac{(2n)!}{(n+1)!(n-1)!} =\\frac{(2n)!(n+1)}{n!n!(n+1)}-\\frac{(2n)!n}{(n+1)n!n!} =\\frac{1}{n+1}[\\frac{(2n)!(n+1)-(2n)!n}{n!n!}] =\\frac{1}{n+1} \\mathrm{C}_{2n}^{n} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9314em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4519em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1205em;vertical-align:-0.2663em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8542em;\"><span style=\"top:-2.4337em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.1031em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2663em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)!</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.53em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)!</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)!</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)!</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.53em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)!</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.53em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)!</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4133em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)!</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">−</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)!</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2484em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathrm\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4519em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ol>\n<h3 id=\"顺序栈的定义\"><a href=\"#顺序栈的定义\" class=\"headerlink\" title=\"顺序栈的定义\"></a>顺序栈的定义</h3><ul>\n<li><strong>顺序栈</strong>：采用顺序存储的栈，利用一组地址连续的存储单元依次存放<u>自栈底到栈顶</u>的数据元素，同时附设一个指针top指示栈顶元素在顺序栈中的位置。</li>\n</ul>\n<h3 id=\"链式栈的定义\"><a href=\"#链式栈的定义\" class=\"headerlink\" title=\"链式栈的定义\"></a>链式栈的定义</h3><ul>\n<li><strong>链栈</strong>：采用链式存储的栈。优点是便于多个栈共享存储空间和提高其效率，且不易发生栈溢出。</li>\n<li>通常用单链表实现，并规定所有操作都是在单链表的表头进行的。</li>\n</ul>\n<h3 id=\"顺序栈和链式栈的特点\"><a href=\"#顺序栈和链式栈的特点\" class=\"headerlink\" title=\"顺序栈和链式栈的特点\"></a>顺序栈和链式栈的特点</h3><table>\n<thead>\n<tr>\n<th><strong>特点</strong></th>\n<th><strong>顺序栈 (Sequential Stack)</strong></th>\n<th><strong>链式栈 (Linked Stack)</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>存储结构</strong></td>\n<td>基于数组实现</td>\n<td>基于链表实现</td>\n</tr>\n<tr>\n<td><strong>内存布局</strong></td>\n<td>内存连续</td>\n<td>内存不连续，元素间通过指针连接</td>\n</tr>\n<tr>\n<td><strong>内存管理</strong></td>\n<td>静态分配（可动态扩容）</td>\n<td>动态分配</td>\n</tr>\n<tr>\n<td><strong>空间效率</strong></td>\n<td>容量固定（可动态扩容，若超出初始容量则可能浪费空间）</td>\n<td>动态扩展，使用的空间与元素个数相匹配</td>\n</tr>\n<tr>\n<td><strong>访问速度</strong></td>\n<td>O(1) 时间复杂度</td>\n<td>O(1) 时间复杂度</td>\n</tr>\n<tr>\n<td><strong>空间复杂度</strong></td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td><strong>栈溢出</strong></td>\n<td>容易发生，尤其在固定容量情况下</td>\n<td>不易发生，除非系统内存耗尽</td>\n</tr>\n<tr>\n<td><strong>实现简单性</strong></td>\n<td>实现较为简单，适用于容量已知的情况</td>\n<td>实现复杂，需处理节点的动态分配与释放</td>\n</tr>\n<tr>\n<td><strong>元素访问</strong></td>\n<td>只能访问栈顶元素</td>\n<td>只能访问栈顶元素</td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>适合对栈容量有明确限制的场景</td>\n<td>适合不确定栈容量，且需频繁变化元素的场景</td>\n</tr>\n</tbody></table>\n<h3 id=\"顺序栈的基本操作\"><a href=\"#顺序栈的基本操作\" class=\"headerlink\" title=\"顺序栈的基本操作\"></a>顺序栈的基本操作</h3><ul>\n<li><p>定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> STACK_INIT_SIZE 100 <span class=\"comment\">//存储空间初始分配量</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> STACKINCREMENT 10 <span class=\"comment\">//存储空间分配增量</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  SELemType *base;</span><br><span class=\"line\">  SElemType *top;</span><br><span class=\"line\">  <span class=\"type\">int</span> stacksize; <span class=\"comment\">//栈的当前可使用的最大容量</span></span><br><span class=\"line\">&#125;SqStack;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">InitStack</span><span class=\"params\">(SqStack &amp;S)</span> &#123;</span><br><span class=\"line\">  S.base = (SElemType *)<span class=\"built_in\">malloc</span>(STACK_INIT_SIZE*<span class=\"keyword\">sizeof</span>(SElemType));</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!S.base) <span class=\"built_in\">exit</span>(OVERFLOW);</span><br><span class=\"line\">  S.top = S.base;</span><br><span class=\"line\">  S.stacksize = STACK_INIT_SIZE;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看栈顶元素</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">GetTop</span><span class=\"params\">(SqStack S, ElemType &amp;e)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(S.top == S.base) <span class=\"keyword\">return</span> ERROR; <span class=\"comment\">//栈空</span></span><br><span class=\"line\">  e = *(S.top<span class=\"number\">-1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>入栈</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入元素e为新的栈顶元素</span></span><br><span class=\"line\">Status <span class=\"title function_\">Push</span><span class=\"params\">(SqStack &amp;S, SElemType e)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(S.top - S.base &gt;= S.stacksize) &#123; <span class=\"comment\">//栈满，追加存储空间</span></span><br><span class=\"line\">    S.base = (SElemType *)<span class=\"built_in\">realloc</span>((S.stacksize+STACKINCREMENT)*<span class=\"keyword\">sizeof</span>(ElemType));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!S.base) <span class=\"built_in\">exit</span>(OVERFLOW);</span><br><span class=\"line\">    S.top = S.base + S.stacksize;</span><br><span class=\"line\">    S.stacksize +=STACKINCREMENT;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *S.top ++ = e;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出栈</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">Pop</span><span class=\"params\">(SqStack &amp;S, ElemType &amp;e)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(S.top == S.base) <span class=\"keyword\">return</span> ERROR; <span class=\"comment\">//栈空</span></span><br><span class=\"line\">  e = *--S.top;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>注</strong>：验证过<code>*S.top++ = e</code>和<code>e = *--S.top</code>，代码如下，输入结果为1。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *top;</span><br><span class=\"line\">    <span class=\"type\">int</span> *base;</span><br><span class=\"line\">    <span class=\"type\">int</span> stacksize;</span><br><span class=\"line\">&#125; SqStack;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span>&#123;</span><br><span class=\"line\">    SqStack S;</span><br><span class=\"line\">    S.base = (<span class=\"type\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>*<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    S.top = S.base;</span><br><span class=\"line\">    *S.top ++ = <span class=\"number\">1</span>;</span><br><span class=\"line\">    cout&lt;&lt;*--S.top&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>情况分析：<code>S.top = -1</code> 和 <code>S.top = 0</code>。注意：声明struct的时候，用的是<code>ElemType data[Maxsize]</code>，所以不要出现<code>top==Maxsize</code>时<code>S.data[top]</code>，先把top降掉。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>当 <code>S.top = -1</code> 时</strong></th>\n<th><strong>当 <code>S.top = 0</code> 时</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>初始时</strong></td>\n<td><code>S.top = -1</code></td>\n<td><code>S.top = 0</code></td>\n</tr>\n<tr>\n<td><strong>栈的第一个元素</strong></td>\n<td><code>S.data[0]</code></td>\n<td><code>S.data[0]</code></td>\n</tr>\n<tr>\n<td><strong>栈顶指针指向</strong></td>\n<td>指向栈顶元素</td>\n<td>指向栈顶元素的后一个元素</td>\n</tr>\n<tr>\n<td><strong>栈满条件</strong></td>\n<td><code>top == MAX_SIZE - 1</code></td>\n<td><code>top == MAX_SIZE</code></td>\n</tr>\n<tr>\n<td><strong>栈空条件</strong></td>\n<td><code>top == -1</code></td>\n<td><code>top == 0</code></td>\n</tr>\n<tr>\n<td><strong>进栈操作</strong></td>\n<td><code>判栈满，S.data[++top] = x;</code></td>\n<td><code>判栈满，S.data[top++] = x;</code></td>\n</tr>\n<tr>\n<td><strong>出栈操作</strong></td>\n<td><code>判栈空，x = S.data[top--];</code></td>\n<td><code>判栈空，x = S.data[--top];</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"链栈的基本操作\"><a href=\"#链栈的基本操作\" class=\"headerlink\" title=\"链栈的基本操作\"></a>链栈的基本操作</h3><ul>\n<li><p>声明（王道）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Linknode</span> &#123;</span></span><br><span class=\"line\">  ElemType data;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Linknode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;ListStack;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>链栈通常采用单链表实现，并规定所有操作都是在单链表的表头进行的。</p>\n</li>\n<li><p>这里规定链栈没有头结点，Lhead指向栈顶元素。</p>\n</li>\n</ul>\n<h3 id=\"共享栈（考点没写）\"><a href=\"#共享栈（考点没写）\" class=\"headerlink\" title=\"共享栈（考点没写）\"></a>共享栈（考点没写）</h3><ul>\n<li>利用栈底位置相对不变的特性，可让两个顺序栈共享一个一维数组空间，将两个栈的栈底分别设置在共享空间的两端，两个栈顶向共享空间的中间延伸。</li>\n<li>共享栈时为了更有效地利用存储空间，两个栈的空间相互调节，只有再整个存储空间被占满时才发生上溢。</li>\n<li>其存取数据的时间复杂度均为O(1)，所以对存取效率没什么影响。</li>\n</ul>\n<table>\n  <tr>\n    <th>共享栈</th>\n    <th>0号栈</th>\n    <th>1号栈</th>\n  </tr>\n  <tr>\n    <td>初始时</td>\n    <td>top0 = -1</td>\n    <td>top1 = Maxsize</td>\n  </tr>\n  <tr>\n    <td>栈的第一个元素</td>\n    <td>S.data[0]</td>\n    <td>S.data[Maxsize]</td>\n  </tr>\n  <tr>\n    <td>栈顶指针指向</td>\n    <td>指向栈顶元素</td>\n    <td>指向栈顶元素</td>\n  </tr>\n  <tr>\n    <td>栈满条件</td>\n    <td colspan=\"2\">top1 - top0 == 1</td>\n  </tr>\n  <tr>\n    <td>栈空条件</td>\n    <td>top0 == -1，0号栈空</td>\n    <td>top1 == Maxsize，1号栈空</td>\n  </tr>\n  <tr>\n    <td>进栈操作</td>\n    <td>判栈满，S.data[++top0] = x;</td>\n    <td>判栈满，S.data[--top1] = x;</td>\n  </tr>\n  <tr>\n    <td>出栈操作</td>\n    <td>判栈空，x = S.data[top0--];</td>\n    <td>判栈空，x = S.data[top1++];</td>\n  </tr>\n</table>\n\n<h3 id=\"队列的定义\"><a href=\"#队列的定义\" class=\"headerlink\" title=\"队列的定义\"></a>队列的定义</h3><ul>\n<li><strong>队列（Queue）简称队，</strong>是一种先进先出（First In  First Out, FIFO）的线性表，它只允许在表的一端进行插入，而在另一端删除元素。</li>\n<li>这和我们日常生活中的排队是一致的，最早进入队列的元素最早离开。</li>\n<li><strong>队尾（Front）</strong>——允许插入的一端。</li>\n<li><strong>队头（Rear）</strong>——允许删除的一端。</li>\n<li><strong>空队列</strong>——不含任何元素的空表。</li>\n</ul>\n<h3 id=\"队列的逻辑结构\"><a href=\"#队列的逻辑结构\" class=\"headerlink\" title=\"队列的逻辑结构\"></a>队列的逻辑结构</h3><ul>\n<li>队列是一种操作受限的线性表，只允许在表的一端进行插入，而在另一端删除元素，服从先进先出原则。允许插入的一端叫做队尾，允许删除的一端称为队头，队列为空时无法进行出队操作。</li>\n</ul>\n<h3 id=\"队列的操作特性（考点没写）\"><a href=\"#队列的操作特性（考点没写）\" class=\"headerlink\" title=\"队列的操作特性（考点没写）\"></a>队列的操作特性（考点没写）</h3><ul>\n<li>先进先出（FIFO）</li>\n</ul>\n<h3 id=\"队列的特点\"><a href=\"#队列的特点\" class=\"headerlink\" title=\"队列的特点\"></a>队列的特点</h3><ul>\n<li><strong>先进先出（FIFO）</strong>：最先进入的元素最先被移除。</li>\n<li><strong>操作限制</strong>：只能在队列的尾部入队，头部出队。</li>\n<li><strong>队首元素</strong>：队首是当前可以访问和移除的元素。</li>\n<li><strong>空队列</strong>：队列为空时无法进行出队操作。</li>\n<li><strong>动态大小</strong>：可以根据需要扩展或收缩。</li>\n</ul>\n<h3 id=\"队列的基本操作\"><a href=\"#队列的基本操作\" class=\"headerlink\" title=\"队列的基本操作\"></a>队列的基本操作</h3><ul>\n<li><strong>入队（Push）</strong>：将一个元素添加到队列的尾部。</li>\n<li><strong>出队（Pop）</strong>：从队列的头部移除并返回一个元素。</li>\n<li><strong>取队首元素（Front）</strong>：返回队首的元素，但不删除它。</li>\n<li><strong>取队尾元素（Back）</strong>：返回队尾的元素，但不删除它。</li>\n<li><strong>队列判空（isEmpty）</strong>：判断队列中是否有元素。</li>\n<li><strong>获取队列长度（Size）</strong>：获取队列中有效元素个数。</li>\n</ul>\n<h3 id=\"顺序队列的定义\"><a href=\"#顺序队列的定义\" class=\"headerlink\" title=\"顺序队列的定义\"></a>顺序队列的定义</h3><ul>\n<li><strong>顺序队列：</strong>采用顺序存储的队列，利用一块连续的存储单元存放队列中的元素，并附设两个指针front和rear分别指示队头和队尾元素在顺序队列中的位置。</li>\n</ul>\n<h3 id=\"链式队列的定义\"><a href=\"#链式队列的定义\" class=\"headerlink\" title=\"链式队列的定义\"></a>链式队列的定义</h3><ul>\n<li><strong>链队列</strong>是队列的链式表示，它实际上是一个同时有队头指针和队尾指针的单链表。<strong>头指针</strong>指向队头结点，尾指针指向<strong>队尾结点</strong>。</li>\n</ul>\n<h3 id=\"顺序队列和链式队列的特点\"><a href=\"#顺序队列和链式队列的特点\" class=\"headerlink\" title=\"顺序队列和链式队列的特点\"></a>顺序队列和链式队列的特点</h3><table>\n<thead>\n<tr>\n<th>特点</th>\n<th>顺序队列</th>\n<th>链式队列</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>存储结构</strong></td>\n<td>使用数组实现，连续存储元素</td>\n<td>使用链表实现，非连续存储元素</td>\n</tr>\n<tr>\n<td><strong>固定大小</strong></td>\n<td>队列的大小在创建时固定</td>\n<td>可以根据需要动态扩展</td>\n</tr>\n<tr>\n<td><strong>入队和出队效率</strong></td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td><strong>空间浪费</strong></td>\n<td>可能存在未使用的数组空间</td>\n<td>无空间浪费</td>\n</tr>\n<tr>\n<td><strong>队满判断</strong></td>\n<td>需要判定是否队满</td>\n<td>不需要判定队满</td>\n</tr>\n<tr>\n<td><strong>额外开销</strong></td>\n<td>无额外开销</td>\n<td>每个元素需存储指针，空间开销较大</td>\n</tr>\n</tbody></table>\n<h3 id=\"顺序队列的基本操作\"><a href=\"#顺序队列的基本操作\" class=\"headerlink\" title=\"顺序队列的基本操作\"></a>顺序队列的基本操作</h3><p>（例如，还有其他变换，比如&#x3D;1）这四个变换是用来锻炼思维和熟练度的，理清楚就可以举一反三了。</p>\n<table border=\"1\" style=\"border-collapse: collapse; text-align: center; width: 100%; height: 100px;\">\n  <tr>\n    <td style=\"position: relative; width: 24%; height: 80px;\">\n      <div style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(to top right, transparent 49%, black 50%, transparent 51%);\"></div>\n      <div style=\"position: absolute; bottom: 0; left: 0; width: 50%; height: 50%; display: flex; justify-content: center; align-items: center; font-size: 14px;\">\n        队头指针front\n      </div>\n      <div style=\"position: absolute; top: 0; right: 0; width: 50%; height: 50%; display: flex; justify-content: center; align-items: center; font-size: 14px;\">\n        队尾指针rear\n      </div>\n    </td>\n    <td style=\"font-size: 14px; width: 38%;\">① 指向队尾元素</td>\n    <td style=\"font-size: 14px; width: 38%;\">② 指向队尾元素的后一个位置</td>\n  </tr>\n  <tr>\n    <td style=\"font-size: 14px;\">① 指向队头元素</td>\n    <td>\n      <table border=\"1\" style=\"border: 2px solid; width: 100%; text-align: left;\">\n        <tr>\n          <td>初始时</td>\n          <td>Q.front=0; Q.rear=-1;</td>\n        </tr>\n        <tr>\n          <td>判空</td>\n          <td>Q.front==Q.rear+1</td>\n        </tr>\n        <tr>\n          <td>判满（若有限制长度为len）</td>\n          <td>Q.rear-Q.front==len-1</td>\n        </tr>\n        <tr>\n          <td>判再入队一个值，是否会“上溢出”</td>\n          <td>Q.rear+1>=Maxsize</td>\n        </tr>\n        <tr>\n          <td>进队</td>\n          <td>判“上溢出”和“满（若有）”，Q.rear++，赋值</td>\n        </tr>\n        <tr>\n          <td>出队</td>\n          <td>判空，取值，Q.front++</td>\n        </tr>\n      </table>\n    </td>\n    <td>\n      <table border=\"1\" style=\"border: 2px solid; width: 100%; text-align: left;\">\n        <tr>\n          <td>初始时</td>\n          <td>Q.front=Q.rear=0</td>\n        </tr>\n        <tr>\n          <td>判空</td>\n          <td>Q.front==Q.rear</td>\n        </tr>\n        <tr>\n          <td>判满（若有限制长度为len）</td>\n          <td>Q.rear-Q.front==len</td>\n        </tr>\n        <tr>\n          <td>判再入队一个值，是否会“上溢出”</td>\n          <td>Q.rear>=Maxsize</td>\n        </tr>\n        <tr>\n          <td>进队</td>\n          <td>判“上溢出”和“满（若有）”，赋值，Q.rear++</td>\n        </tr>\n        <tr>\n          <td>出队</td>\n          <td>判空，取值，Q.front++</td>\n        </tr>\n      </table>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"font-size: 14px;\">② 指向队头元素的前一个位置</td>\n    <td>\n      <table border=\"1\" style=\"border: 2px solid; width: 100%; text-align: left;\">\n        <tr>\n          <td>初始时</td>\n          <td>Q.front=-1; Q.rear=-1;</td>\n        </tr>\n        <tr>\n          <td>判空</td>\n          <td>Q.front==Q.rear</td>\n        </tr>\n        <tr>\n          <td>判满（若有限制长度为len）</td>\n          <td>Q.rear-Q.front==len</td>\n        </tr>\n        <tr>\n          <td>判再入队一个值，是否会“上溢出”</td>\n          <td>Q.rear+1>=Maxsize</td>\n        </tr>\n        <tr>\n          <td>进队</td>\n          <td>判“上溢出”和“满（若有）”，Q.rear++，赋值</td>\n        </tr>\n        <tr>\n          <td>出队</td>\n          <td>判空，Q.front++，取值</td>\n        </tr>\n      </table>\n    </td>\n    <td>\n      <table border=\"1\" style=\"border: 2px solid; width: 100%; text-align: left;\">\n        <tr>\n          <td>初始时</td>\n          <td>Q.front=-1; Q.rear=0;</td>\n        </tr>\n        <tr>\n          <td>判空</td>\n          <td>Q.front+1==Q.rear</td>\n        </tr>\n        <tr>\n          <td>判满（若有限制长度为len）</td>\n          <td>Q.rear-Q.front-1==len</td>\n        </tr>\n        <tr>\n          <td>判再入队一个值，是否会“上溢出”</td>\n          <td>Q.rear>=Maxsize</td>\n        </tr>\n        <tr>\n          <td>进队</td>\n          <td>判“上溢出”和“满（若有）”，赋值，Q.rear++</td>\n        </tr>\n        <tr>\n          <td>出队</td>\n          <td>判空，Q.front++，取值</td>\n        </tr>\n      </table>\n    </td>\n  </tr>\n</table>\n\n\n\n<h3 id=\"链队列的基本操作\"><a href=\"#链队列的基本操作\" class=\"headerlink\" title=\"链队列的基本操作\"></a>链队列的基本操作</h3><ul>\n<li><p>头指针指向队头结点，尾指针指向队尾结点，即单链表的最后一个结点。</p>\n</li>\n<li><p><strong>不带头结点时</strong>，当<code>Q.front==NULL &amp;&amp; Q.rear==NULL</code>时，链式队列为空。</p>\n</li>\n<li><p>入队时，建立一个新结点，将新结点插入到链表的尾部，并让Q.rear指向这个新插入的结点（若原队列为空队，则令Q.front也指向该结点 <strong>（带头结点时不用操作Q.front，因为它指向头结点）</strong>）。</p>\n</li>\n<li><p>出队时，首先判断队是否为空，若不空，则取出队头元素，将其从链表中摘除，并让Q.front指向下一个结点（若该结点为最后一个结点，则置Q.front和Q.rear都为NULL <strong>（带头结点时只需修改Q.front-&gt;next为下一个结点，Q.front不用动，Q.rear置为指向头结点）</strong>）。</p>\n</li>\n<li><p>不难看出，不带头结点的链式队列在操作上往往比较麻烦，因此通常将链式队列设计成一个<strong>带头结点</strong>的单链表，<strong>这样插入和删除操作就统一了</strong>。</p>\n</li>\n<li><p>用单链表表示的链式队列特别适合于数据元素变动比较大的情形，而且不存在队列满且产生溢出的问题。</p>\n</li>\n<li><p>另外，假如程序中要使用多个队列，与多个栈的情形一样，最好使用链式队列，这样就不会出现存储分配不合理和“溢出”的问题。</p>\n</li>\n<li><p>带头结点和不带头结点的操作是不一样的，要注意。</p>\n</li>\n<li><p>单链队列——队列的链式存储结构</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">QNode</span> &#123;</span></span><br><span class=\"line\">  QElemType data;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">QNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;QNode, *QueuePtr;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  QueuePtr front; <span class=\"comment\">//队头指针</span></span><br><span class=\"line\">  QueuePtr rear;</span><br><span class=\"line\">&#125;LinkQueue;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">InitQueue</span> <span class=\"params\">(LinkQueue &amp;Q)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//构造一个空队列</span></span><br><span class=\"line\">  Q.front = Q.rear = (QueuePtr)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(QNode));</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!Q.front) <span class=\"built_in\">exit</span>(OVERFLOW);</span><br><span class=\"line\">  Q.front -&gt; next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>销毁队列Q</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stauts <span class=\"title function_\">DestroyQueue</span> <span class=\"params\">(LinkQueue &amp;Q)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(Q.front) &#123;</span><br><span class=\"line\">    Q.rear = Q.front -&gt; next;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(Q.front);</span><br><span class=\"line\">    Q.front = Q.rear;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>入队——插入元素e为Q的新的队尾元素</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">EnQueue</span> <span class=\"params\">(LinkQueue &amp;Q, ElemType e)</span> &#123;</span><br><span class=\"line\">  p = (QueuePtr)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(QNode));</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!p) <span class=\"built_in\">exit</span>(OVERFLOW);</span><br><span class=\"line\">  p -&gt; data = e;</span><br><span class=\"line\">  p -&gt; next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  Q.rear -&gt; next = p;</span><br><span class=\"line\">  Q.rear = p; <span class=\"comment\">//别忘记这句！！！</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出队——若队列不空，则删除Q的队头元素，用e返回其值，并返回OK，否则返回ERROR</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">DeQueue</span><span class=\"params\">(LinkQueue &amp;Q, QElemType &amp;e)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(Q.front == Q.rear) <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">  p = Q.front -&gt; next;</span><br><span class=\"line\">  e = p -&gt; data;</span><br><span class=\"line\">  Q.front -&gt; next = p -&gt; next;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(Q.rear == p) Q.rear = Q.front;</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"顺序存储结构中实现循环队列的具体要求\"><a href=\"#顺序存储结构中实现循环队列的具体要求\" class=\"headerlink\" title=\"顺序存储结构中实现循环队列的具体要求\"></a>顺序存储结构中实现循环队列的具体要求</h3><ul>\n<li><p>在顺序队列中，<code>Q.rear==Maxsize</code>并不能作为判断队列满的条件，但在此时如果再插入新的队尾元素，会发生数组越界问题；</p>\n</li>\n<li><p>但此时又不宜像顺序栈那样通过 再分配 来扩大数组空间，因为队列的实际可用空间可能并未占满。这便是一种“假溢出”。</p>\n</li>\n<li><p>为解决这种“假溢出”问题，引出了<strong>循环队列</strong>的概念。将顺序队列臆造为一个环状的空间，即把存储队列元素的表<strong>从逻辑上</strong>视为一个环，称为<strong>循环队列</strong>。</p>\n</li>\n<li><p>当队首指针或队尾指针到达Maxsize-1后，若要再前进一个位置就自动到0，这里可以通过取模(%)的方式实现。</p>\n</li>\n<li><p>初始时：Q.front&#x3D;Q.rear&#x3D;0</p>\n</li>\n<li><p>队首指针进1：Q.front&#x3D;(Q.front+1)%Maxszie</p>\n</li>\n<li><p>队尾指针进1：Q.rear&#x3D;(Q.rear+1)%Maxsize</p>\n</li>\n<li><p>队列长度：(Q.rear+Maxsize-Q.front)%Maxsize</p>\n</li>\n<li><p>出队入队时：指针都按顺时针方向进1</p>\n</li>\n<li><p><strong>为了区分是队空还是堆满的情况，</strong>有3种处理方式：</p>\n<ol>\n<li>牺牲一个单元来区分队空和队满，入队时少用一个队列单元，这是一种较为普遍的做法，约定以“队头指针在队尾指针的下一个位置作为队满的标志”。<br>  队满条件：(Q.rear+1)%Maxsize&#x3D;&#x3D;Q.front；<br>  队空条件：Q.front &#x3D;&#x3D; Q.rear；<br>  队列中元素的个数：(Q.rear-Q.front+Maxsize)%Maxsize。</li>\n<li>类型中增设size数据成员，表示元素个数。删除成功size–，插入成功size++。<br>  队空条件：Q.size&#x3D;&#x3D;0；<br>  队满条件：Q.size&#x3D;&#x3D;Maxsize。<br>  两种情况都有Q.front&#x3D;&#x3D;Q.rear。</li>\n<li>类型中增设tag数据成员，以区分是队满还是队空。<br>  删除成功置tag&#x3D;0，若导致Q.front&#x3D;&#x3D;Q.rear，则为队空；<br>  插入成功置tag&#x3D;1，若导致Q.front&#x3D;&#x3D;Q.rear，则为队满。</li>\n</ol>\n</li>\n<li><p>在C语言中不能用动态分配的一维数组来实现循环队列。如果用户的应用程序中设有循环队列，则必须为它设定一个最大队列长度；若用户无法预估所用的队列的最大长度，则宜采用链队列。</p>\n</li>\n<li><p>这里会有很多变式，考试的时候随机应变，用手模特殊值，然后换成未知量的形式来做题即可。主要是记住队尾rear是入队，队头front是出队。</p>\n</li>\n</ul>\n<h4 id=\"循环队列——队列的顺序存储结构\"><a href=\"#循环队列——队列的顺序存储结构\" class=\"headerlink\" title=\"循环队列——队列的顺序存储结构\"></a>循环队列——队列的顺序存储结构</h4><ul>\n<li><p>类型声明</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXQSIZE 100 <span class=\"comment\">//最大队列长度</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  QElemType *base;</span><br><span class=\"line\">  <span class=\"type\">int</span> front;</span><br><span class=\"line\">  <span class=\"type\">int</span> rear;</span><br><span class=\"line\">&#125;SqQueue;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">InitQueue</span><span class=\"params\">(SqQueue &amp;Q)</span> &#123;</span><br><span class=\"line\">  Q.base = (QElemType *)alloc(MAXQSIZE*<span class=\"keyword\">sizeof</span>(QElemType));</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!Q.base) <span class=\"built_in\">exit</span>(OVERFLOW);</span><br><span class=\"line\">  Q.front = Q.rear = <span class=\"number\">0</span>; <span class=\"comment\">//合法操作，在C语言中，赋值操作不仅会将值赋给变量，还会返回这个值本身</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>返回Q的元素个数，即队列的长度</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">QueueLength</span><span class=\"params\">(SqQueue Q)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (Q.rear-Q.front+MAXQSIZE)%MAXSIZE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>入队</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">EnQueue</span><span class=\"params\">(SqQueue &amp;Q, QElemType e)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((Q.rear+<span class=\"number\">1</span>) % MAXQSIZE == Q.front) <span class=\"keyword\">return</span> ERROR; <span class=\"comment\">//队满</span></span><br><span class=\"line\">  Q.base[Q.rear] = e;</span><br><span class=\"line\">  Q.rear = (Q.rear + <span class=\"number\">1</span>) % MAXQSIZE;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出队</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">DeQueue</span><span class=\"params\">(SqQueue &amp;Q, QElemType &amp;e)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(Q.front == Q.rear) <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">  e = Q.base[Q.front];</span><br><span class=\"line\">  Q.front = (Q.front + <span class=\"number\">1</span>) % MAXQSIZE;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"理解递归调用和栈之间的关系\"><a href=\"#理解递归调用和栈之间的关系\" class=\"headerlink\" title=\"理解递归调用和栈之间的关系\"></a>理解递归调用和栈之间的关系</h3><ul>\n<li><p><strong>递归</strong>是一种重要的程序设计方法。简单地说，若在一个<u>函数、过程或数据结构</u>的定义中又应用了它自身，则这个<u>函数、过程、数据结构</u>被称为是递归定义的，简称递归。<br>它通常把一个大型的复杂问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的代码就可以描述出解题过程所需要的多次重复计算，<strong>大大减少了程序的代码量</strong>。但在通常情况下，<strong>它的效率并不是太高</strong>。</p>\n</li>\n<li><p>一个直接调用自己或通过一系列的调用语句间接地调用自己的函数，称做<strong>递归函数</strong>。</p>\n</li>\n<li><p>栈还有一个重要作用是在程序设计语言中实现递归。（可见栈可以用来实现递归）</p>\n</li>\n<li><p>阶乘函数</p>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Fact</mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>×</mo><mtext>Fact</mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>n</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">\\text{Fact}(n) =\n\\begin{cases}\n1 &amp; \\text{if } n = 0 \\\\\nn \\times \\text{Fact}(n - 1) &amp; \\text{if } n &gt; 0\n\\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Fact</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord text\"><span class=\"mord\">Fact</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">factorial</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// 0 的阶乘为 1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n * factorial(n - <span class=\"number\">1</span>); <span class=\"comment\">// 递归调用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Fibonacci数列</p>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Fibo</mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>Fibo</mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mtext>Fibo</mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">\\text{Fibo}(n) =\n\\begin{cases}\n0 &amp; \\text{if } n = 0 \\\\\n1 &amp; \\text{if } n = 1 \\\\\n\\text{Fibo}(n - 1) + \\text{Fibo}(n - 2) &amp; \\text{if } n &gt; 1\n\\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Fibo</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:4.32em;vertical-align:-1.91em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 316\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"/></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 316\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"/></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Fibo</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord text\"><span class=\"mord\">Fibo</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">fibonacci</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// F(0) = 0</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// F(1) = 1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fibonacci(n - <span class=\"number\">1</span>) + fibonacci(n - <span class=\"number\">2</span>); <span class=\"comment\">// 递归调用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Ackerman函数<br>Ackermann 函数的定义通常限制 m 和 n 为非负整数。</p>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Ack</mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>m</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>Ack</mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>m</mi><mo>&gt;</mo><mn>0</mn><mtext> and </mtext><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>Ack</mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mtext>Ack</mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo separator=\"true\">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>m</mi><mo>&gt;</mo><mn>0</mn><mtext> and </mtext><mi>n</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">\\text{Ack}(m, n) =\n\\begin{cases}\nn + 1 &amp; \\text{if } m = 0 \\\\\n\\text{Ack}(m - 1, 1) &amp; \\text{if } m &gt; 0 \\text{ and } n = 0 \\\\\n\\text{Ack}(m - 1, \\text{Ack}(m, n - 1)) &amp; \\text{if } m &gt; 0 \\text{ and } n &gt; 0\n\\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Ack</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:4.32em;vertical-align:-1.91em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 316\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"/></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 316\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"/></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Ack</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Ack</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">Ack</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">))</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span><span class=\"mord text\"><span class=\"mord\"> and </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span><span class=\"mord text\"><span class=\"mord\"> and </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ackermann</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            n = <span class=\"number\">1</span>; <span class=\"comment\">// 当 n 为 0 时，设置 n 为 1</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用，使用一个栈来存储 m 和 n 的值</span></span><br><span class=\"line\">            n = ackermann(m, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        m--; <span class=\"comment\">// 减小 m 的值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n + <span class=\"number\">1</span>; <span class=\"comment\">// 返回 n + 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>递归是程序设计中一个强有力的工具</p>\n<ol>\n<li>很多数学函数是递归定义的，比如以上三种；</li>\n<li>有的数据结构，如<strong>二叉树、广义表</strong>等，由于结构本身固有的递归特性，则它们的操作可递归地描述；</li>\n<li>还有一类问题，虽然问题本身没有明显的递归结构，但用递归求解比迭代求解更简单，如<strong>八皇后问题、Hanoi塔问题</strong>等。</li>\n</ol>\n</li>\n<li><p>八皇后问题<br>八皇后问题是一个经典的回溯算法问题，其目标是在 8×8 的国际象棋棋盘上放置 8 个皇后，使得它们彼此之间不能互相攻击。皇后可以在同一行、同一列或对角线上攻击其他皇后。因此，解决八皇后问题的关键在于找到一种摆放方式，使得任意两个皇后不在同一行、同一列或同一对角线上。</p>\n<p><strong>问题描述：</strong></p>\n<ol>\n<li>将 8 个皇后放置在 8×8 的棋盘上。</li>\n<li>每一行放置一个皇后，最终找到一种摆放方案满足互不攻击的条件。</li>\n</ol>\n<p><strong>算法思路：</strong></p>\n<ol>\n<li>从第 1 行开始，每一行尝试放置一个皇后。</li>\n<li>对于当前行的每一列，检查该位置是否安全（即，不与前面的皇后冲突）。</li>\n<li>如果安全，则将皇后放置在该位置，递归地求解下一行。</li>\n<li>如果不安全或无法为下一行找到合法位置，则回溯到上一步，尝试在该行的下一个位置放置皇后。</li>\n</ol>\n<p><strong>判定位置安全性：</strong></p>\n<ol>\n<li>检查该列是否已有皇后。</li>\n<li>检查主对角线和副对角线上是否已有皇后（即，使用两条对角线数组记录状态）。</li>\n</ol>\n<p><strong>C语言实现</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N 8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> board[N]; <span class=\"comment\">// board[i] 表示第 i 行皇后所在的列索引</span></span><br><span class=\"line\"><span class=\"type\">int</span> solution_count = <span class=\"number\">0</span>; <span class=\"comment\">// 解的计数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断当前位置是否安全</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">isSafe</span><span class=\"params\">(<span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查列冲突和对角线冲突</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board[i] == col || <span class=\"built_in\">abs</span>(board[i] - col) == <span class=\"built_in\">abs</span>(i - row)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 递归回溯求解八皇后问题</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">solve</span><span class=\"params\">(<span class=\"type\">int</span> row)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row == N) &#123;</span><br><span class=\"line\">        solution_count++;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Solution %d:\\n&quot;</span>, solution_count);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; N; j++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(board[i] == j ? <span class=\"string\">&quot; Q &quot;</span> : <span class=\"string\">&quot; . &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> col = <span class=\"number\">0</span>; col &lt; N; col++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSafe(row, col)) &#123;</span><br><span class=\"line\">            board[row] = col; <span class=\"comment\">// 放置皇后</span></span><br><span class=\"line\">            solve(row + <span class=\"number\">1</span>); <span class=\"comment\">// 递归放置下一行的皇后</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    solve(<span class=\"number\">0</span>); <span class=\"comment\">// 从第 0 行开始</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Total solutions: %d\\n&quot;</span>, solution_count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>运行结果</strong><br>每种解法都会在棋盘上打印出 Q 表示皇后的位置，. 表示空位。最后输出总共找到的解的数量。</p>\n</li>\n<li><p>Hanoi塔问题<br>汉诺塔问题（Tower of Hanoi）是一个经典的递归问题，起源于一个古老的传说。假设有三根柱子和一组大小不同（最小圆盘编号为1，最大圆盘编号为n）的圆盘，圆盘一开始按从大到小的顺序（下面大，上面小）堆叠在第一根柱子上。目标是将所有圆盘移动到第三根柱子上，并满足以下规则：</p>\n<ol>\n<li>每次只能移动一个圆盘。</li>\n<li>圆盘只能放在柱子上，并且必须保持小圆盘在大圆盘之上。</li>\n</ol>\n<p><strong>问题描述</strong><br>给定 n 个圆盘，设柱子分别为 A、B 和 C，将圆盘从 A 移动到 C，并使用 B 作为辅助柱子。<br><strong>递归思路</strong><br>汉诺塔问题可以用递归解决，通过将问题分解为子问题逐步求解：</p>\n<ol>\n<li>基本情况：当只有一个圆盘时，直接将圆盘从 A 移动到 C。</li>\n<li>递归情况：<br>  (1) 先将 n-1 个圆盘从 A 移动到 B（使用 C 作为辅助柱）。<br>  (2) 将第 n 个圆盘从 A 移动到 C。<br>  (3) 将 n-1 个圆盘从 B 移动到 C（使用 A 作为辅助柱）。<br>每次递归地解决 n-1 个圆盘的子问题，直到所有圆盘都被移动到目标柱上。<br><strong>C语言实现</strong><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">hanoi</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">char</span> from, <span class=\"type\">char</span> to, <span class=\"type\">char</span> aux)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Move disk 1 from %c to %c\\n&quot;</span>, from, to);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hanoi(n - <span class=\"number\">1</span>, from, aux, to);  <span class=\"comment\">// 将 n-1 个盘子从 from 移到 aux</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Move disk %d from %c to %c\\n&quot;</span>, n, from, to); <span class=\"comment\">// 将第 n 个盘子移到目标柱</span></span><br><span class=\"line\">    hanoi(n - <span class=\"number\">1</span>, aux, to, from);  <span class=\"comment\">// 将 n-1 个盘子从 aux 移到 to</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Enter the number of disks: &quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    hanoi(n, <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<strong>输出示例</strong><br>若n&#x3D;3<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Move disk 1 from A to C</span><br><span class=\"line\">Move disk 2 from A to B</span><br><span class=\"line\">Move disk 1 from C to B</span><br><span class=\"line\">Move disk 3 from A to C</span><br><span class=\"line\">Move disk 1 from B to A</span><br><span class=\"line\">Move disk 2 from B to C</span><br><span class=\"line\">Move disk 1 from A to C</span><br></pre></td></tr></table></figure>\n<strong>时间复杂度</strong><br>汉诺塔问题的时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2^n-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，因为每次增加一个盘子，操作数会翻倍。因此，汉诺塔问题适合用递归解法，但当 n 很大时计算量会非常大。</li>\n</ol>\n</li>\n<li><p>利用栈实现递归调用<br>（gpt给出的）<br><strong>递归调用的定义：</strong><br>递归是一种编程技术，其中一个函数直接或间接地调用自身。递归通常由两个部分组成：<strong>基例（终止条件）</strong>和<strong>递归步骤（即函数如何调用自身）</strong>。<br><strong>栈的作用：</strong><br>在计算机中，递归调用会使用调用栈（Call Stack）来管理函数调用。每当一个函数被调用时，系统会将<strong>该函数的状态（包括参数、局部变量、返回地址等）</strong>压入栈中。当函数执行完毕后，状态会从栈中弹出，<strong>并返回到调用该函数的位置</strong>。<br><strong>栈的增长：</strong><br>当递归调用发生时，每次调用都会在栈上增加一个新的帧（Frame）（调用栈中的每一层，它包含了特定函数调用的所有信息，如参数、局部变量、返回地址等）。如果递归深度较大，栈的空间可能会被耗尽，导致栈溢出（Stack Overflow）错误。<br><strong>基例的重要性：</strong><br>基例是防止无限递归的重要机制。如果没有适当的基例，递归会不断调用自身，直到耗尽栈空间。<br><strong>步骤：</strong></p>\n<ol>\n<li>初始化栈：创建一个栈，用于存储待处理的函数状态（如参数和局部变量）。</li>\n<li>入栈操作：将初始参数（或状态）压入栈中。</li>\n<li>循环处理：使用循环来处理栈中的元素：<br>(1) 从栈中弹出一个状态。<br>(2) 检查是否满足基例（一个或多个不需要再次递归的情况），如果满足，则处理结果（例如返回值）。<br>(3) 如果不满足基例，计算递归步骤，并将新的状态（参数）压入栈中。</li>\n<li>返回结果：继续处理直到栈为空，最终返回结果。<br>（书上的说法↓）<br>为了保证递归函数正确执行，系统需设立一个“递归工作栈”作为整个递归函数运行期间使用的数据存储区。每一层递归所需信息构成一个“工作记录”，其中包括所有的实在参数、所有的局部变量以及上一层的返回地址。每进入一层递归，就从栈顶弹出一个工作记录，则当前执行层的工作记录必是递归工作栈栈顶的工作记录，称这个记录为“活动记录”，并称指示活动记录的栈顶指针为“当前环境指针”。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"掌握栈和队列的经典应用\"><a href=\"#掌握栈和队列的经典应用\" class=\"headerlink\" title=\"掌握栈和队列的经典应用\"></a>掌握栈和队列的经典应用</h3><h4 id=\"栈的应用\"><a href=\"#栈的应用\" class=\"headerlink\" title=\"栈的应用\"></a>栈的应用</h4><ul>\n<li>递归调用↑</li>\n<li>数制转换<br>十进制→八进制：从低位到高位产生八进制数的各个数位，从高位到地位顺序输出。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">conversion</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  InitStack(S);</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;N);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(N) &#123;</span><br><span class=\"line\">    Push(S, N % <span class=\"number\">8</span>);</span><br><span class=\"line\">    N = N / <span class=\"number\">8</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!StackEmpty(S)) &#123;</span><br><span class=\"line\">    Pop(S, e);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>括号匹配的检验</li>\n</ul>\n<ol>\n<li>在算法中设置一个栈，每读入一个括号，若是右括号，则要么使置于栈顶的最急迫的期待得以消解，要么是不合法的情况；</li>\n<li>若是左括号，则作为一个新的更急迫的期待压入栈中，自然使原有的在栈中的所有未消解的期待的急迫性都降了一级。</li>\n<li>另外，在算法的开始和结束时，栈都应该是空的。</li>\n</ol>\n<ul>\n<li>行编辑程序<br>一个简单的行编辑程序的功能是：接受用户的从终端输入的程序或数据，并存入用户的数据区。由于用户在终端上进行输入时，不能保证不出差错，因此，若在编辑程序中，“每接受一个字符即存入用户数据区”的做法显然不是最恰当的。<br>较好的做法是，设立一个输入缓冲区，用以接受用户输入的一行字符，然后逐行存入用户数据区。允许用户输入出差错，并在发现有误时可以及时更正。<br>例如，当用户发现刚刚键入的一个字符是错的时，可补进一个退格符“#”，以表示前一个字符无效；如果发现当前键入的行内差错较多或难以补救，则可以键入一个退行符“@”，以表示当前行中的字符均无效。<br>例如，假设从终端接受了这样的两行字符：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whli##ilr#e(s#*s)</span><br><span class=\"line\">  outcha@putchar(*s++);</span><br></pre></td></tr></table></figure>\n则实际有效的是下列两行：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(*s)</span><br><span class=\"line\">  putchar(*s++);</span><br></pre></td></tr></table></figure>\n为此，可设这个输入缓冲区为一个栈结构，每当从终端接受了一个字符之后先作如下判别：</li>\n</ul>\n<ol>\n<li>如果它既不是退格符也不是退行符，则将该字符压入栈顶；</li>\n<li>如果是一个退格符，则从栈顶删去一个字符；</li>\n<li>如果它是一个退行符，则将字符栈清为空栈。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">LineEdit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  InitStack(S);</span><br><span class=\"line\">  ch = getchar(); <span class=\"comment\">//从终端接收第一个字符</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch!=EOF) &#123; <span class=\"comment\">//EOF为全文结束符</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch!=EOF&amp;&amp;ch!=<span class=\"string\">&#x27;\\n&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(ch) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;#&#x27;</span>: Pop(S, c); <span class=\"keyword\">break</span>; <span class=\"comment\">//仅当栈非空时退栈</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;@&#x27;</span>: ClearStack(S); <span class=\"keyword\">break</span>; <span class=\"comment\">//重置S为空栈</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>: Push(S,ch); <span class=\"keyword\">break</span>; <span class=\"comment\">//有效字符进栈，未考虑栈满情形</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ch = getchar(); <span class=\"comment\">//从终端接收下一个字符</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    将从栈底到栈顶的栈内字符传送至调用过程的数据区;</span><br><span class=\"line\">    ClearStack(S); <span class=\"comment\">//重置S为空栈</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ch != EOF) ch = getchar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  DestroyStack(S);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>迷宫求解<br>BFS用队列，DFS用栈。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//BFS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> directions[<span class=\"number\">4</span>][<span class=\"number\">2</span>] = &#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">isValid</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> n, <span class=\"type\">int</span> m, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; maze, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;&gt;&amp; visited)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class=\"number\">0</span> &amp;&amp; y &lt; m &amp;&amp; maze[x][y] == <span class=\"number\">0</span> &amp;&amp; !visited[x][y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">bfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; maze)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = maze.size();</span><br><span class=\"line\">    <span class=\"type\">int</span> m = maze[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;&gt; visited(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;(m, <span class=\"literal\">false</span>));</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Starting point</span></span><br><span class=\"line\">    q.push(&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    visited[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> steps = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> size = q.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> [x, y] = q.front();</span><br><span class=\"line\">            q.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Check if we reached the end</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x == n - <span class=\"number\">1</span> &amp;&amp; y == m - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> steps;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; dir : directions) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> nx = x + dir[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"type\">int</span> ny = y + dir[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isValid(nx, ny, n, m, maze, visited)) &#123;</span><br><span class=\"line\">                    q.push(&#123;nx, ny&#125;);</span><br><span class=\"line\">                    visited[nx][ny] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        steps++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// If there&#x27;s no path to the destination</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//DFS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> directions[<span class=\"number\">4</span>][<span class=\"number\">2</span>] = &#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; maze, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;&gt;&amp; visited, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> n, <span class=\"type\">int</span> m)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// If out of bounds or not a path, return false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || x &gt;= n || y &lt; <span class=\"number\">0</span> || y &gt;= m || maze[x][y] == <span class=\"number\">1</span> || visited[x][y]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check if reached destination</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == n - <span class=\"number\">1</span> &amp;&amp; y == m - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    visited[x][y] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; dir : directions) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> nx = x + dir[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> ny = y + dir[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dfs(maze, visited, nx, ny, n, m)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// Path found</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// No path found from this cell</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">hasPathDFS</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; maze)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = maze.size();</span><br><span class=\"line\">    <span class=\"type\">int</span> m = maze[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;&gt; visited(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;(m, <span class=\"literal\">false</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dfs(maze, visited, <span class=\"number\">0</span>, <span class=\"number\">0</span>, n, m);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//书上写的（用栈）</span></span><br><span class=\"line\"><span class=\"comment\">//看不下去，太乱了</span></span><br></pre></td></tr></table></figure></li>\n<li>表达式求值<br><code>#</code>是表达式的结束符，为了算法简洁，在表达式的最左边也虚设一个<code>#</code>构成整个表达式的一对括号。<br><code>(</code>和<code>)</code>相遇时，表示括号内的运算已经完成，<code>#</code>和<code>#</code>相遇时表示整个表达式求值完毕。<br>两个工作栈，OPTR寄存运算符，OPND寄存操作数或运算结果。<br>对算术表达式<code>3*(7-2)</code>求值<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th><code>OPTR</code> 栈</th>\n<th><code>OPND</code> 栈</th>\n<th>输入字符</th>\n<th>主要操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td><code>#</code></td>\n<td></td>\n<td><u>3</u>*(7-2)#</td>\n<td><code>PUSH(OPND, &#39;3&#39;)</code></td>\n</tr>\n<tr>\n<td>2</td>\n<td><code>#</code></td>\n<td>3</td>\n<td><u>*</u>(7-2)#</td>\n<td><code>PUSH(OPTR, &#39;*&#39;)</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>#*</code></td>\n<td>3</td>\n<td><u>(</u>7-2)#</td>\n<td><code>PUSH(OPTR, &#39;(&#39;)</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td><code>#*(</code></td>\n<td>3</td>\n<td><u>7</u>-2)#</td>\n<td><code>PUSH(OPND, &#39;7&#39;)</code></td>\n</tr>\n<tr>\n<td>5</td>\n<td><code>#*(</code></td>\n<td>3 7</td>\n<td><u>-</u>2)#</td>\n<td><code>PUSH(OPTR, &#39;-&#39;)</code></td>\n</tr>\n<tr>\n<td>6</td>\n<td><code>#*(-</code></td>\n<td>3 7</td>\n<td><u>2</u>)#</td>\n<td><code>PUSH(OPND, &#39;2&#39;)</code></td>\n</tr>\n<tr>\n<td>7</td>\n<td><code>#*(-</code></td>\n<td>3 7 2</td>\n<td><u>)</u>#</td>\n<td><code>OPERATE(&#39;7&#39;, &#39;-&#39;, &#39;2&#39;)</code></td>\n</tr>\n<tr>\n<td>8</td>\n<td><code>#*(</code></td>\n<td>3 5</td>\n<td>)#</td>\n<td><code>POP(OPTR)&#123;消去一对括号&#125;</code></td>\n</tr>\n<tr>\n<td>9</td>\n<td><code>#*</code></td>\n<td>3 5</td>\n<td>#</td>\n<td><code>OPERATE(&#39;3&#39;, &#39;*&#39;, &#39;5&#39;)</code></td>\n</tr>\n<tr>\n<td>10</td>\n<td><code>#</code></td>\n<td>15</td>\n<td>#</td>\n<td><code>RETURN(GETTOP(OPND))</code></td>\n</tr>\n</tbody></table>\n</li>\n<li>前缀、中缀、后缀表达式<br>前缀表达式：- + A * B - C D &#x2F; E F<br>中缀表达式：A + B * (C - D) - E &#x2F; F<br>后缀表达式：A B C D - * + E F &#x2F; -<br>前缀、中缀、后缀表达式分别对应表达式树的先序、中序、后序遍历。中缀表达式的括号是必须的。</li>\n</ul>\n<p><strong>转换中缀表达式为前缀表达式的步骤</strong></p>\n<ol>\n<li>首先构造一个运算符栈（也可放置括号），栈中的运算符（以括号为分界点）按照<strong>越往栈顶优先级不降低</strong>的原则进行排列。</li>\n<li>从右至左扫描中缀表达式，从右边第一个字符开始判断：<ul>\n<li>如果当前字符是数字，则分析到数字串的结尾并将数字串直接输出。</li>\n<li>如果是运算符，则比较优先级：<ul>\n<li>如果当前运算符的<strong>优先级大于等于</strong>栈顶运算符的优先级（当栈顶是括号时，直接入栈），则将运算符直接<strong>入栈</strong>。</li>\n<li>否则，将栈顶运算符出栈并输出，直到当前运算符的优先级大于等于栈顶运算符的优先级（当栈顶是括号时，直接入栈），再将当前运算符入栈。</li>\n</ul>\n</li>\n<li>如果是括号，则根据括号的方向进行处理：<ul>\n<li>如果是右括号，则直接入栈；</li>\n<li>否则，在遇到左括号之前，将所有的运算符全部出栈并输出；遇到右括号后将左右括号一起出栈（但不输出）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>重复步骤 2，直到扫描结束，将栈内剩余运算符全部出栈并输出。最后逆序输出字符串，中缀表达式就转换为前缀表达式了。</li>\n</ol>\n<p><strong>转换示例表格</strong><br>将中缀表达式“1+((2+3)*4)-5”转换为前缀表达式。</p>\n<table>\n<thead>\n<tr>\n<th>中缀表达式</th>\n<th>前缀表达式</th>\n<th>运算符栈（栈顶）</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5</td>\n<td>5</td>\n<td>空</td>\n<td><code>5</code> 是数字串，直接输出</td>\n</tr>\n<tr>\n<td>-</td>\n<td>5</td>\n<td>-</td>\n<td><code>-</code> 栈内无运算符，直接入栈</td>\n</tr>\n<tr>\n<td>)</td>\n<td>5</td>\n<td>- )</td>\n<td><code>)</code> 直接入栈</td>\n</tr>\n<tr>\n<td>4</td>\n<td>5 4</td>\n<td>- )</td>\n<td><code>4</code> 是数字串，直接输出</td>\n</tr>\n<tr>\n<td>*</td>\n<td>5 4</td>\n<td>- ) *</td>\n<td><code>*</code> 栈顶是括号，直接入栈</td>\n</tr>\n<tr>\n<td>)</td>\n<td>5 4</td>\n<td>- ) * )</td>\n<td><code>)</code> 直接入栈</td>\n</tr>\n<tr>\n<td>3</td>\n<td>5 4 3</td>\n<td>- ) * )</td>\n<td><code>3</code> 是数字串，直接输出</td>\n</tr>\n<tr>\n<td>+</td>\n<td>5 4 3</td>\n<td>- ) * ) +</td>\n<td><code>+</code> 栈顶是括号，直接入栈</td>\n</tr>\n<tr>\n<td>2</td>\n<td>5 4 3 2</td>\n<td>- ) * ) +</td>\n<td><code>2</code> 是数字串，直接输出</td>\n</tr>\n<tr>\n<td>(</td>\n<td>5 4 3 2 +</td>\n<td>- ) *</td>\n<td><code>(</code> 抵消栈中最后一个 <code>)</code> 并释放它们之间的 <code>+</code></td>\n</tr>\n<tr>\n<td>(</td>\n<td>5 4 3 2 + *</td>\n<td>-</td>\n<td><code>(</code> 抵消方法同上</td>\n</tr>\n<tr>\n<td>+</td>\n<td>5 4 3 2 + *</td>\n<td>- +</td>\n<td><code>+</code> 优先级大于等于栈顶运算符，直接入栈</td>\n</tr>\n<tr>\n<td>1</td>\n<td>5 4 3 2 + * 1</td>\n<td>- +</td>\n<td><code>1</code> 是数字串，直接输出</td>\n</tr>\n<tr>\n<td>空</td>\n<td>5 4 3 2 + * 1 + -</td>\n<td>空</td>\n<td>扫描结束，将栈内剩余运算符全部出栈并输出</td>\n</tr>\n<tr>\n<td>空</td>\n<td>- + 1 * + 2 3 4 5</td>\n<td>空</td>\n<td>逆序输出字符串</td>\n</tr>\n</tbody></table>\n<p><strong>中缀表达式转后缀表达式的步骤</strong></p>\n<ol>\n<li>设定一个运算符栈。</li>\n<li>假设表达式的结束符为 <code>#</code>，并预设运算符栈底元素也为 <code>#</code>。</li>\n<li>扫描表达式，按以下规则处理每个字符：<ul>\n<li>如果当前字符是操作数，则直接添加到后缀表达式中。</li>\n<li>如果当前字符是运算符且优先级<strong>高于</strong>栈顶运算符，则将其入栈；否则，将从栈顶开始，依次<strong>弹出</strong>栈中<strong>优先级高于或等于</strong>当前运算符的所有运算符，并加入后缀表达式，然后将当前运算符入栈。</li>\n<li>如果当前字符是结束符 <code>#</code>，则依次将栈中剩余的运算符出栈并添加到后缀表达式。</li>\n<li>如果当前字符是左括号 <code>(</code>，则直接入栈。</li>\n<li>如果当前字符是右括号 <code>)</code>，则从栈顶开始，依次将运算符出栈并添加到后缀表达式，直到遇到左括号 <code>(</code>。将 <code>(</code> 出栈，但不添加到后缀表达式中，然后继续扫描表达式。</li>\n</ul>\n</li>\n</ol>\n<p>（详见gpt和王道p93，书上没看到有写,2018真题有考小题目）</p>\n<h4 id=\"队列的应用\"><a href=\"#队列的应用\" class=\"headerlink\" title=\"队列的应用\"></a>队列的应用</h4><ul>\n<li><p>离散事件模拟<br>书p65。讲的是模拟银行业务，不同的客户在随机时间到达，如果前边有其他客户还在办理业务则需要等待。计算客户的平均逗留时间。<br>每个窗口都被设置成一个<strong>队列</strong>，客户到达银行时排队排在人数最少的那个队伍后边。总之就是用到了<strong>队列</strong>。</p>\n</li>\n<li><p>队列在层次遍历（BFS）中需要用到。</p>\n</li>\n<li><p>数据缓冲区</p>\n</li>\n<li><p>CPU（即中央处理器，它包括运算器和控制器）资源的竞争。在一个带有多终端的计算机系统上，有多个用户需要CPU各自运行自己的程序，它们分别通过各自的终端向操作系统提出占用CPU的请求。操作系统通常按照每个请求在时间上的先后顺序，把它们排成一个<strong>队列</strong>，每次把CPU分配给队首请求的用户使用。当相应的程序运行结束或用完规定的时间间隔后，令其出队，再把CPU分配给新的队首请求的用户使用。这样既满足每个用户的请求，又使CPU能够正常运行。</p>\n</li>\n<li><p>（看一下书p49、p65，王道里也有内容别忘记）</p>\n</li>\n</ul>\n<h2 id=\"五、二叉树、树和森林\"><a href=\"#五、二叉树、树和森林\" class=\"headerlink\" title=\"五、二叉树、树和森林\"></a>五、二叉树、树和森林</h2><h3 id=\"二叉树、树、森林的定义以及它们之间的异同点\"><a href=\"#二叉树、树、森林的定义以及它们之间的异同点\" class=\"headerlink\" title=\"二叉树、树、森林的定义以及它们之间的异同点\"></a>二叉树、树、森林的定义以及它们之间的异同点</h3><h4 id=\"二叉树的定义\"><a href=\"#二叉树的定义\" class=\"headerlink\" title=\"二叉树的定义\"></a>二叉树的定义</h4><ul>\n<li><strong>二叉树</strong>是一种树型结构，它的特点是每个结点至多只有两棵子树（即二叉树中不存在度大于2的结点），并且二叉树的子树有左右之分，其次序不能任意颠倒。</li>\n</ul>\n<ol>\n<li>二叉树可以为<strong>空</strong>，或由一个根节点和两个互不相交的分别被称为左子树和右子树的二叉树组成。</li>\n<li>二叉树是有序树。<br>  (1) 若将其左、右子树颠倒，则成为另一棵不同的二叉树。<br>  (2) 即使树中结点只有一棵子树，也要区分它是左子树还是右子树。</li>\n<li>二叉树与度为2的有序树的区别：<br>  (1) 度为2的树至少有3个结点（因为至少要有一个结点的度为2）。<br>  (2) 度为2的有序树，若某个结点只有一个孩子，则这个孩子就无须区分其左右次序；而二叉树不管孩子是否是2个，都区分次序。</li>\n<li>非空二叉树上的<strong>叶结点数</strong>等于<strong>度为2的结点数</strong>加<strong>1</strong>，即n0&#x3D;n2+1。<blockquote>\n<p><strong>证明：</strong> ①结点总数n&#x3D;n0+n1+n2 ②除根节点外，其余结点都有一个<strong>分支进入</strong>，n&#x3D;B（分支总数）+1 ③这些分支是由度为1或2的结点<strong>射出</strong>的，B&#x3D;n1+2n2 ④n0+n1+n2&#x3D;n1+2n2+1，则n0&#x3D;n2+1。</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li><strong>度为m的树和m叉树的区别</strong><br>度为m的树：至少有一个节点的度为m。<br>m叉树：允许所有节点的度&lt;m，可以是空树。</li>\n</ul>\n<table>\n  <tr>\n    <th style=\"text-align: center;\"></th>\n    <th style=\"text-align: center;\">度为 m</th>\n    <th style=\"text-align: center;\">m 叉树</th>\n  </tr>\n  <tr>\n    <td style=\"text-align: center;\">结点数与度数</td>\n    <td colspan=\"2\" style=\"text-align: center;\">结点数 = 度数 + 1</td>\n  </tr>\n  <tr>\n    <td style=\"text-align: center;\">第 i 层上结点数</td>\n    <td colspan=\"2\" style=\"text-align: center;\">第 i 层上最多有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>m</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">m^{i-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> 个结点（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i \\geq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7955em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>）</td>\n  </tr>\n  <tr>\n    <td style=\"text-align: center;\">高度为 h，总结点数</td>\n    <td colspan=\"2\" style=\"text-align: center;\">至多有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><msup><mi>m</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{m^h - 1}{m - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.4463em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0429em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.927em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 个结点</td>\n  </tr>\n  <tr>\n    <td style=\"text-align: center;\"><b>高度为 h，总结点数</b></td>\n    <td style=\"text-align: center;\"><b>至少有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo>+</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">h + m - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 个结点</b></td>\n    <td style=\"text-align: center;\"><b>至少有 h 个结点</b></td>\n  </tr>\n  <tr>\n    <td style=\"text-align: center;\">有 n 个结点，</td>\n    <td colspan=\"2\" style=\"text-align: center;\">最小高度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>m</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo></mrow><annotation encoding=\"application/x-tex\">\\lceil \\log_m(n(m - 1) + 1) \\rceil</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0573em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)⌉</span></span></span></span>，根据<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mfrac><mrow><msup><mi>m</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">n \\leq \\frac{m^h - 1}{m - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4463em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0429em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.927em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>得出</td>\n  </tr>\n  <tr>\n    <td style=\"text-align: center;\"><b>有 n 个结点，</b></td>\n    <td style=\"text-align: center;\"><b>最大高度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mi>m</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n - m + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></b></td>\n    <td style=\"text-align: center;\"><b>最大高度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mi>m</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n - m + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></b></td>\n  </tr>\n</table>\n\n<ul>\n<li><strong>满二叉树</strong><br>一棵高度为h，且有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^h-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9324em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>个结点的二叉树称为<strong>满二叉树</strong>，即二叉树中的每层都含有最多的结点。<br>（与树相似，二叉树也以递归的形式定义）</li>\n</ul>\n<ol>\n<li><strong>叶结点</strong>都集中在二叉树的<strong>最下一层</strong></li>\n<li>除叶结点外的每个结点<strong>度数均为2</strong>。</li>\n<li>可以按照层次对满二叉树进行编号，自上而下，自左向右。对于编号为<code>i</code>的结点，</li>\n</ol>\n<ul>\n<li><p>若有双亲（<code>i&gt;1</code>），则其<strong>双亲</strong>为<code>⌊i/2⌋</code></p>\n</li>\n<li><p>若有左孩子，则其<strong>左孩子</strong>为<code>2i</code></p>\n</li>\n<li><p>若有有孩子，则其<strong>右孩子</strong>为<code>2i+1</code></p>\n<img src=\"/articles/9eb01842/满二叉树.jpg\" />\n</li>\n<li><p><strong>完全二叉树</strong><br>高度为h，有n个结点的二叉树，<strong>当且仅当</strong>其每个结点都与高度为h的<strong>满二叉树</strong>中编号为1～n的结点<strong>一一对应</strong>时，称为<strong>完全二叉树</strong>。</p>\n</li>\n</ul>\n<ol>\n<li>若<code>i≤⌊n/2⌋</code>，则结点<code>i</code>为<strong>分支节点</strong>，<u>否则为叶结点</u>。</li>\n<li><strong>叶结点</strong>只可能在<strong>层次最大的两层上</strong>出现。对于<strong>最大层次</strong>中的叶结点，都依次排列在该层<strong>最左边</strong>的位置上。</li>\n<li>若有<strong>度为1的结点</strong>，则<strong>最多只可能有一个</strong>，且该结点<strong>只有左孩子</strong>而无右孩子。</li>\n<li><strong>按层次编号后</strong>，一旦出现某结点（编号为i）<strong>为叶结点或只有左孩子</strong>，则<strong>编号大于i</strong>的结点均为<strong>叶结点</strong>。</li>\n<li>若<strong>n为奇数</strong>，则<strong>每个分支节点都有左孩子和右孩子</strong>；若<strong>n为偶数</strong>，则编号最大的分支节点（编号为<strong>n&#x2F;2</strong>）<strong>只有左孩子</strong>，没有右孩子，其余分支节点左、右孩子都有。</li>\n<li>（和满二叉树一样）对于编号为<code>i</code>的结点，</li>\n</ol>\n<ul>\n<li>若有双亲（<code>i&gt;1</code>），则其<strong>双亲</strong>为<code>⌊i/2⌋</code></li>\n<li>若有左孩子，则其<strong>左孩子</strong>为<code>2i</code></li>\n<li>若有有孩子，则其<strong>右孩子</strong>为<code>2i+1</code></li>\n</ul>\n<ol start=\"7\">\n<li>结点<code>i</code>所在层次（深度）为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo></mrow><annotation encoding=\"application/x-tex\">\\lceil log_2(i+1) \\rceil</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)⌉</span></span></span></span>或<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>i</mi><mo stretchy=\"false\">⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\lfloor log_2 i \\rfloor + 1 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>（情况与8一致，证明见下）</li>\n<li>有n(n&gt;0)个结点的完全二叉树的高度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo></mrow><annotation encoding=\"application/x-tex\">\\lceil log_2(n+1) \\rceil</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)⌉</span></span></span></span>或<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\lfloor log_2 n \\rfloor + 1 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>。<blockquote>\n<p><strong>证明：</strong>①<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>&lt;</mo><mi>n</mi><mo>≤</mo><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn><mtext>或者</mtext><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>≤</mo><mi>n</mi><mo>&lt;</mo><msup><mn>2</mn><mi>h</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^{h-1}-1 &lt; n \\leq 2^h-1 或者 2^{h-1} \\leq n &lt; 2^h </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9324em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9324em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9851em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">或者</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span></span></span></span> ②得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>&lt;</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>≤</mo><msup><mn>2</mn><mi>h</mi></msup><mo separator=\"true\">,</mo><mtext>  </mtext><mi>h</mi><mo>−</mo><mn>1</mn><mo>&lt;</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>h</mi><mtext>  </mtext><mtext>或者得</mtext><mtext>  </mtext><mi>h</mi><mo>−</mo><mn>1</mn><mo>≤</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo>&lt;</mo><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">2^{h-1} &lt; n+1 \\leq 2^h, \\; h-1 &lt; log_2 (n+1) \\leq h \\; 或者得 \\; h-1 \\leq log_2 n &lt; h </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8882em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0435em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord cjk_fallback\">或者得</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span> ③∴ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo>=</mo><mo stretchy=\"false\">⌈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo><mtext>或者</mtext><mi>h</mi><mo>=</mo><mo stretchy=\"false\">⌊</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">h=\\lceil log_2(n+1) \\rceil 或者 h=\\lfloor log_2 n \\rfloor +1 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)⌉</span><span class=\"mord cjk_fallback\">或者</span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n</blockquote>\n</li>\n</ol>\n<img src=\"/articles/9eb01842/完全二叉树.jpg\" />\n\n<ul>\n<li><p><strong>二叉排序树</strong><br>左子树上所有结点的关键字均小于根节点的关键字；右子树上所有结点的关键字均大于根节点的关键字；左子树和右子树又各是一棵二叉排序树。</p>\n</li>\n<li><p><strong>平衡二叉树</strong><br>树中任意一个结点的左子树和右子树的高度之差的绝对值不超过1。</p>\n</li>\n<li><p><strong>正则二叉树</strong><br>树中每个分支结点都有2个孩子，即<strong>树中只有度为0或2的结点</strong>。</p>\n</li>\n</ul>\n<h4 id=\"树的定义\"><a href=\"#树的定义\" class=\"headerlink\" title=\"树的定义\"></a>树的定义</h4><ul>\n<li><p>树是n(n≥0)个结点的有限集。当n&#x3D;0时，称为<strong>空树</strong>。</p>\n</li>\n<li><p>在任意一个非空树中应满足：</p>\n<ol>\n<li>有且仅有一个特定的称为<strong>根</strong>的结点。</li>\n<li>当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交的有限集<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>T</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>T</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_1,T_2,\\cdots,T_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，其中每个集合本身又是一棵树，并且称为根的<strong>子树</strong>。</li>\n</ol>\n</li>\n<li><p>显然，树的定义是递归的（二叉树也是），即<strong>在树的定义中又用到了其自身</strong>，树是一种递归的数据结构。树作为一种<strong>逻辑结构</strong>，同时也是一种<strong>分层结构</strong>，具有以下两个特点：</p>\n<ol>\n<li>树的根节点没有前驱，除根节点外的所有结点有且只有一个前驱。</li>\n<li>树中所有结点都可以有零个或多个后继。</li>\n</ol>\n</li>\n<li><p>树适用于表示<strong>具有层次结构的数据</strong>。树中的某个结点（除根节点外）<strong>最多</strong>只和上一层的一个结点（即其父结点）有<strong>直接关系</strong>，根节点没有直接上层结点，因此在n个结点的树中有n-1条边。而树中每个结点与其下一层的0个或多个结点（即其孩子结点）都有直接关系。</p>\n</li>\n<li><p><strong>基本术语</strong></p>\n</li>\n</ul>\n<ol>\n<li>lll</li>\n</ol>\n<h3 id=\"二叉树的实现（包括）\"><a href=\"#二叉树的实现（包括）\" class=\"headerlink\" title=\"二叉树的实现（包括）\"></a>二叉树的实现（包括）</h3><blockquote>\n<p>理解二叉树采用顺序存储结构和链式存储结构的差异性</p>\n</blockquote>\n<h4 id=\"顺序存储结构\"><a href=\"#顺序存储结构\" class=\"headerlink\" title=\"顺序存储结构\"></a>顺序存储结构</h4><h4 id=\"链式存储结构\"><a href=\"#链式存储结构\" class=\"headerlink\" title=\"链式存储结构\"></a>链式存储结构</h4><h3 id=\"二叉树的遍历（四种）\"><a href=\"#二叉树的遍历（四种）\" class=\"headerlink\" title=\"二叉树的遍历（四种）\"></a>二叉树的遍历（四种）</h3><blockquote>\n<p>掌握二叉树的四种遍历，并具有能够依赖遍历完成对二叉树进行操作的能力</p>\n</blockquote>\n<h3 id=\"二叉树结构下的应用及扩展（例如）\"><a href=\"#二叉树结构下的应用及扩展（例如）\" class=\"headerlink\" title=\"二叉树结构下的应用及扩展（例如）\"></a>二叉树结构下的应用及扩展（例如）</h3><blockquote>\n<p>掌握利用二叉树及其扩展下的检索技术；掌握Huffman编码、堆的<strong>实现及应用</strong></p>\n</blockquote>\n<h4 id=\"二叉检索树\"><a href=\"#二叉检索树\" class=\"headerlink\" title=\"二叉检索树\"></a>二叉检索树</h4><h4 id=\"2-3-4树\"><a href=\"#2-3-4树\" class=\"headerlink\" title=\"2-3-4树\"></a>2-3-4树</h4><h4 id=\"B树\"><a href=\"#B树\" class=\"headerlink\" title=\"B树\"></a>B树</h4><h4 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h4><h4 id=\"Huffman编码\"><a href=\"#Huffman编码\" class=\"headerlink\" title=\"Huffman编码\"></a>Huffman编码</h4><h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><h3 id=\"平衡二叉树的定义\"><a href=\"#平衡二叉树的定义\" class=\"headerlink\" title=\"平衡二叉树的定义\"></a>平衡二叉树的定义</h3><h3 id=\"平衡因子的定义\"><a href=\"#平衡因子的定义\" class=\"headerlink\" title=\"平衡因子的定义\"></a>平衡因子的定义</h3><h3 id=\"平衡二叉树的旋转操作\"><a href=\"#平衡二叉树的旋转操作\" class=\"headerlink\" title=\"平衡二叉树的旋转操作\"></a>平衡二叉树的旋转操作</h3><h3 id=\"树和森林的存储结构\"><a href=\"#树和森林的存储结构\" class=\"headerlink\" title=\"树和森林的存储结构\"></a>树和森林的存储结构</h3><blockquote>\n<p>掌握树、森林能够采用的各种存储方式的差异性</p>\n</blockquote>\n<h3 id=\"树和森林的遍历\"><a href=\"#树和森林的遍历\" class=\"headerlink\" title=\"树和森林的遍历\"></a>树和森林的遍历</h3><blockquote>\n<p>掌握树、森林在遍历方面和二叉树的不同以及相关性</p>\n</blockquote>\n<h3 id=\"森林与二叉树的转换\"><a href=\"#森林与二叉树的转换\" class=\"headerlink\" title=\"森林与二叉树的转换\"></a>森林与二叉树的转换</h3><h3 id=\"森林结构的应用（例如）\"><a href=\"#森林结构的应用（例如）\" class=\"headerlink\" title=\"森林结构的应用（例如）\"></a>森林结构的应用（例如）</h3><h4 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h4><blockquote>\n<p>理解并查集的意义，以及掌握并查集的基本操作的实现</p>\n</blockquote>\n<h2 id=\"六、图\"><a href=\"#六、图\" class=\"headerlink\" title=\"六、图\"></a>六、图</h2><h3 id=\"图的定义（包括）\"><a href=\"#图的定义（包括）\" class=\"headerlink\" title=\"图的定义（包括）\"></a>图的定义（包括）</h3><h4 id=\"完全图\"><a href=\"#完全图\" class=\"headerlink\" title=\"完全图\"></a>完全图</h4><h4 id=\"连通图\"><a href=\"#连通图\" class=\"headerlink\" title=\"连通图\"></a>连通图</h4><h4 id=\"简单路径\"><a href=\"#简单路径\" class=\"headerlink\" title=\"简单路径\"></a>简单路径</h4><h4 id=\"有向图\"><a href=\"#有向图\" class=\"headerlink\" title=\"有向图\"></a>有向图</h4><h4 id=\"无向图\"><a href=\"#无向图\" class=\"headerlink\" title=\"无向图\"></a>无向图</h4><h4 id=\"无环图\"><a href=\"#无环图\" class=\"headerlink\" title=\"无环图\"></a>无环图</h4><h4 id=\"等\"><a href=\"#等\" class=\"headerlink\" title=\"等\"></a>等</h4><h3 id=\"图和二叉树、树和森林这种结构之间的异同点（明确理解）\"><a href=\"#图和二叉树、树和森林这种结构之间的异同点（明确理解）\" class=\"headerlink\" title=\"图和二叉树、树和森林这种结构之间的异同点（明确理解）\"></a>图和二叉树、树和森林这种结构之间的异同点（明确理解）</h3><h3 id=\"图的存储（包括）\"><a href=\"#图的存储（包括）\" class=\"headerlink\" title=\"图的存储（包括）\"></a>图的存储（包括）</h3><h4 id=\"邻接矩阵\"><a href=\"#邻接矩阵\" class=\"headerlink\" title=\"邻接矩阵\"></a>邻接矩阵</h4><h4 id=\"邻接表\"><a href=\"#邻接表\" class=\"headerlink\" title=\"邻接表\"></a>邻接表</h4><h4 id=\"差异性\"><a href=\"#差异性\" class=\"headerlink\" title=\"差异性\"></a>差异性</h4><h3 id=\"图的基本操作\"><a href=\"#图的基本操作\" class=\"headerlink\" title=\"图的基本操作\"></a>图的基本操作</h3><h3 id=\"图的两种遍历\"><a href=\"#图的两种遍历\" class=\"headerlink\" title=\"图的两种遍历\"></a>图的两种遍历</h3><h4 id=\"广度优先遍历\"><a href=\"#广度优先遍历\" class=\"headerlink\" title=\"广度优先遍历\"></a>广度优先遍历</h4><h4 id=\"深度优先遍历\"><a href=\"#深度优先遍历\" class=\"headerlink\" title=\"深度优先遍历\"></a>深度优先遍历</h4><h3 id=\"图的基本应用（包括）\"><a href=\"#图的基本应用（包括）\" class=\"headerlink\" title=\"图的基本应用（包括）\"></a>图的基本应用（包括）</h3><h4 id=\"最小支撑树\"><a href=\"#最小支撑树\" class=\"headerlink\" title=\"最小支撑树\"></a>最小支撑树</h4><ul>\n<li><p><strong>Prim算法</strong></p>\n</li>\n<li><p><strong>Kruskal算法</strong></p>\n</li>\n</ul>\n<h4 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h4><ul>\n<li><p><strong>Dijkstra算法</strong></p>\n</li>\n<li><p><strong>BellmanFord算法</strong></p>\n</li>\n<li><p><strong>Floyd算法</strong></p>\n</li>\n</ul>\n<h4 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h4><h4 id=\"关键路径\"><a href=\"#关键路径\" class=\"headerlink\" title=\"关键路径\"></a>关键路径</h4><h2 id=\"七、查找\"><a href=\"#七、查找\" class=\"headerlink\" title=\"七、查找\"></a>七、查找</h2><blockquote>\n<p>查找的定义和与查找有关的算法：顺序查找法、折半查找法、散列（Hash）技术。</p>\n</blockquote>\n<h3 id=\"理解查找的定义\"><a href=\"#理解查找的定义\" class=\"headerlink\" title=\"理解查找的定义\"></a>理解查找的定义</h3><ol>\n<li>查找。在数据集合中寻找满足某种条件的数据元素的过程称为<strong>查找</strong>。</li>\n<li>在数据集合中找了满足条件的数据元素为<strong>查找成功</strong>，否则为<strong>查找失败</strong>。</li>\n<li>用于查找的数据集合为<strong>查找表</strong>，它是由同一类型的数据元素（或记录）组成的。对查找表的<strong>常见操作</strong>有：① 查询符合条件的数据元素；② 插入、删除数据元素。</li>\n<li>静态查找表。若一个查找表的操作只涉及查找操作，则无须动态地修改查找表，此类查找表称为<strong>静态查找表</strong>。与此对应，需要动态地插入或删除的查找表称为<strong>动态查找表</strong>。适合静态查找表的<strong>查找方法</strong>有顺序查找、折半查找、散列查找等；适合动态查找表的<strong>查找方法</strong>有二叉排序树的查找、散列查找等。</li>\n<li>关键字。数据元素中的唯一标识该元素的某个数据项的值，使用基于关键字的查找，查找结果应该是唯一的。例如，在有一个学生元素构成的数据集合中，学生元素中“学号”这一数据项的值唯一地标识一名学生。</li>\n<li>平均查找长度。在查找过程中，一次查找的长度是指需要比较的关键字次数，而平均查找长度则是所有查找过程中进行关键字的比较次数的平均值，其数学定义为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>P</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">ASL=\\sum\\limits_{i=1}^{n}P_i C_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3291em;vertical-align:-0.9777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. 式中，n是查找表的长度（因为每一个元素都要查找，所有都得考虑进去），Pi是查找第i个数据元素的概率，<strong>一般认为每个数据元素的查找概率相等</strong>，即Pi&#x3D;1&#x2F;n；Ci是找到第i个数据元素所需进行的<strong>比较次数</strong>。平均查找长度是<strong>衡量算法效率</strong>的<strong>最主要</strong>指标。</li>\n<li><strong>有序线性表</strong>的<strong>顺序查找</strong>中的线性表可以是<strong>链式存储结构</strong>，而<strong>折半查找</strong>中的线性表只能是顺序存储结构。</li>\n</ol>\n<h3 id=\"衡量查找算法的一些指标：三个查找长度\"><a href=\"#衡量查找算法的一些指标：三个查找长度\" class=\"headerlink\" title=\"衡量查找算法的一些指标：三个查找长度\"></a>衡量查找算法的一些指标：三个查找长度</h3><h4 id=\"顺序查找法\"><a href=\"#顺序查找法\" class=\"headerlink\" title=\"顺序查找法\"></a>顺序查找法</h4><ul>\n<li><strong>一般无序线性表</strong><blockquote>\n<p>从后往前找，a[0]&#x3D;x作为哨兵，若查找不成功，说明是从n比较到0都没找到，即比较了n+1次。</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>平均查找长度（成功不成功都计入，每个概率为1&#x2F;2n）<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>n</mi></mrow></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>3</mn><mn>4</mn></mfrac><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ASL=\\frac{1}{2n}\\sum\\limits_{i=1}^{n}(n-1+1)+\\frac{1}{2}(n+1)=\\frac{3}{4}(n+1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3291em;vertical-align:-0.9777em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>成功查找的（平均）查找长度  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mo>∑</mo><msup><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msup><msub><mi>P</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mo>∑</mo><msup><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msup><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">ASL=\\sum\\limits{i=1}^{n}P_i C_i=\\frac{1}{n}\\sum\\limits{i=1}^{n}(n-i+1)=\\frac{n+1}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7138em;\"><span style=\"top:-3.1124em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7138em;\"><span style=\"top:-3.1124em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n<li>不成功查找的（平均）查找长度  ASL&#x3D;n+1</li>\n</ol>\n<ul>\n<li><strong>有序线性表</strong></li>\n</ul>\n<ol>\n<li>平均查找长度</li>\n<li>成功查找的（平均）查找长度<br> 有序的结果和一般线性表的顺序查找一样，<strong>但是！！！要注意！！！这里的查找顺序若是从前往后，就不是和上面一样的结果！！！</strong></li>\n<li>不成功查找的（平均）查找长度<blockquote>\n<p>表L是按关键字从小到大排列的，查找的顺序是从前往后。假设有n个结点（这些是查找成功的结点），虚构n+1个查找失败结点。Pi为1&#x2F;(n+1)，1,2,…,n,n为查找失败时的比较次数。</p>\n</blockquote>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo>+</mo><mi>n</mi></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo>=</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>+</mo><mfrac><mi>n</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">ASL=\\frac{1+2+\\cdots+n+n}{n+1}=\\frac{n}{2}+\\frac{n}{n+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2484em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">2</span><span class=\"mbin mtight\">+</span><span class=\"minner mtight\">⋯</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0987em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n</ol>\n<h4 id=\"折半查找法（二分查找）\"><a href=\"#折半查找法（二分查找）\" class=\"headerlink\" title=\"折半查找法（二分查找）\"></a>折半查找法（二分查找）</h4><ol>\n<li>平均查找长度</li>\n<li>成功查找的（平均）查找长度<blockquote>\n<p>等概率，Pi为1&#x2F;n。树上的每个结点都要考虑进去，每个结点的比较次数为它的层数。第一层次数为1（层高），有2^0（2^(j-1)）个结点要计算；第二层次数为2（层高），有2^1（2^(j-1)）个结点要计算……直到最后一层，这里不一定是满二叉树，但就按照满二叉树近似计算了。</p>\n</blockquote>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mo stretchy=\"false\">(</mo><mn>1</mn><mo>×</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>×</mo><mn>2</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>h</mi><mo>×</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mi>n</mi></mfrac><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn><mo>≈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">ASL=\\frac{1}{n}(1×1+2×2+\\cdots+h×2^{h-1})=\\frac{n+1}{n}log_2(n+1)-1≈log_2(n+1)-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>\n<blockquote>\n<p>这里记一下最终结果！（因为不知道咋算出来的）<br>另外，h为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo></mrow><annotation encoding=\"application/x-tex\">\\lceil log_2(n+1) \\rceil</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)⌉</span></span></span></span>.</p>\n</blockquote>\n</li>\n<li>不成功查找的（平均）查找长度<blockquote>\n<p>虚构出方形结点，挂到圆形结点的下方。如果查找失败，即为方形结点，但是次数是上面那个圆形结点的层数。比如二叉树第3层下面总共挂了4个方形结点，第4层挂了8个方形节点：<br>ASL&#x3D;(3×4+4×8)&#x2F;12&#x3D;11&#x2F;3</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"散列（Hash）查找法\"><a href=\"#散列（Hash）查找法\" class=\"headerlink\" title=\"散列（Hash）查找法\"></a>散列（Hash）查找法</h4><ol>\n<li>平均查找长度</li>\n<li>成功查找的（平均）查找长度</li>\n<li>不成功查找的（平均）查找长度</li>\n</ol>\n<h3 id=\"掌握顺序查找法和折半查找法，并理解二者之间的异同点\"><a href=\"#掌握顺序查找法和折半查找法，并理解二者之间的异同点\" class=\"headerlink\" title=\"掌握顺序查找法和折半查找法，并理解二者之间的异同点\"></a>掌握顺序查找法和折半查找法，并理解二者之间的异同点</h3><h3 id=\"掌握散列技术（包括）\"><a href=\"#掌握散列技术（包括）\" class=\"headerlink\" title=\"掌握散列技术（包括）\"></a>掌握散列技术（包括）</h3><h4 id=\"散列函数\"><a href=\"#散列函数\" class=\"headerlink\" title=\"散列函数\"></a>散列函数</h4><h4 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h4><h4 id=\"散列冲突的发生及其解决方法\"><a href=\"#散列冲突的发生及其解决方法\" class=\"headerlink\" title=\"散列冲突的发生及其解决方法\"></a>散列冲突的发生及其解决方法</h4><h4 id=\"负载因子\"><a href=\"#负载因子\" class=\"headerlink\" title=\"负载因子\"></a>负载因子</h4><h3 id=\"理解不同查找技术的优缺点\"><a href=\"#理解不同查找技术的优缺点\" class=\"headerlink\" title=\"理解不同查找技术的优缺点\"></a>理解不同查找技术的优缺点</h3><h2 id=\"八、排序\"><a href=\"#八、排序\" class=\"headerlink\" title=\"八、排序\"></a>八、排序</h2><h3 id=\"排序的定义（包括）\"><a href=\"#排序的定义（包括）\" class=\"headerlink\" title=\"排序的定义（包括）\"></a>排序的定义（包括）</h3><h4 id=\"内排序\"><a href=\"#内排序\" class=\"headerlink\" title=\"内排序\"></a>内排序</h4><h4 id=\"外排序\"><a href=\"#外排序\" class=\"headerlink\" title=\"外排序\"></a>外排序</h4><h4 id=\"内排序和外排序的区别\"><a href=\"#内排序和外排序的区别\" class=\"headerlink\" title=\"内排序和外排序的区别\"></a>内排序和外排序的区别</h4><h4 id=\"排序的稳定性\"><a href=\"#排序的稳定性\" class=\"headerlink\" title=\"排序的稳定性\"></a>排序的稳定性</h4><h3 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h3><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><h3 id=\"简单选择排序\"><a href=\"#简单选择排序\" class=\"headerlink\" title=\"简单选择排序\"></a>简单选择排序</h3><h3 id=\"Shell排序\"><a href=\"#Shell排序\" class=\"headerlink\" title=\"Shell排序\"></a>Shell排序</h3><h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><h3 id=\"时空复杂度和稳定性\"><a href=\"#时空复杂度和稳定性\" class=\"headerlink\" title=\"时空复杂度和稳定性\"></a>时空复杂度和稳定性</h3><blockquote>\n<p>对直接插入排序、冒泡排序、简单选择排序、Shell排序、快速排序、堆排序、归并排序、基数排序这些算法，掌握其在时间复杂度、空间复杂度以及是否稳定等方面的特点</p>\n</blockquote>\n<h3 id=\"K路归并排序\"><a href=\"#K路归并排序\" class=\"headerlink\" title=\"K路归并排序\"></a>K路归并排序</h3><h4 id=\"k路归并排序的外排序算法\"><a href=\"#k路归并排序的外排序算法\" class=\"headerlink\" title=\"k路归并排序的外排序算法\"></a>k路归并排序的外排序算法</h4><h3 id=\"选择合适排序算法\"><a href=\"#选择合适排序算法\" class=\"headerlink\" title=\"选择合适排序算法\"></a>选择合适排序算法</h3><blockquote>\n<p>具有在不同的应用需求下，能够依据各种排序算法的特点选择合适排序算法的能力</p>\n</blockquote>\n<h2 id=\"九、矩阵和串\"><a href=\"#九、矩阵和串\" class=\"headerlink\" title=\"九、矩阵和串\"></a>九、矩阵和串</h2><h3 id=\"矩阵和串的定义\"><a href=\"#矩阵和串的定义\" class=\"headerlink\" title=\"矩阵和串的定义\"></a>矩阵和串的定义</h3><h3 id=\"特殊矩阵的压缩存储\"><a href=\"#特殊矩阵的压缩存储\" class=\"headerlink\" title=\"特殊矩阵的压缩存储\"></a>特殊矩阵的压缩存储</h3><h3 id=\"稀疏矩阵的三元组表示法以及相应的操作\"><a href=\"#稀疏矩阵的三元组表示法以及相应的操作\" class=\"headerlink\" title=\"稀疏矩阵的三元组表示法以及相应的操作\"></a>稀疏矩阵的三元组表示法以及相应的操作</h3><h3 id=\"多维数组和一维数组的映射\"><a href=\"#多维数组和一维数组的映射\" class=\"headerlink\" title=\"多维数组和一维数组的映射\"></a>多维数组和一维数组的映射</h3><h3 id=\"串的模式匹配\"><a href=\"#串的模式匹配\" class=\"headerlink\" title=\"串的模式匹配\"></a>串的模式匹配</h3><h4 id=\"Brute-Force\"><a href=\"#Brute-Force\" class=\"headerlink\" title=\"Brute-Force\"></a>Brute-Force</h4><h4 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h4>","more":"<h2 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h2><blockquote>\n<p>建议另外过一遍 <a href=\"../../articles/fc6ebebe.html\">严蔚敏课笔记</a><br>注意：代码缩进本该为4个空格，这里为了美观和方便，缩进是2个空格。</p>\n</blockquote>\n<h4 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h4><ul>\n<li>数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。数据是计算机程序加工的原料。</li>\n</ul>\n<h4 id=\"数据元素\"><a href=\"#数据元素\" class=\"headerlink\" title=\"数据元素\"></a>数据元素</h4><ul>\n<li>数据元素是数据的<strong>基本单位</strong>，通常作为一个整体进行考虑和处理。</li>\n</ul>\n<h4 id=\"数据项\"><a href=\"#数据项\" class=\"headerlink\" title=\"数据项\"></a>数据项</h4><ul>\n<li>一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分割的<strong>最小单位</strong>。</li>\n<li>例如，学生记录就是一个数据元素，它由学号、姓名、性别等数据项组成。</li>\n</ul>\n<h4 id=\"数据对象\"><a href=\"#数据对象\" class=\"headerlink\" title=\"数据对象\"></a>数据对象</h4><ul>\n<li>数据对象是具有相同性质的数据元素的集合，是数据的一个子集。</li>\n<li>例如，整数数据对象是集合 N&#x3D;{0,±1,±2,…}。</li>\n</ul>\n<h4 id=\"数据、数据元素、数据项之间的关系\"><a href=\"#数据、数据元素、数据项之间的关系\" class=\"headerlink\" title=\"数据、数据元素、数据项之间的关系\"></a>数据、数据元素、数据项之间的关系</h4><ul>\n<li>数据-&gt;数据对象-&gt;数据元素-&gt;数据项</li>\n<li>两张表-&gt;数据；其中一张表-&gt;数据对象；表中每一行（记录）-&gt;数据元素；每条记录的每个属性-&gt;数据项</li>\n</ul>\n<h4 id=\"数据结构的定义\"><a href=\"#数据结构的定义\" class=\"headerlink\" title=\"数据结构的定义\"></a>数据结构的定义</h4><ul>\n<li>数据结构是相互之间存在一种或多种特定<strong>关系</strong>的<strong>数据元素</strong>的集合。在任何问题中，数据元素都不是孤立存在的，它们之间存在某种关系，这种数据元素相互之间的关系称为结构（Structure）。</li>\n</ul>\n<h4 id=\"数据结构的三要素\"><a href=\"#数据结构的三要素\" class=\"headerlink\" title=\"数据结构的三要素\"></a>数据结构的三要素</h4><ul>\n<li>数据结构包括三方面的内容：<strong>逻辑结构</strong>、<strong>存储结构</strong>和<strong>数据的运算</strong>。</li>\n<li>数据的<strong>逻辑结构</strong>和<strong>存储结构</strong>是密不可分的两个方面，一个<strong>算法的设计</strong>取决于所选定的<strong>逻辑结构</strong>，而<strong>算法的实现</strong>依赖于所采用的<strong>存储结构</strong>。</li>\n</ul>\n<h4 id=\"数据的逻辑结构\"><a href=\"#数据的逻辑结构\" class=\"headerlink\" title=\"数据的逻辑结构\"></a>数据的逻辑结构</h4><ul>\n<li>逻辑结构是指数据元素之间的<strong>逻辑关系</strong>，即从逻辑关系上描述数据。它与数据的存储无关，是独立于计算机的。</li>\n<li>数据的逻辑结构分为<strong>线性结构</strong>和<strong>非线性结构</strong>，<strong>线性表</strong>是典型的线性结构，<strong>集合、树和图</strong>是典型的非线性结构。</li>\n</ul>\n<ol>\n<li><strong>集合</strong>。结构中的元素之间除“同属一个集合”外，别无其它关系。</li>\n<li><strong>线性结构</strong>。结构中的数据元素之间只存在一对一的关系。</li>\n<li><strong>树形结构</strong>。结构中的数据元素之间存在一对多的关系。</li>\n<li><strong>图状结构</strong>或<strong>网状结构</strong>。结构中的数据元素之间存在多对多的关系。</li>\n</ol>\n<h4 id=\"数据的物理结构\"><a href=\"#数据的物理结构\" class=\"headerlink\" title=\"数据的物理结构\"></a>数据的物理结构</h4><ul>\n<li><code>存储结构</code>是指数据结构在计算机中的表示（又称<strong>映像</strong>），也称<code>物理结构</code>。它包括<strong>数据元素</strong>的表示和<strong>关系</strong>的表示。数据的存储结构是计算机语言实现的逻辑结构，它依赖于计算机语言。数据的存储结构主要有<strong>顺序存储、链式存储、索引存储和散列存储</strong>。</li>\n</ul>\n<ol>\n<li><strong>顺序存储</strong>。把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。<br>其<strong>优点</strong>是可以实现<u>随机存取</u>，每个元素占用最少的存储空间；<strong>缺点</strong>是只能使用相邻的一整块存储单元，因此可能产生较多的外部碎片。</li>\n<li><strong>链式存储</strong>。不要求逻辑上相邻的元素在物理位置上也相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系。<br>其<strong>优点</strong>是<u>不会出现碎片现象</u>，能充分利用所有存储单元；<strong>缺点</strong>是<u>每个元素因存储指针而占用额外的存储空间</u>，且只能实现顺序存取。</li>\n<li><strong>索引存储</strong>。在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为<strong>索引项</strong>，索引项的一般形式是（关键字，地址）。<br>其<strong>优点</strong>是<u>检索速度快</u>；<strong>缺点</strong>是<u>附加的索引表额外占用存储空间</u>。另外，增加和删除数据时也要修改索引表，因而<u>会花费较多的时间</u>。</li>\n<li><strong>散列存储</strong>。根据元素的关键字直接计算出该元素的存储地址，又称<strong>哈希（Hash）存储</strong>。<br>其<strong>优点</strong>时<u>检索、增加和删除结点的操作都很快</u>；<strong>缺点</strong>是若散列函数不好，则可能出现<u>元素存储单元的冲突</u>，而解决冲突<u>会增加时间和空间开销</u>。</li>\n</ol>\n<h4 id=\"数据的运算的定义\"><a href=\"#数据的运算的定义\" class=\"headerlink\" title=\"数据的运算的定义\"></a>数据的运算的定义</h4><ul>\n<li>（王道）施加在数据上的运算包括运算的<strong>定义</strong>和<strong>实现</strong>。运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，指出运算的具体操作步骤。</li>\n<li>（博客）数据的运算是指对数据实施的操作，数据的运算最终需要在对应的存储结构上用算法实现，所以数据运算分为运算的定义和运算的实现两个层面。<br>运算的定义是对运算功能的描述，是抽象的，是基于逻辑的。<br>运算的实现是程序员完成运算的实现算法，是具体的，是基于存储结构的。</li>\n</ul>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><ul>\n<li>数据类型是一个值的集合和定义在集合上的一组操作的总称。</li>\n</ul>\n<ol>\n<li><strong>原子类型</strong>。其值不可再分的数据类型。</li>\n<li><strong>结构类型</strong>。其值可以再分解为若干成分（分量）的数据类型。</li>\n<li><code>抽象数据类型</code>。一个数学模型及定义在该数学模型上的一组操作。它通常是对数据的某种抽象，定义了数据的取值范围及其结构形式，以及对数据操作的集合。</li>\n</ol>\n<ul>\n<li><code>抽象数据类型</code>的三个组成部分：数据对象、数据关系和基本操作。</li>\n<li>（蓝皮书，定义）<code>抽象数据类型</code>是一种构造数据类型，它具有三大特征，<strong>信息隐蔽、数据封装、使用与实现相分离</strong>。</li>\n</ul>\n<h4 id=\"数据类型、抽象数据类型和数据结构之间的关系\"><a href=\"#数据类型、抽象数据类型和数据结构之间的关系\" class=\"headerlink\" title=\"数据类型、抽象数据类型和数据结构之间的关系\"></a>数据类型、抽象数据类型和数据结构之间的关系</h4><ul>\n<li><strong>数据类型</strong>是一个值的集合和定义在此集合上的一组操作的总称。（值+操作）</li>\n<li><strong>抽象数据类型（ADT）</strong>是一个数学模型及定义在该数学模型上的一组操作。（数学模型+操作）它通常是对数据的某种抽象，定义了数据的取值范围及其结构形式，以及对数据操作的集合。（数据对象+数据关系+基本操作）</li>\n<li><strong>数据结构</strong>是相互之间存在一种或多种特定<strong>关系</strong>的<strong>数据元素</strong>的集合。（数据元素+数据关系）</li>\n</ul>\n<h2 id=\"二、算法和算法分析\"><a href=\"#二、算法和算法分析\" class=\"headerlink\" title=\"二、算法和算法分析\"></a>二、算法和算法分析</h2><h3 id=\"算法的定义\"><a href=\"#算法的定义\" class=\"headerlink\" title=\"算法的定义\"></a>算法的定义</h3><ul>\n<li>算法是对特定问题求解步骤的一种描述，它是指令的有限序列，其中的每一条指令表示一个或多个操作。</li>\n<li>算法和程序的区别：<ol>\n<li>算法是描述一个问题求解的步骤序列，而程序是算法在特定计算机上的实现。</li>\n<li>算法不依赖于计算机，而程序依赖于特定的计算机和特定的编程语言。</li>\n<li>算法必须满足五个特性，即有穷性、确定性、可行性、有输入、有输出，而程序可能不满足有穷性。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"算法的特性（五个）\"><a href=\"#算法的特性（五个）\" class=\"headerlink\" title=\"算法的特性（五个）\"></a>算法的特性（五个）</h3><ol>\n<li><strong>有穷性</strong>。一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。</li>\n<li><strong>确定性</strong>。算法中每条指令必须有确切的含义，对于相同的输入只能得出相同的输出。</li>\n<li><strong>可行性</strong>。算法中描述的操作都可以通过 已经实现的基本运算 执行有限次来实现。</li>\n<li><strong>输入</strong>。一个算法有零个或多个输入，这些输入取自于某个特定的对象的集合。</li>\n<li><strong>输出</strong>。一个算法有一个或多个输出，这些输出是与输入有着某些特定关系的量。</li>\n</ol>\n<h3 id=\"算法设计的要求\"><a href=\"#算法设计的要求\" class=\"headerlink\" title=\"算法设计的要求\"></a>算法设计的要求</h3><ol>\n<li><strong>正确性</strong>。算法应能够正确地解决求解问题。</li>\n</ol>\n<ul>\n<li>首先，算法应当满足以特定的“规格说明”方式给出的需求。</li>\n<li>其次，对算法是否“正确”的理解可以有以下四个层次：<br>  a. 程序中不含语法错误；<br>  b. 程序对于几组输入数据能够得出满足规格说明要求的结果；<br>  c. 程序对于精心选择的典型、苛刻而带有刁难性的几组输入数据能够得出满足规格说明要求的结果；<br>  d. 程序对于一切合法的输入数据都能产生满足规格说明要求的结果。<br>  （通常以第c层意义的正确性作为衡量一个程序是否合格的标准。）</li>\n</ul>\n<ol start=\"2\">\n<li><strong>可读性</strong>。算法应具有良好的可读性，以帮助人们理解。</li>\n</ol>\n<ul>\n<li>算法主要是为了人的阅读与交流，其次才是机器执行。可读性好有助于人对算法的理解；</li>\n<li>另一方面，晦涩难懂的程序易于隐藏较多错误，难以调试和修改。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>健壮性</strong>。算法能对输入的非法数据做出反应或处理，而不会产生莫名其妙的输出。</li>\n</ol>\n<ul>\n<li>当输入数据非法时，算法也能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果。</li>\n<li>并且，处理出错的方法应是返回一个表示错误或错误性质的值，而不是打印错误信息或异常，并中止程序的执行，以便在更高的抽象层次上进行处理。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>效率与低存储量需求</strong>。效率是指算法执行的时间，存储量需求是指算法执行过程中所需要的最大存储空间，这两者都与问题的规模有关。</li>\n</ol>\n<ul>\n<li>（因为：求100个人的平均分与求1000个人的平均分所花的执行时间或运行空间显然有一定的差别。）</li>\n</ul>\n<h3 id=\"算法的时间、空间复杂度的定义及计算\"><a href=\"#算法的时间、空间复杂度的定义及计算\" class=\"headerlink\" title=\"算法的时间、空间复杂度的定义及计算\"></a>算法的时间、空间复杂度的定义及计算</h3><ul>\n<li>（归纳下应该这么说）算法的<strong>时间复杂度</strong>是一个关于问题规模n的函数，表示算法中基本运算的执行次数的数量级，定性地描述该算法的运行时间。</li>\n<li>（归纳下应该这么说）算法的<strong>空间复杂度</strong>是问题规模n的函数，定性地描述该算法或程序运行所需要的存储空间大小。</li>\n<li>（<a href=\"https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">wiki</a>）算法的<strong>时间复杂度</strong>（time complexity）是一个函数，它定性描述该算法的运行时间。时间复杂度常用大O符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，也就是考察输入值大小趋近无穷时的情况。例如，如果一个算法对于任何大小为 n （必须比 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">n_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 大）的输入，它至多需要 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn><msup><mi>n</mi><mn>3</mn></msup><mo>+</mo><mn>3</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">5n^3 + 3n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">5</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span></span></span></span> 的时间运行完毕，那么它的渐近时间复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li>（<a href=\"https://zh.wikipedia.org/wiki/%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">wiki</a>）在计算机科学中，一个算法或程序的<strong>空间复杂度</strong>定性地描述该算法或程序运行所需要的存储空间大小。空间复杂度是相应计算问题的输入值的长度的函数，它表示一个算法完全执行所需要的存储空间大小。</li>\n<li>就像时间复杂度的计算不考虑算法所使用的空间大小一样，空间复杂度也不考虑算法运行需要的时间长短。</li>\n</ul>\n<h3 id=\"衡量算法在资源上的两个方面\"><a href=\"#衡量算法在资源上的两个方面\" class=\"headerlink\" title=\"衡量算法在资源上的两个方面\"></a>衡量算法在资源上的两个方面</h3><ul>\n<li>算法在编写成可执行程序后，运行时需要耗费时间资源和空间(内存)资源 。因此衡量一个算法的好坏，一般是从时间和空间两个维度来衡量的，即<strong>时间复杂度和空间复杂度</strong>。时间复杂度主要衡量一个算法的运行快慢，而空间复杂度主要衡量一个算法运行所需要的<strong>额外内存空间</strong>。根据算法编写出的程序，运行时间更短，运行期间占用的内存更少，该算法的运行效率就更高，算法也就更好。</li>\n<li>度量一个程序的执行时间通常有两种方法：</li>\n</ul>\n<ol>\n<li><p>事后统计的方法 （让算法变成一个程序，在机器上执行并计时）<br>缺点：<br>(1) 必须执行程序<br>(2) 其他因素掩盖算法本质</p>\n</li>\n<li><p>事前分析估算的方法（通常使用的）<br>和算法执行时间相关的因素：<br>(1) 算法选用的策略<br>(2) 问题的规模<br>(3) 编写程序的语言<br>(4) 编译程序产生的机器代码的质量<br>(5) 机器执行指令的速度<br>（后三条和计算机的软件和硬件有关，和设计算法无关，所以设计算法时只考虑前两条）</p>\n</li>\n</ol>\n<ul>\n<li>算法的存储量包括：<br>(1) 输入数据所占空间<br>(2) 程序本身所占空间<br>(3) 辅助变量所占空间<ul>\n<li>若<u><strong>输入数据</strong>所占空间只取决于问题本身，<strong>和算法无关</strong></u>，则只需要分析除输入和程序之外的<strong>辅助变量所占额外空间</strong>。</li>\n<li>若<u><strong>所需额外空间</strong>相对于<strong>输入数据量</strong>来说是<strong>常数</strong></u>，则称此算法为<strong>原地工作</strong>。</li>\n<li>若<u><strong>所需存储量</strong>依赖于<strong>特定的输入</strong></u>，则通常按<strong>最坏情况</strong>考虑。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"算法的渐进性分析方法，会用该方法对算法进行评估\"><a href=\"#算法的渐进性分析方法，会用该方法对算法进行评估\" class=\"headerlink\" title=\"算法的渐进性分析方法，会用该方法对算法进行评估\"></a>算法的渐进性分析方法，会用该方法对算法进行评估</h3><h4 id=\"渐进分析\"><a href=\"#渐进分析\" class=\"headerlink\" title=\"渐进分析\"></a>渐进分析</h4><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%91%E5%88%86%E6%9E%90\">渐进分析（asymptotic analysis、asymptotics）</a>，在数学分析中是一种描述函数在极限附近的行为的方法。有多个科学领域应用此方法。例子如下：<ul>\n<li>在计算机科学中，<a href=\"https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\">算法分析</a>考虑给定算法在输入非常大的数据集时候的性能。</li>\n<li>当实体系统的规模变得非常大的时候，分析它的行为。</li>\n</ul>\n</li>\n<li>最简单的例子如下：考虑一个函数f(n)，我们需要了解当n变得非常大的时候f(n)的性质。<br>  令<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">f(n)=n^2+3n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span></span></span></span>，在n特别大的时候，第二项3n比起第一项<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>要小很多。<br>  于是对于这个函数，有如下断言：“f(n)在n→∞的情况下与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>渐近等价”，记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>∼</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">f(n)∼n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>。</li>\n</ul>\n<h4 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h4><ul>\n<li>在计算机科学中，<a href=\"https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\">算法分析（Analysis of algorithm）</a>是分析执行一个给定算法需要消耗的计算资源数量（例如计算时间，存储器使用等）的过程。算法的效率或复杂度在理论上表示为一个函数。其定义域是输入数据的长度（通常考虑任意大的输入，没有上界），值域通常是执行步骤数量（时间复杂度）或者存储器位置数量（空间复杂度）。算法分析是计算复杂度理论的重要组成部分。</li>\n<li>理论分析常常利用<a href=\"https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%91%E5%88%86%E6%9E%90\">渐近分析</a>估计一个算法的复杂度，并使用<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7\">大O符号</a>、<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%A9%E7%AC%A6%E5%8F%B7\">大Ω符号</a>和<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%98%E7%AC%A6%E5%8F%B7\">大Θ符号</a>作为标记。举例，二分查找所需的执行步骤数量与查找列表的长度之对数成正比，记为O(log n)，简称为“对数时间”。通常使用渐近分析的原因是，同一算法的不同具体实现的效率可能有差别。但是，对于任何给定的算法，所有符合其设计者意图的实现，它们之间的性能差异应当仅仅是一个系数。</li>\n<li>精确分析算法的效率有时也是可行的，但这样的分析通常需要一些与具体实现相关的假设，称为计算模型。计算模型可以用抽象机器来定义，比如图灵机。或者可以假设某些基本操作在单位时间内可完成。</li>\n<li>假设二分查找的目标列表总共有 n 个元素。如果我们假设单次查找可以在一个时间单位内完成，那么至多只需要 logn + 1 单位的时间就可以得到结果。这样的分析在有些场合非常重要。</li>\n<li>算法分析在实际工作中是非常重要的，因为使用低效率的算法会显著降低系统性能。在对运行时间要求极高的场合，耗时太长的算法得到的结果可能是过期或者无用的。低效率算法也会大量消耗计算资源。</li>\n</ul>\n<h4 id=\"渐进最优\"><a href=\"#渐进最优\" class=\"headerlink\" title=\"渐进最优\"></a>渐进最优</h4><ul>\n<li>在计算机科学中，<a href=\"https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%9B%E6%9C%80%E4%BC%98\">渐进最优</a>一词用以评价算法的效率。如果已经证实一个问题需要使用Ω(f(n))的资源来解决，而某个算法用O(f(n))的资源来解决这个问题，则该算法就是渐进最优的。</li>\n<li>渐进最优的例子包括数据结构动态数组，能够在常数时间内索引，但性能在多数机器上不如普通数组的索引。另外，在所有基于比较的排序算法中，归并排序和堆排序是渐进最优的。</li>\n</ul>\n<h3 id=\"三个标记法\"><a href=\"#三个标记法\" class=\"headerlink\" title=\"三个标记法\"></a>三个标记法</h3><ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span></span></span></span>标记法\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7\">大O符号</a>（上界）表示函数在增长到一定程度时总小于一个特定函数的常数倍。</li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Ω</span></span></span></span>标记法\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%A9%E7%AC%A6%E5%8F%B7\">大Ω符号</a>表示函数在增长到一定程度时总大于一个特定函数的常数倍。</li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Θ</mi></mrow><annotation encoding=\"application/x-tex\">\\Theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Θ</span></span></span></span>标记法\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%CE%98%E7%AC%A6%E5%8F%B7\">大Θ符号</a>表示函数在某个区间上的渐近关系。如果两个函数在某个区间上的上界和下界都分别为另一个函数，那么这两个函数在该区间上是渐近相等的，可以用大Θ符号表示为：f(n) &#x3D; Θ(g(n))</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"时空权衡原则\"><a href=\"#时空权衡原则\" class=\"headerlink\" title=\"时空权衡原则\"></a>时空权衡原则</h3><ul>\n<li>计算机科学中的 <a href=\"https://zh.wikipedia.org/wiki/%E6%97%B6%E7%A9%BA%E6%9D%83%E8%A1%A1\">时空权衡</a>（英语：space–time trade off，又叫<strong>空间换时间</strong>）是指一个算法或程序用增加空间使用量来换取时间减少的情况。这里，空间指的是执行一个给定任务所消耗的数据存储（内存、硬盘等），而时间指的是执行一个给定任务所消耗的时间（计算时间或反应时间）。</li>\n<li>一个给定的时空权衡的效用受到相关的固定和可变成本（如CPU速度、存储空间）的影响，并受到<u>收益递减的</u>影响。</li>\n</ul>\n<h2 id=\"三、线性表\"><a href=\"#三、线性表\" class=\"headerlink\" title=\"三、线性表\"></a>三、线性表</h2><h3 id=\"线性表的定义\"><a href=\"#线性表的定义\" class=\"headerlink\" title=\"线性表的定义\"></a>线性表的定义</h3><ul>\n<li>线性表是具有相同数据类型的n个数据元素的有限序列，n为表长，当n&#x3D;0时，该线性表是空表。</li>\n</ul>\n<h3 id=\"线性表的逻辑结构\"><a href=\"#线性表的逻辑结构\" class=\"headerlink\" title=\"线性表的逻辑结构\"></a>线性表的逻辑结构</h3><ul>\n<li>线性表是一种逻辑结构，表示元素之间一对一的相邻关系；顺序表和链表是存储结构。</li>\n<li>线性表的<strong>逻辑特性</strong>：若用L命名线性表，则其一般表示为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L=(a_1,a_2,\\cdots,a_i,a_{i+1},\\cdots,a_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。式中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">a_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是唯一的“第一个”数据元素，又称<strong>表头元素</strong>；<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是唯一的“最后一个”数据元素，又称<strong>表尾元素</strong>。除第一个元素外，每个元素<strong>有且仅有</strong>一个直接前驱。除最后一个元素外，每个元素<strong>有且仅有</strong>一个直接后继（“直接前驱”和“前驱”、“直接后继”和“后继”通常被视为同义词）。这种线性有序的逻辑结构正是线性表名字的又来。</li>\n<li>线性表的<strong>特点</strong>：<ol>\n<li>表中元素的个数有限。</li>\n<li>表中元素具有逻辑上的顺序性，表中元素有其先后次序。</li>\n<li>表中元素都是数据元素，每个元素都是单个元素。</li>\n<li>表中元素的数据类型都相同，这意味着每个元素占有相同大小的存储空间。</li>\n<li>表中元素具有抽象性，即仅讨论元素间的逻辑关系，而不考虑元素究竟表示什么内容。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"线性表的基本操作\"><a href=\"#线性表的基本操作\" class=\"headerlink\" title=\"线性表的基本操作\"></a>线性表的基本操作</h3><ol>\n<li>InitList(&amp;L): 初始化表。构造一个空的线性表。</li>\n<li>Length(L): 求表长。返回线性表L的长度，即L中数据元素的个数。</li>\n<li>LocateElem(L,e): 按值查找操作。在表L中查找具有给定关键字值的元素。</li>\n<li>GetElem(L,i): 按位查找操作。获取表L中第i个位置的元素的值。</li>\n<li>ListInsert(&amp;L,i,e): 插入操作。在表L中的第i个位置上插入指定的元素e。</li>\n<li>ListDelete(&amp;L,i,&amp;e): 删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。</li>\n<li>PrintList(L): 输出操作。按前后顺序输出线性表L的所有元素值。</li>\n<li>Empty(L): 判空操作。若L为空表，则返回true，否则返回false。</li>\n<li>DestroyList(&amp;L): 销毁操作。销毁线性表，并释放线性表L所占用的内存空间。</li>\n</ol>\n<h3 id=\"顺序表的定义\"><a href=\"#顺序表的定义\" class=\"headerlink\" title=\"顺序表的定义\"></a>顺序表的定义</h3><ul>\n<li>线性表的顺序存储又称<strong>顺序表</strong>。它是用一组地址连续的存储单元依次存储线性表中的数据元素，从而使得逻辑上相邻的两个元素在物理位置上也相邻。</li>\n<li>（称i为元素<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>在顺序表中的<strong>位序</strong>。）</li>\n</ul>\n<h3 id=\"顺序表的特点\"><a href=\"#顺序表的特点\" class=\"headerlink\" title=\"顺序表的特点\"></a>顺序表的特点</h3><ul>\n<li>表中元素的<strong>逻辑顺序</strong>与其存储的<strong>物理顺序</strong><u>相同</u>，因此可以随机存取表中的任一元素，它的存储位置可用一个简单、直观的公式表示。</li>\n</ul>\n<h3 id=\"用顺序存储结构对线性表基本操作的实现\"><a href=\"#用顺序存储结构对线性表基本操作的实现\" class=\"headerlink\" title=\"用顺序存储结构对线性表基本操作的实现\"></a>用顺序存储结构对线性表基本操作的实现</h3><div class=\"tip warning faa-parent animated-hover\"><p class=\"faa-horizontal\"> 注意不可以用int替代数据元素的数据类型，因为数据类型未给定，得用ElemType代替。</p></div>\n\n<ul>\n<li><p>线性表的动态分配顺序存储结构</p>\n<blockquote>\n<p>数组指针elem指示线性表的基地址，listsize指示顺序表当前分配的存储空间大小，一旦因插入元素而导致空间不足时，可进行再分配，即为顺序表增加一个大小为存储LISTINCREMENT个数据元素的空间。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LIST_INIT_SIZE 100 <span class=\"comment\">//线性表存储空间的初始分配量</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LISTINCREMENT 10 <span class=\"comment\">//线性表存储空间的分配增量</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  ElemType *elem; <span class=\"comment\">//存储空间基址</span></span><br><span class=\"line\">  <span class=\"type\">int</span> length; <span class=\"comment\">//当前长度</span></span><br><span class=\"line\">  <span class=\"type\">int</span> listsize; <span class=\"comment\">//当前分配的存储容量（以sizeof(Elemtype)为单位）</span></span><br><span class=\"line\">&#125;Sqlist;</span><br></pre></td></tr></table></figure></li>\n<li><p>顺序表的初始化</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">InitList_Sq</span><span class=\"params\">(SqList &amp;L)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//构造一个空的线性表L</span></span><br><span class=\"line\">  L.elem = (ElemType *)<span class=\"built_in\">malloc</span>(LIST_INIT_SIZE * <span class=\"keyword\">sizeof</span>(ElemType));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (! L.elem) <span class=\"built_in\">exit</span>(OVERFLOW); <span class=\"comment\">//存储分配失败</span></span><br><span class=\"line\">  L.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">  L.listsize = LIST_INIT_SIZE; <span class=\"comment\">//初始存储容量</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>插入操作</p>\n<blockquote>\n<p>在第i（1≤i≤n）个元素之前插入一个元素，需将<strong>第n至第i（共n-i+1个）</strong>个元素向后移动一个位置。<br>C语言中数组的下标从“0”开始，因此表中第i个数据元素是L.elem[i-1]。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">ListInsert_Sq</span><span class=\"params\">(SqList &amp;L, <span class=\"type\">int</span> i, ElemType e)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//在顺序线性表L中第i个位置之前插入新的元素e</span></span><br><span class=\"line\">  <span class=\"comment\">//i的合法值为 1≤i≤ListLength_Sq(L)+1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L.length+<span class=\"number\">1</span>) <span class=\"keyword\">return</span> ERROR; <span class=\"comment\">//i值不合法</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (L.length &gt;= L.listsize) &#123; <span class=\"comment\">//当前存储空间已满，增加分配</span></span><br><span class=\"line\">    newbase = (ElemType *)<span class=\"built_in\">realloc</span>(L.elem, (L.listsize+LISTINCREMENT) * <span class=\"keyword\">sizeof</span>(ElemType));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!newbase) <span class=\"built_in\">exit</span>(OVERFLOW); <span class=\"comment\">//存储分配失败</span></span><br><span class=\"line\">    L.elem = newbase;</span><br><span class=\"line\">    L.listsize += LISTINCREMENT; <span class=\"comment\">//增加存储容量</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  q = &amp;(L.elem[i<span class=\"number\">-1</span>]); <span class=\"comment\">//q为插入位置</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (p = &amp;(L.elem[L.length<span class=\"number\">-1</span>]); p &gt;= q; --p)</span><br><span class=\"line\">    *(p+<span class=\"number\">1</span>) = *p; <span class=\"comment\">//插入位置及之后的元素右移</span></span><br><span class=\"line\">  *q = e; <span class=\"comment\">//插入e</span></span><br><span class=\"line\">  ++ L.length; <span class=\"comment\">//表长增1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>删除操作</p>\n<blockquote>\n<p>删除第i（1≤i≤n）个元素时，需将<strong>从第i+1至n（共n-i）</strong>个元素依次向前移动一个位置。<br>C语言中数组的下标从“0”开始，因此表中第i个数据元素是L.elem[i-1]。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">ListDelete_Sq</span><span class=\"params\">(SqList &amp;L, <span class=\"type\">int</span> i, ElemType &amp;e)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//在顺序线性表L中删除第i个元素，并用e返回其值</span></span><br><span class=\"line\">  <span class=\"comment\">//i的合法值为 1≤i≤ListLength_Sq(L)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L.length) <span class=\"keyword\">return</span> ERROR; <span class=\"comment\">//i值不合法</span></span><br><span class=\"line\">  p = &amp;(L.elem[i<span class=\"number\">-1</span>]); <span class=\"comment\">//p为被删除元素的位置</span></span><br><span class=\"line\">  e = *p; <span class=\"comment\">//被删除元素的值赋给e</span></span><br><span class=\"line\">  q = L.elem + L.length - <span class=\"number\">1</span>; <span class=\"comment\">//表尾元素的位置（elem表示线性表的基址）</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (++p; p &lt;= q; ++p)</span><br><span class=\"line\">    *(p<span class=\"number\">-1</span>) = *p; <span class=\"comment\">//被删除元素之后的元素左移</span></span><br><span class=\"line\">  --L.length; <span class=\"comment\">//表长减1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>移动元素次数的期望值</p>\n<blockquote>\n<p>当在顺序存储结构的线性表中某个位置上插入或删除一个数据元素时，其时间主要耗费在移动元素上（换句话说，移动元素的操作为预估算法时间复杂度的基本操作），而移动元素的个数取决于插入或删除元素的位置。</p>\n</blockquote>\n<ul>\n<li>假设等概率，<ul>\n<li>插入（在i前插入）：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mrow><mi>i</mi><mi>s</mi></mrow></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msubsup><msub><mi>p</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msubsup><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">E_{is} = \\sum\\limits_{i=1}^{n+1}p_i(n-i+1) = \\frac{1}{n+1}\\sum\\limits_{i=1}^{n+1}(n-i+1) = \\frac{n}{2} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4788em;vertical-align:-0.9777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5011em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4788em;vertical-align:-0.9777em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5011em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n<li>删除（第i个）：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mrow><mi>d</mi><mi>l</mi></mrow></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>q</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">E_{dl} = \\sum\\limits_{i=1}^{n}q_i(n-i) = \\frac{1}{n}\\sum\\limits_{i=1}^{n}(n-i) = \\frac{n-1}{2} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3291em;vertical-align:-0.9777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3291em;vertical-align:-0.9777em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n</ul>\n</li>\n<li>若表长为n，则算法 ListInsert_Sq 和 ListDelete_Sq 的时间复杂度为 O(n) 。</li>\n<li>“求表长”（ListLength_Sq）和“取第i个数据元素”（GetElem_Sq）的时间复杂度为 O(1) 。</li>\n<li>LocateElem_Sq 的时间复杂度为 O(L.length) ， union_Sq（A&#x3D;A∪B） 的时间复杂度为 O ( La.length × Lb.length ) ， MergeList_Sq（C&#x3D;A∪B） 的时间复杂度为 O ( La.ListLength + Lb.ListLength ) 。</li>\n</ul>\n</li>\n<li><p>按值查找（顺序查找）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">LocateElem_Sq</span><span class=\"params\">(SqList L, ElemType e, Status (*compare)(ElemType, ElemType))</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//在顺序线性表L中查找第1个值与e满足compare()的元素的位序</span></span><br><span class=\"line\">  <span class=\"comment\">//若找到，则返回其在L中的位序，否则返回0</span></span><br><span class=\"line\">  i = <span class=\"number\">1</span>; <span class=\"comment\">//i的初值为第1个元素的位序</span></span><br><span class=\"line\">  p = L.elem; <span class=\"comment\">//p的初值为第1个元素的存储位置</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &lt;= L.length &amp;&amp; !(*compare)(*p ++, e))</span><br><span class=\"line\">    ++i;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i &lt;= L.length)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>线性表的合并（A&#x3D;A∪B）</p>\n<blockquote>\n<p>将存在于线性表LB中，而<strong>不存在于线性表LA中</strong>的数据元素插入到线性表LA中去。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">union</span><span class=\"params\">(List &amp;La, List &amp;Lb)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//将所有在线性表Lb中但不在La中的数据元素插入到La中</span></span><br><span class=\"line\">  La.len = ListLength(La); Lb.len = ListLength(Lb); <span class=\"comment\">//求线性表的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= Lb.len; i++) &#123;</span><br><span class=\"line\">    GetElem(Lb, i, e); <span class=\"comment\">//取Lb中第i个数据元素赋给e</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!LocateElem(La, e, equal)) ListInsert(La, ++ La_len, e); <span class=\"comment\">//La中不存在和e相同的数据元素，则插入之</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>顺序表的合并（C&#x3D;A∪B）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">MergeList_Sq</span><span class=\"params\">(SqList La, SqList Lb, SqList &amp;Lc)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//已知顺序线性表La和Lb的元素按值非递减排列</span></span><br><span class=\"line\">  <span class=\"comment\">//归并La和Lb得到新的顺序线性表Lc，Lc的元素也按值非递减排列</span></span><br><span class=\"line\">  pa = La.elem; pb = Lb.elem;</span><br><span class=\"line\">  Lc.listsize = Lc.length = La.length + Lb.length;</span><br><span class=\"line\">  pc = Lc.elem = (ElemType *)<span class=\"built_in\">malloc</span>(Lc.listsize*<span class=\"keyword\">sizeof</span>(ElemType));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!Lc.elem) <span class=\"built_in\">exit</span>(OVERFLOW); <span class=\"comment\">//存储分配失败</span></span><br><span class=\"line\">  pa_last = La.elem + La.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  pb_last = Lb.elem + Lb.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (pa &lt;= pa_last &amp;&amp; pb &lt;= pb_last) &#123; <span class=\"comment\">//归并</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*pa &lt;= *pb) *pc ++ = *pa ++;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> *pc ++ = *pb ++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (pa &lt;= pa_last) *pc ++ = *pa ++; <span class=\"comment\">//插入La的剩余元素</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (pb &lt;= pb_last) *pc ++ = *pb ++; <span class=\"comment\">//插入Lb的剩余元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"链式表的定义\"><a href=\"#链式表的定义\" class=\"headerlink\" title=\"链式表的定义\"></a>链式表的定义</h3><ul>\n<li>链式表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。</li>\n</ul>\n<h3 id=\"链式表的特点\"><a href=\"#链式表的特点\" class=\"headerlink\" title=\"链式表的特点\"></a>链式表的特点</h3><ul>\n<li>用一组任意（可连续，也可不连续）的存储单元存储数据元素，对于每个数据元素都需要一个<u>存储其本身信息</u>的<strong>数据域</strong>和<u>存储直接后继存储位置</u>的<strong>指针域</strong>。</li>\n</ul>\n<h3 id=\"用链式存储结构对线性表基本操作的实现（见下）\"><a href=\"#用链式存储结构对线性表基本操作的实现（见下）\" class=\"headerlink\" title=\"用链式存储结构对线性表基本操作的实现（见下）\"></a>用链式存储结构对线性表基本操作的实现（见下）</h3><h3 id=\"链式存储结构的实现技术（比如）\"><a href=\"#链式存储结构的实现技术（比如）\" class=\"headerlink\" title=\"链式存储结构的实现技术（比如）\"></a>链式存储结构的实现技术（比如）</h3><h4 id=\"单向链表\"><a href=\"#单向链表\" class=\"headerlink\" title=\"单向链表\"></a>单向链表</h4><ul>\n<li>线性表的链式存储又称单链表。它是通过一组任意的存储单元来存储线性表中的数据元素。</li>\n<li>为了建立数据元素之间的线性关系，对每个链表结点，除存放元素自身的信息之外，还需要存放一个指向其后继的指针。</li>\n<li>结点类型描述：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">  ElemType data;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LNode, *LinkList;</span><br></pre></td></tr></table></figure></li>\n<li>利用单链表可以解决顺序表需要大量连续存储单元的缺点，但附加的指针域，也存在浪费存储空间的缺点。</li>\n<li>由于单链表的元素离散地分布在存储空间中，因此是非随机存取的存储结构，即不能直接找到表中某个特定结点。查找特定结点时，需要从表头开始遍历，依次查找。</li>\n<li>通常用<strong>头指针L（或head等）</strong>来标识一个单链表，<u>指出链表的起始地址</u>，<u>头指针为NULL时表示一个空表</u>。</li>\n<li>此外，为了操作上的方便，在单链表第一个数据结点之前附加一个结点，称为<strong>头结点</strong>。</li>\n<li>头结点的数据域可以不设任何信息，但也可以记录表长等信息。单链表带头结点时，头指针L指向头结点；单链表不带头结点时，头指针指向第一个数据结点。</li>\n<li>表尾结点的指针域为NULL（用“^”表示）。</li>\n<li><strong>头结点和头指针的关系</strong>：不管带不带头结点，头指针都始终指向链表的第一个结点，<u>而头结点是带头结点的链表中的第一个结点</u>，结点内通常不存储信息。</li>\n<li>引入<u>头结点</u>后，可以带来<strong>两个优点</strong>：<ol>\n<li>由于第一个数据结点的位置被存放在头结点的指针域中，因此<strong>在链表的第一个位置上的操作和在表的其他位置上的操作一致</strong>，无须进行特殊处理。</li>\n<li>无论链表是否为空，其头指针都是指向头结点的非空指针（空表中头结点的指针域为空），因此<strong>空表和非空表的处理也就得到了统一</strong>。</li>\n</ol>\n</li>\n<li>初始化（王道）：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//带头结点</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">InitList</span><span class=\"params\">(LinkList &amp;L)</span> &#123;</span><br><span class=\"line\">  L=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">  L-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不带头结点</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">InitList</span><span class=\"params\">(LinkList &amp;L)</span> &#123;</span><br><span class=\"line\">  L=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>求表长（王道）：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Length</span><span class=\"params\">(LinkList L)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> len=<span class=\"number\">0</span>;</span><br><span class=\"line\">  LNode *p=L;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(p-&gt;next!=<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    p=p-&gt;next;</span><br><span class=\"line\">    len++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>按序号查找结点（王道+书）：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//王道</span></span><br><span class=\"line\">LNode *<span class=\"title function_\">GetElem</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">  LNode *p = L;</span><br><span class=\"line\">  <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(p != NUll &amp;&amp; j &lt; i) &#123;</span><br><span class=\"line\">    p = p -&gt; next;</span><br><span class=\"line\">    j ++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//书</span></span><br><span class=\"line\">Status <span class=\"title function_\">GetElem_L</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> i, ElemType &amp;e)</span> &#123;</span><br><span class=\"line\">  p = L -&gt; next; j = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (p &amp;&amp; j &lt; i) &#123;</span><br><span class=\"line\">    p = p -&gt; next; ++ j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!p) <span class=\"keyword\">return</span> ERROR; <span class=\"comment\">//表长小于i，没有第i个元素</span></span><br><span class=\"line\">  e = p -&gt; data;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>按值查找表结点（王道）：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LNode *<span class=\"title function_\">LocateElem</span><span class=\"params\">(LinkList L, ElemType e)</span> &#123;</span><br><span class=\"line\">  LNode *p = L -&gt; next;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span> &amp;&amp; p -&gt; data != e) &#123;</span><br><span class=\"line\">    p = p -&gt; next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>插入结点（王道，书上与王道一致不写了）：<blockquote>\n<p>注意，当链表不带头结点时，需要判断插入位置i是否为1，若是，则要做特殊处理，将头指针L指向新的首结点。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//王道，将值为x的新结点插入到第i个位置</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">ListInsert</span><span class=\"params\">(LinkList &amp;L, <span class=\"type\">int</span> i, ElemType e)</span> &#123;</span><br><span class=\"line\">  LNode *p = L;</span><br><span class=\"line\">  <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span> &amp;&amp; j &lt; i - <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">    p = p -&gt; next;</span><br><span class=\"line\">    j ++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//i值不合法</span></span><br><span class=\"line\">  LNode *s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">  s -&gt; data = e;</span><br><span class=\"line\">  s -&gt; next = p -&gt; next;</span><br><span class=\"line\">  p -&gt; next = s;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>可以将前插操作写成后插操作+data互换<blockquote>\n<p>在单链表插入算法中，通常都采用后插操作。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//需要将*s插入到*p前，用*s插入到*p后+互换data</span></span><br><span class=\"line\">s -&gt; next = p -&gt; next;</span><br><span class=\"line\">p -&gt; next = s;</span><br><span class=\"line\">temp = p -&gt; data;</span><br><span class=\"line\">p -&gt; data = s -&gt; data;</span><br><span class=\"line\">s -&gt; data = temp;</span><br></pre></td></tr></table></figure></li>\n<li>删除结点（王道，书上与王道一致不写了）：<blockquote>\n<p>注意，当链表不带头结点时，需要判断插入位置i是否为1，若是，则要做特殊处理，将头指针L指向新的首结点。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">ListDelete</span><span class=\"params\">(LinkList &amp;L, <span class=\"type\">int</span> i, ElemType &amp;e)</span> &#123;</span><br><span class=\"line\">  LNode *p = L;</span><br><span class=\"line\">  <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span> &amp;&amp; j &lt; i - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    p = p -&gt; next;</span><br><span class=\"line\">    j ++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span> || p -&gt; next == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//i值不合法</span></span><br><span class=\"line\">  LNode *q = p -&gt; next;</span><br><span class=\"line\">  e = q -&gt; data;</span><br><span class=\"line\">  p -&gt; next = q -&gt; next;</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>可以将删除p写成删除p的后继+交换data<blockquote>\n<p>删除结点的通常做法是找到p前驱，然后执行删除操作。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q = p -&gt; next;</span><br><span class=\"line\">p -&gt; data = p -&gt; next -&gt; data;</span><br><span class=\"line\">p -&gt; next = q -&gt; next;</span><br><span class=\"line\"><span class=\"built_in\">free</span>(q);</span><br></pre></td></tr></table></figure></li>\n<li>采用头插法建立单链表（插入头结点之后），可以用来实现链表的逆置。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList &amp;L)</span> &#123;</span><br><span class=\"line\">  LNode *s; <span class=\"type\">int</span> x; <span class=\"comment\">//定义新结点</span></span><br><span class=\"line\">  L = (LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode)); <span class=\"comment\">//创建头结点</span></span><br><span class=\"line\">  L -&gt; next = <span class=\"literal\">NULL</span>; <span class=\"comment\">//初始为空链表</span></span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x); <span class=\"comment\">//输入结点的值</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(x!=<span class=\"number\">9999</span>) &#123; <span class=\"comment\">//输入9999表示结束</span></span><br><span class=\"line\">    s = (LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode)); <span class=\"comment\">//创建新结点</span></span><br><span class=\"line\">    s -&gt; data = x;</span><br><span class=\"line\">    s -&gt; next = L -&gt; next;</span><br><span class=\"line\">    L -&gt; next = s; <span class=\"comment\">//L为头指针</span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>采用尾插法建立单链表。为此必须增加一个尾指针r，使其始终指向当前链表的尾结点。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkList <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList &amp;L)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x;</span><br><span class=\"line\">  L = (LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode)); <span class=\"comment\">//创建头结点</span></span><br><span class=\"line\">  LNode *s, *r = L; <span class=\"comment\">//r为表尾指针</span></span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(x != <span class=\"number\">9999</span>) &#123; <span class=\"comment\">//输入9999表示结束</span></span><br><span class=\"line\">    s = (LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    s -&gt; data = x;</span><br><span class=\"line\">    r -&gt; next = s;</span><br><span class=\"line\">    r = s; <span class=\"comment\">//r指向新的表尾结点</span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  r -&gt; next = <span class=\"literal\">NULL</span>; <span class=\"comment\">//尾结点指针置空</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>归并两个链表（书）<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">MergeList_L</span><span class=\"params\">(LinkList &amp;La, LinkList &amp;Lb, LinkList &amp;Lc)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//已知单链线性表La和Lb的元素按值非递减排列</span></span><br><span class=\"line\">  <span class=\"comment\">//归并La和Lb得到新的单链线性表Lc，Lc的元素也按值非递减排列</span></span><br><span class=\"line\">  pa = La -&gt; next; pb = Lb -&gt; next;</span><br><span class=\"line\">  Lc = pc = La; <span class=\"comment\">//用La的头结点作为Lc的头结点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(pa &amp;&amp; pb) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pa -&gt; data &lt;= pb -&gt; data) &#123;</span><br><span class=\"line\">      pc -&gt; next = pa; pc = pa; pa = pa -&gt; next; <span class=\"comment\">//将pa所指结点链接到pc所指结点之后</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      pc -&gt; next = pb; pc = pb; pb = pb -&gt; next; <span class=\"comment\">//将pb所指结点链接到pc所指结点之后</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pc -&gt; next = pa ? pa : pb; <span class=\"comment\">//插入剩余段（pa存在连pa，否则连pb）</span></span><br><span class=\"line\">  <span class=\"built_in\">free</span>(Lb); <span class=\"comment\">//释放Lb的头结点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"静态链表\"><a href=\"#静态链表\" class=\"headerlink\" title=\"静态链表\"></a>静态链表</h4><ul>\n<li>静态链表是用数组来描述线性表的链式存储结构（其他链表为指针型描述），结点也有数据域data和指针域next。</li>\n<li>与其他链表中的指针不同的是，这里的指针是<u>结点在数组中的相对地址（书：相对位置）（数组下标）</u>，又称<strong>游标</strong>。</li>\n<li>和顺序表一样，<strong>静态链表也要预先分配一块连续的内存空间</strong>。</li>\n<li>静态链表的插入、删除操作与动态链表的相同，只需要修改指针，而不需要移动元素，故仍具有链式存储结构的主要优点。</li>\n<li>这种描述方法便于在不支持指针的高级程序设计语言（如Basic）中使用链表结构。</li>\n<li>数组的一个分量表示一个结点，数组的第零分量可看成头结点，其指针域只是链表的第一个结点。</li>\n<li>线性表的静态单链表存储结构：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 1000 <span class=\"comment\">//链表的最大长度</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  ElemType data;</span><br><span class=\"line\">  <span class=\"type\">int</span> cur;</span><br><span class=\"line\">&#125;component, SLinkList[MAXSIZE];</span><br></pre></td></tr></table></figure></li>\n<li>定位函数（书）<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">LocateElem_SL</span><span class=\"params\">(SLinkList S, ElemType e)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//在静态单链线性表L中查找第1个值为e的元素</span></span><br><span class=\"line\">  <span class=\"comment\">//若找到，则返回它在L中的位序，否则返回0</span></span><br><span class=\"line\">  i = S[<span class=\"number\">0</span>].cur; <span class=\"comment\">//i表中第一个结点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &amp;&amp; S[i].data != e) i = S[i].cur; <span class=\"comment\">//在表中顺链查找</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>求(A-B)∪(B-A)（书P33，挺复杂的，有时间可看）</li>\n</ul>\n<h4 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h4><ul>\n<li>单链表只能从前往后依次遍历；要访问某个结点的前驱（插入、删除操作时），只能从头开始遍历，访问前驱的时间复杂度为O(n)。</li>\n<li>为了克服单链表的这个缺点，引入了<strong>双链表</strong>，双链表结点中有两个指针prior和next，分别指向其直接前驱和直接后继。</li>\n<li>表头结点的prior域和尾结点的next域都是NULL。</li>\n<li>线性表的双向链表存储结构（书）：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DuLNode</span> &#123;</span></span><br><span class=\"line\">  ElemType data;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DuLNode</span> *<span class=\"title\">prior</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DuLNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;DuLNode, *DuLinkList;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"单循环链表\"><a href=\"#单循环链表\" class=\"headerlink\" title=\"单循环链表\"></a>单循环链表</h4><ul>\n<li>循环单链表和单链表的区别在于，表中最后一个结点的指针不是NULL，而改为指向头结点，从而整个链表形成一个环。</li>\n<li>在循环单链表中，<strong>表尾结点*r的next域指向L</strong>，故表中没有指针域为NULL的结点，因此，循环单链表的<strong>判空条件</strong>不是头结点的指针是否为空，而是<strong>它（头结点的指针）是否等于头指针L</strong>。</li>\n<li>循环单链表的插入、删除算法与单链表的几乎一样，所<strong>不同</strong>的是若操作是在<strong>表尾</strong>进行，则执行的操作不同，以让单链表继续保持循环的性质。</li>\n<li>当然，正是因为循环单链表是一个“环”，所有在任何位置上的插入和删除操作都是等价的，而无须判断是否是表尾。</li>\n<li>在单链表中只能从表头结点开始往后顺序遍历整个链表，而循环单链表<u>可以从表中的任意一个结点开始</u>遍历整个链表。</li>\n<li><strong>有时</strong>对循环单链表不设头指针，<strong>而仅设尾指针</strong>，<u>以使得操作效率更高</u>。其原因是，若设的是头指针，对在表尾插入元素需要O(n)的时间复杂度，而若设的是尾指针r，<strong>r-&gt;next即为头指针</strong>，对在表头或插入元素都只需要O(1)的时间复杂度。</li>\n</ul>\n<h4 id=\"双向循环链表\"><a href=\"#双向循环链表\" class=\"headerlink\" title=\"双向循环链表\"></a>双向循环链表</h4><ul>\n<li>与循环单链表不同的是，在循环双链表中，头结点的prior指针还要指向表尾结点。</li>\n<li><strong>表尾结点*p的next域也指向L</strong>；当循环双链表为<strong>空表</strong>时，其<strong>头结点的prior域和next域都等于L</strong>。</li>\n</ul>\n<h4 id=\"带头结点的链表\"><a href=\"#带头结点的链表\" class=\"headerlink\" title=\"带头结点的链表\"></a>带头结点的链表</h4><p>（对于单链表：）</p>\n<ul>\n<li>头结点的数据域可以不设任何信息，但也可以记录表长等信息。单链表带头结点时，头指针L指向头结点；单链表不带头结点时，头指针指向第一个数据结点。</li>\n<li><strong>头结点和头指针的关系</strong>：不管带不带头结点，头指针都始终指向链表的第一个结点，<u>而头结点是带头结点的链表中的第一个结点</u>，结点内通常不存储信息。</li>\n<li>引入<u>头结点</u>后，可以带来<strong>两个优点</strong>：<ol>\n<li>由于第一个数据结点的位置被存放在头结点的指针域中，因此<strong>在链表的第一个位置上的操作和在表的其他位置上的操作一致</strong>，无须进行特殊处理。</li>\n<li>无论链表是否为空，其头指针都是指向头结点的非空指针（空表中头结点的指针域为空），因此<strong>空表和非空表的处理也就得到了统一</strong>。</li>\n</ol>\n</li>\n<li>初始化（王道）：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//带头结点</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">InitList</span><span class=\"params\">(LinkList &amp;L)</span> &#123;</span><br><span class=\"line\">  L=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">  L-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不带头结点</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">InitList</span><span class=\"params\">(LinkList &amp;L)</span> &#123;</span><br><span class=\"line\">  L=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>对于插入操作，当链表不带头结点时，需要判断插入位置i是否为1，若是，则要做特殊处理，将头指针L指向新的首结点。</li>\n<li>对于删除操作，当链表不带头结点时，需要判断插入位置i是否为1，若是，则要做特殊处理，将头指针L指向新的首结点。</li>\n</ul>\n<p>（单循环链表，关于头结点的部分）</p>\n<ul>\n<li>循环单链表和单链表的区别在于，表中最后一个结点的指针不是NULL，而改为指向头结点，从而整个链表形成一个环。</li>\n<li>在循环单链表中，<strong>表尾结点*r的next域指向L</strong>，故表中没有指针域为NULL的结点，因此，循环单链表的<strong>判空条件</strong>不是头结点的指针是否为空，而是<strong>它（头结点的指针）是否等于头指针L</strong>。<br>（双向循环链表，关于头结点的部分）</li>\n</ul>\n<h4 id=\"双向循环链表-1\"><a href=\"#双向循环链表-1\" class=\"headerlink\" title=\"双向循环链表\"></a>双向循环链表</h4><ul>\n<li>与循环单链表不同的是，在循环双链表中，头结点的prior指针还要指向表尾结点。</li>\n<li><strong>表尾结点*p的next域也指向L</strong>；当循环双链表为<strong>空表</strong>时，其<strong>头结点的prior域和next域都等于L</strong>。</li>\n</ul>\n<h3 id=\"线性表的应用\"><a href=\"#线性表的应用\" class=\"headerlink\" title=\"线性表的应用\"></a>线性表的应用</h3><h4 id=\"一元多项式的表示和相加\"><a href=\"#一元多项式的表示和相加\" class=\"headerlink\" title=\"一元多项式的表示和相加\"></a>一元多项式的表示和相加</h4><blockquote>\n<p>这个应该是线性表的应用吧，书P39</p>\n</blockquote>\n<ul>\n<li>代码很复杂，大致思路：</li>\n</ul>\n<ol>\n<li>先将一个一元n次多项式按照升幂写成<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>P</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>p</mi><mn>1</mn></msub><msup><mi>x</mi><msub><mi>e</mi><mn>1</mn></msub></msup><mo>+</mo><msub><mi>p</mi><mn>2</mn></msub><msup><mi>x</mi><msub><mi>x</mi><mn>2</mn></msub></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>p</mi><mi>m</mi></msub><msup><mi>x</mi><msub><mi>e</mi><mi>m</mi></msub></msup></mrow><annotation encoding=\"application/x-tex\">P_n(x) = p_1 x^{e_1} + p_2 x^{x_2} + \\cdots + p_m x^{e_m} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>，<br>其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是指数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">e_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的项的非零系数，且满足<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>e</mi><mn>1</mn></msub><mo>&lt;</mo><msub><mi>e</mi><mn>2</mn></msub><mo>&lt;</mo><mo>⋯</mo><mo>&lt;</mo><msub><mi>e</mi><mi>m</mi></msub><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">0 \\leq e_1 &lt; e_2 &lt; \\cdots &lt; e_m = n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></li>\n<li>用线性链表表示一元多项式，每个结点表示多项式中的一项，每个结点存储系数和指数。</li>\n<li>实现两个多项式（用两个线性链表表示）的相加：类似于归并，因为指数升序排列，对于指数相同的把系数相加即可。</li>\n<li>实现多项式相乘：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mo stretchy=\"false\">[</mo><msub><mi>b</mi><mn>1</mn></msub><msup><mi>x</mi><msub><mi>e</mi><mn>1</mn></msub></msup><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><msup><mi>x</mi><msub><mi>e</mi><mn>2</mn></msub></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>b</mi><mi>n</mi></msub><msup><mi>x</mi><msub><mi>e</mi><mi>n</mi></msub></msup><mo stretchy=\"false\">]</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>b</mi><mi>i</mi></msub><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mi>x</mi><msub><mi>e</mi><mi>i</mi></msub></msup></mrow><annotation encoding=\"application/x-tex\">M(x)=A(x)×B(x)\n    =A(x)×[b_1x^{e_1}+b_2x^{e_2}+\\cdots +b_nx^{e_n}]\n    =\\sum\\limits_{i=1}^n b_i A(x)x^{e_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3291em;vertical-align:-0.9777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li>\n</ol>\n<h3 id=\"具有在实际中选取不同存储结构的判断能力\"><a href=\"#具有在实际中选取不同存储结构的判断能力\" class=\"headerlink\" title=\"具有在实际中选取不同存储结构的判断能力\"></a>具有在实际中选取不同存储结构的判断能力</h3><h4 id=\"顺序表和链表的比较\"><a href=\"#顺序表和链表的比较\" class=\"headerlink\" title=\"顺序表和链表的比较\"></a>顺序表和链表的比较</h4><p>（出自蓝皮书）</p>\n<ul>\n<li>顺序表<ul>\n<li>优点：</li>\n</ul>\n<ol>\n<li>时间上，它可以顺序存储，还可以随机存取，访问速度快；</li>\n<li>空间上，它的存储利用率高，不需要指针。</li>\n</ol>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>时间上，顺序表在插入删除时，如果需要保持原来的顺序，必须平均移动一半的元素，更新速度慢；</li>\n<li>空间上，如果采用静态分配的存储结构，一旦存储数组的空间已满，不能扩充，再插入元素将导致溢出。</li>\n</ol>\n</li>\n<li>链表<ul>\n<li>优点：</li>\n</ul>\n<ol>\n<li>时间上，插入删除不需要大量移动元素，只需修改指针，更新速度快；</li>\n<li>空间上，链表基本没有满和溢出的问题，只要内存可以分配节点，就可以扩充。</li>\n</ol>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>时间上，链表只能顺序访问，所以查找一个元素平均要搜索半个表，访问速度慢；</li>\n<li>空间上，每个元素需要附加一个指针，存储利用率较低。</li>\n<li>此外，由于链表的单线联系的特性，如果操作不慎，导致断链，将会丢失后面的所有元素。</li>\n</ol>\n</li>\n</ul>\n<p>（出自王道）</p>\n<ol>\n<li>存取（读&#x2F;写）方式</li>\n</ol>\n<ul>\n<li>顺序表可以顺序存取，也可以随机存；</li>\n<li>链表只能从表头开始依次顺序存取。</li>\n</ul>\n<ol start=\"2\">\n<li>逻辑结构与物理结构</li>\n</ol>\n<ul>\n<li>采用顺序存储时，逻辑上相邻的元素，对应的物理存储位置也相邻；</li>\n<li>采用链式存储时，逻辑上相邻的元素，物理存储位置不一定相邻，对应的逻辑关系是通过指针链接来表示的。</li>\n</ul>\n<ol start=\"3\">\n<li>查找、插入和删除操作</li>\n</ol>\n<ul>\n<li>对于按值查找，<ul>\n<li>顺序表无序时，两者的时间复杂度均为O(n)；</li>\n<li>顺序表有序时，可采用折半查找，此时的时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>对于按序号查找，<ul>\n<li>顺序表支持随机访问，时间复杂度为O(1)；</li>\n<li>链表的平均时间复杂度为O(n)。</li>\n</ul>\n</li>\n<li>插入、删除操作<ul>\n<li>顺序表平均需要移动半个表长的元素；</li>\n<li>链表只需修改相关结点的指针域即可。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>空间分配</li>\n</ol>\n<ul>\n<li>顺序存储<ul>\n<li>在静态存储分配情形下，<ul>\n<li>一旦存储空间装满就不能扩充，若再加入新元素，则会出现内存溢出，因此需要预先分配足够大的存储空间。</li>\n<li>预先分配过大，可能会导致顺序表后部大量闲置；预先分配过小，又会造成溢出。</li>\n</ul>\n</li>\n<li>在动态存储分配情形下，<ul>\n<li>虽然存储空间可以扩充，但需要移动大量元素，导致操作效率降低；</li>\n<li>而且若内存中没有更大块的连续存储空间，则会导致分配失败。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>链式存储<ul>\n<li>结点空间只在需要时申请分配，</li>\n<li>只要有内存就可以分配，</li>\n<li>操作灵活、高效。</li>\n<li>此外，由于链表的每个结点都带有指针域，因此存储密度不够大。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"在实际中怎样选取存储结构\"><a href=\"#在实际中怎样选取存储结构\" class=\"headerlink\" title=\"在实际中怎样选取存储结构\"></a>在实际中怎样选取存储结构</h4><p>（出自王道）</p>\n<ol>\n<li>基于存储的考虑</li>\n</ol>\n<ul>\n<li>难以估计线性表的长度或存储规模时，不宜采用顺序表；</li>\n<li>但链表的存储密度较低，显然链式存储结构的存储密度是小于1的。</li>\n</ul>\n<ol start=\"2\">\n<li>基于运算的考虑</li>\n</ol>\n<ul>\n<li>若经常做的运算是按序号访问数据元素，<strong>顺序表优于链表</strong>。<ul>\n<li>在顺序表中按序号访问<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的时间复杂度为O(1)；</li>\n<li>链表中按序号访问的时间复杂度为O(n)。</li>\n</ul>\n</li>\n<li>关于插入、删除操作。<ul>\n<li>在顺序表中进行插入、删除操作时，平均移动表中一半的元素，当数据元素的信息量较大且表较长时，这一点是不应忽视的；</li>\n<li>在链表中进行插入、删除操作时，虽然也要找插入位置，但操作主要是比较操作，从这个角度考虑显然<strong>链表优于顺序表</strong>。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>基于环境的考虑</li>\n</ol>\n<ul>\n<li>顺序表容易实现，任何高级语言中都有数组类型；</li>\n<li>链表的操作是基于指针的，相对来讲，前者实现较为简单，这也是用户考虑的一个因素。</li>\n<li>总之，两种存储结构各有长短，选择哪一种由实际问题的主要因素决定。</li>\n<li>通常较稳定的线性表选择顺序存储，而频繁进行插入、删除操作的线性表（即动态性较强）宜选择链式存储。</li>\n</ul>\n<h3 id=\"广义表\"><a href=\"#广义表\" class=\"headerlink\" title=\"广义表\"></a>广义表</h3><blockquote>\n<p>不记得在哪的知识点了，先写在这儿了。<br>内容来自<a href=\"https://www.cnblogs.com/kuailest/p/16743376.html\">博客</a>。</p>\n</blockquote>\n<h4 id=\"广义表的定义\"><a href=\"#广义表的定义\" class=\"headerlink\" title=\"广义表的定义\"></a>广义表的定义</h4><ul>\n<li><strong>线性表</strong> 线性表指的是n≥0个元素a1, a2, a3…的有序数列，并且线性表的元素具有原子性，即结构上是不可分割的一个整体。</li>\n<li><strong>广义表(Generalized list)</strong> 而广义表则是线性表的一种扩展延伸。相对于线性表，广义表最大的特点在于其元素既可以是一个确定的类型，同时也可以是另一个有不定数量的元素组成的表（广义表）。<br>不难看出从广义表的定义是递归的。广义表是线性表的递归数据结构。</li>\n</ul>\n<h4 id=\"广义表的基本概念\"><a href=\"#广义表的基本概念\" class=\"headerlink\" title=\"广义表的基本概念\"></a>广义表的基本概念</h4><ul>\n<li><p><strong>广义表的表示</strong><br>我们通常可以用 GL &#x3D; (a1, a2, a3… an)来表示一个广义表，其中n为表的长度，n≥0，当n&#x3D;&#x3D;0时，我们称广义表为空表，GL为广义表的名字。<br>为了能更好的区分广义表中的元素我们有以下定义：<br><strong>原子</strong> 如果ai是单个元素，我们称之为GL的原子<br><strong>子表</strong> 如果ai是一个广义表，我们陈之为GL的子表<br>我们通常把广义表中的原子用小写字母表示，而子表用大写字母表示。例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A=() //空表</span><br><span class=\"line\">B=(e) //只含有一个原子的广义表</span><br><span class=\"line\">C=(a,(b,c,d)) //含有一个原子和一个子表的广义表</span><br><span class=\"line\">D=(A,B,C)=((),(e),(a,(b,c,d))) //含有三个子表的广义表，且第一个表为空表</span><br><span class=\"line\">E=(a,E) //广义表 E 中有两个元素，原子 a 和它本身。这是一个递归广义表，等同于：E = (a,(a,(a,…)))。</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>广义表的深度和长度</strong><br><strong>广义表的长度</strong>： 广义表中元素的个数（包括原子和子表）<br><strong>广义表的深度</strong>： 广义表中括号的最大层数叫广义表的深度</p>\n</li>\n<li><p><strong>广义表的表头和表尾</strong><br><strong>表头</strong>： 当广义表不为空表时，第一个元素（可能为子表和原子）称为表头<br><strong>表尾</strong>： 除去表头，剩余元素组成的新广义表称为表尾<br>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LS=(1,(1,2,3),5), 其中表头Head(LS)为原子1，表尾为Tail(LS)=((1,2,3),5)</span><br><span class=\"line\">LS=(1), 其中表头Head(LS)为原子1，表尾为空表</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"广义表的存储结构\"><a href=\"#广义表的存储结构\" class=\"headerlink\" title=\"广义表的存储结构\"></a>广义表的存储结构</h4><p>广义表是一种递归的数据结构，它的元素有两种类型，因此很难为广义表分配固定的存储空间，所以其存储结构适合用链式存储结构。<br>为了能使原子和子表在结构上保持一致，又容易区分我们通常采用如下结构：<br><strong>广义表的第一种存储结构</strong><br><img src=\"/articles/9eb01842/GL_1.png\" width=80% height=70% /></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span>ATOM,LIST &#125; ElemTag; <span class=\"comment\">//ATOM==0:表示原子,LIST==1:表示子表</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">GLNode</span> &#123;</span></span><br><span class=\"line\">  ElemTag tag; <span class=\"comment\">//公共部分，用以区分原子部分和表结点</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span> <span class=\"comment\">//原子部分和表结点的联合部分</span></span><br><span class=\"line\">    AtomType atom; <span class=\"comment\">//atom是原子结点的值域,  AtomType由用户定义</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">GLNode</span> *<span class=\"title\">hp</span>, *<span class=\"title\">tp</span>;</span>&#125; ptr;</span><br><span class=\"line\">    <span class=\"comment\">// ptr是表结点的指针域,ptr.hp和ptr.tp分别指向表头和表尾</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125; *Glist; <span class=\"comment\">//广义表类型</span></span><br></pre></td></tr></table></figure>\n<p>e.g. 表示（a,(b,c,d)）<br><img src=\"/articles/9eb01842/GL_11.png\" width=100% height=70% /></p>\n<p><strong>广义表的第二种存储结构</strong><br><img src=\"/articles/9eb01842/GL_2.png\" width=80% height=70% /><br>第二种表示形式实际上就只是在原子中添加了tp指针指向下一个原子或子表</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Typedef <span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span> ATOM,LIST&#125; ElemTag;</span><br><span class=\"line\"><span class=\"comment\">//ATOM==0:表示原子,LIST==1:表示子表</span></span><br><span class=\"line\">Typedef <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">GLNode</span> &#123;</span></span><br><span class=\"line\">  ElemTag tag; <span class=\"comment\">//公共部分，用以区分原子部分和表结点</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span> <span class=\"comment\">//原子部分和表结点的联合部分</span></span><br><span class=\"line\">    AtomType atom; <span class=\"comment\">//原子结点的值域</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">GLNode</span> *<span class=\"title\">hp</span>;</span> <span class=\"comment\">//表结点的表头指针</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">GLNode</span> *<span class=\"title\">tp</span>;</span></span><br><span class=\"line\">  <span class=\"comment\">//相当于线性链表的next，指向下一个元素结点</span></span><br><span class=\"line\">&#125; *Glist; <span class=\"comment\">//广义表类型Glist 是一种扩展的线性链表</span></span><br></pre></td></tr></table></figure>\n<p>e.g. 表示（a,(b,c,d)）<br><img src=\"/articles/9eb01842/GL_22.png\" width=100% height=70% /></p>\n<h4 id=\"广义表的计算（以第二种存储结构为例）\"><a href=\"#广义表的计算（以第二种存储结构为例）\" class=\"headerlink\" title=\"广义表的计算（以第二种存储结构为例）\"></a>广义表的计算（以第二种存储结构为例）</h4><p>（<a href=\"https://zh.wikipedia.org/wiki/%E5%B9%BF%E4%B9%89%E8%A1%A8\">wiki</a>）D&#x3D;(( ),(e),(a,(b,c,d)))是多层次的广义表，长度为3，深度为3。<br><strong>广义表长度的计算</strong>（类似于链表的长度，直接统计tp）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">GLLength</span><span class=\"params\">(GLNode *g)</span> &#123; <span class=\"comment\">//g为一个广义表头节点的指针</span></span><br><span class=\"line\">  <span class=\"type\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\">  g=g-&gt;hp; <span class=\"comment\">//g指向广义表的第一个元素</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (g!=<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    n++;</span><br><span class=\"line\">    g=g-&gt;tp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>广义表的深度</strong>（括号的最大层数）<br>对于带头节点的广义表g,广义表深度的递归定义是它等于所有子表中表的最大深度加1。若g为原子,其深度为0。<br><img src=\"/articles/9eb01842/GL_3.png\" width=70% height=70% /><br>求广义表深度的递归模型f()如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">GLDepth</span><span class=\"params\">(GLNode *g)</span> &#123; <span class=\"comment\">//求带头节点的广义表g的深度</span></span><br><span class=\"line\">  <span class=\"type\">int</span> max=<span class=\"number\">0</span>,dep;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (g-&gt;tag==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">//为原子时返回0</span></span><br><span class=\"line\">  g=g-&gt;hp; <span class=\"comment\">//g指向第一个元素</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (g==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">//为空表时返回1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (g!=<span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">//遍历表中的每一个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (g-&gt;tag==<span class=\"number\">1</span>) &#123;　<span class=\"comment\">//元素为子表的情况</span></span><br><span class=\"line\">      dep=GLDepth(g); <span class=\"comment\">//递归调用求出子表的深度</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dep&gt;max) max=dep;</span><br><span class=\"line\">      <span class=\"comment\">//max为同一层所求过的子表中深度的最大值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g=g-&gt;tp; <span class=\"comment\">//使g指向下一个元素</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>(max+<span class=\"number\">1</span>); <span class=\"comment\">//返回表的深度</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、栈和队列\"><a href=\"#四、栈和队列\" class=\"headerlink\" title=\"四、栈和队列\"></a>四、栈和队列</h2><blockquote>\n<p>博客：<br><a href=\"https://cloud.tencent.com/developer/article/2456014\">栈的深度解析：顺序栈与链栈的实现</a><br><a href=\"https://cloud.tencent.com/developer/article/2456015\">队列的深度解析：链式队列的实现</a></p>\n</blockquote>\n<h3 id=\"栈的定义\"><a href=\"#栈的定义\" class=\"headerlink\" title=\"栈的定义\"></a>栈的定义</h3><ul>\n<li><strong>栈</strong>是一种后进先出（LIFO）的线性表，只允许在表尾进行插入和删除操作。</li>\n<li><strong>栈顶</strong>——<u>表尾端</u>（线性表允许进行插入和删除操作的那一端）。</li>\n<li><strong>栈底</strong>——<u>表头端</u>（线性表不允许进行插入和删除操作的那一端）。</li>\n<li><strong>空栈</strong>——不含任何元素的空表。</li>\n</ul>\n<h3 id=\"栈的逻辑结构\"><a href=\"#栈的逻辑结构\" class=\"headerlink\" title=\"栈的逻辑结构\"></a>栈的逻辑结构</h3><ul>\n<li>栈是操作受限的线性表，可被称为限定性的数据结构，其操作特性是后进先出（Last In First Out，LIFO）。</li>\n<li>栈是只允许在一端进行插入和删除操作的线性表，允许进行插入和删除操作的那一端称为栈顶，不允许进行插入和删除操作的另一端称为栈底。</li>\n</ul>\n<h3 id=\"栈的特点（考点没写）\"><a href=\"#栈的特点（考点没写）\" class=\"headerlink\" title=\"栈的特点（考点没写）\"></a>栈的特点（考点没写）</h3><ul>\n<li><strong>操作限制：</strong>只能在栈顶进行元素的添加（入栈）和移除（出栈）。</li>\n<li><strong>栈顶元素：</strong>当前可以访问和操作的元素。</li>\n<li><strong>空栈：</strong>栈为空时，无法进行出栈操作。</li>\n</ul>\n<h3 id=\"栈的操作特性（考点没写）\"><a href=\"#栈的操作特性（考点没写）\" class=\"headerlink\" title=\"栈的操作特性（考点没写）\"></a>栈的操作特性（考点没写）</h3><ul>\n<li>后进先出（Last In First Out，LIFO）</li>\n</ul>\n<h3 id=\"栈的基本操作\"><a href=\"#栈的基本操作\" class=\"headerlink\" title=\"栈的基本操作\"></a>栈的基本操作</h3><ul>\n<li><strong>入栈（Push）：</strong>将新元素添加到栈顶。</li>\n<li><strong>出栈（Pop）：</strong>移除并返回栈顶元素。</li>\n<li><strong>查看栈顶元素（GetTop）：</strong>返回栈顶元素，但不删除它。</li>\n<li><strong>判断是否为空（IsEmpty）：</strong>检查栈是否没有元素。</li>\n<li><strong>统计栈的大小（Size）：</strong>获取栈中有效元素个数。</li>\n</ul>\n<h3 id=\"栈的数学性质（考点没写）\"><a href=\"#栈的数学性质（考点没写）\" class=\"headerlink\" title=\"栈的数学性质（考点没写）\"></a>栈的数学性质（考点没写）</h3><ul>\n<li>当n个不同元素进栈时，出栈元素不同排列的个数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><msubsup><mi mathvariant=\"normal\">C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{n+1}\\mathrm{C}_{2n}^{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2484em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathrm\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4519em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span></span></span></span>。这个公式称为卡特兰数（Catalan）公式。</li>\n<li>证明：</li>\n</ul>\n<ol>\n<li>画个n*n条路（边）的方格，从一个顶点走到另一个斜对角的端点总共要走2n条边，从中选择n条边为竖着走或横着走（类比为进栈或出栈），剩下n条为横着走或竖着走，得到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"normal\">C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathrm{C}_{2n}^{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9314em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4519em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span></span></span></span>种方式。</li>\n<li>过了斜对角线的路径是有问题的，就是在某个前缀操作里边出栈次数多于入栈了（拿鬼出栈啊），求出这些非法路径的数目。</li>\n<li>设不能越过的对角线为y&#x3D;x，从(0,0)→(n,n)。画出y&#x3D;x+1，作为对称轴。若越过y&#x3D;x，与y&#x3D;x+1就会有交点，把第一次碰到y&#x3D;x+1以后的部分关于y&#x3D;x+1对称，路径变为(0,0)→(n-1,n+1)。显然每一条非法路径都可以这么变为(0,0)→(n-1,n+1)，而任何合法方案由于不接触直线y&#x3D;x+1，无论从哪个点对称都不是一条连续的路径。</li>\n<li>非法路径条数为(0,0)→(n-1,n+1)的方案数，为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"normal\">C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathrm{C}_{2n}^{n-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1205em;vertical-align:-0.2663em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8542em;\"><span style=\"top:-2.4337em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.1031em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2663em;\"><span></span></span></span></span></span></span></span></span></span>。</li>\n<li>合法路径数&#x3D;<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"normal\">C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup><mo>−</mo><msubsup><mi mathvariant=\"normal\">C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mo>=</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo></mrow><mrow><mi>n</mi><mo stretchy=\"false\">!</mo><mi>n</mi><mo stretchy=\"false\">!</mo></mrow></mfrac><mo>−</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo></mrow><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mrow><mi>n</mi><mo stretchy=\"false\">!</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>−</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo><mi>n</mi></mrow><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mi>n</mi><mo stretchy=\"false\">!</mo></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo stretchy=\"false\">[</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo><mi>n</mi></mrow><mrow><mi>n</mi><mo stretchy=\"false\">!</mo><mi>n</mi><mo stretchy=\"false\">!</mo></mrow></mfrac><mo stretchy=\"false\">]</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><msubsup><mi mathvariant=\"normal\">C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathrm{C}_ {2n}^{n}-\\mathrm{C}_{2n}^{n-1} =\\frac{(2n)!}{n!n!}-\\frac{(2n)!}{(n+1)!(n-1)!} =\\frac{(2n)!(n+1)}{n!n!(n+1)}-\\frac{(2n)!n}{(n+1)n!n!} =\\frac{1}{n+1}[\\frac{(2n)!(n+1)-(2n)!n}{n!n!}] =\\frac{1}{n+1} \\mathrm{C}_{2n}^{n} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9314em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4519em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1205em;vertical-align:-0.2663em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8542em;\"><span style=\"top:-2.4337em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.1031em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2663em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)!</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.53em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)!</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)!</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)!</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.53em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)!</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.53em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)!</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4133em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)!</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">−</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)!</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2484em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathrm\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4519em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ol>\n<h3 id=\"顺序栈的定义\"><a href=\"#顺序栈的定义\" class=\"headerlink\" title=\"顺序栈的定义\"></a>顺序栈的定义</h3><ul>\n<li><strong>顺序栈</strong>：采用顺序存储的栈，利用一组地址连续的存储单元依次存放<u>自栈底到栈顶</u>的数据元素，同时附设一个指针top指示栈顶元素在顺序栈中的位置。</li>\n</ul>\n<h3 id=\"链式栈的定义\"><a href=\"#链式栈的定义\" class=\"headerlink\" title=\"链式栈的定义\"></a>链式栈的定义</h3><ul>\n<li><strong>链栈</strong>：采用链式存储的栈。优点是便于多个栈共享存储空间和提高其效率，且不易发生栈溢出。</li>\n<li>通常用单链表实现，并规定所有操作都是在单链表的表头进行的。</li>\n</ul>\n<h3 id=\"顺序栈和链式栈的特点\"><a href=\"#顺序栈和链式栈的特点\" class=\"headerlink\" title=\"顺序栈和链式栈的特点\"></a>顺序栈和链式栈的特点</h3><table>\n<thead>\n<tr>\n<th><strong>特点</strong></th>\n<th><strong>顺序栈 (Sequential Stack)</strong></th>\n<th><strong>链式栈 (Linked Stack)</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>存储结构</strong></td>\n<td>基于数组实现</td>\n<td>基于链表实现</td>\n</tr>\n<tr>\n<td><strong>内存布局</strong></td>\n<td>内存连续</td>\n<td>内存不连续，元素间通过指针连接</td>\n</tr>\n<tr>\n<td><strong>内存管理</strong></td>\n<td>静态分配（可动态扩容）</td>\n<td>动态分配</td>\n</tr>\n<tr>\n<td><strong>空间效率</strong></td>\n<td>容量固定（可动态扩容，若超出初始容量则可能浪费空间）</td>\n<td>动态扩展，使用的空间与元素个数相匹配</td>\n</tr>\n<tr>\n<td><strong>访问速度</strong></td>\n<td>O(1) 时间复杂度</td>\n<td>O(1) 时间复杂度</td>\n</tr>\n<tr>\n<td><strong>空间复杂度</strong></td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td><strong>栈溢出</strong></td>\n<td>容易发生，尤其在固定容量情况下</td>\n<td>不易发生，除非系统内存耗尽</td>\n</tr>\n<tr>\n<td><strong>实现简单性</strong></td>\n<td>实现较为简单，适用于容量已知的情况</td>\n<td>实现复杂，需处理节点的动态分配与释放</td>\n</tr>\n<tr>\n<td><strong>元素访问</strong></td>\n<td>只能访问栈顶元素</td>\n<td>只能访问栈顶元素</td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>适合对栈容量有明确限制的场景</td>\n<td>适合不确定栈容量，且需频繁变化元素的场景</td>\n</tr>\n</tbody></table>\n<h3 id=\"顺序栈的基本操作\"><a href=\"#顺序栈的基本操作\" class=\"headerlink\" title=\"顺序栈的基本操作\"></a>顺序栈的基本操作</h3><ul>\n<li><p>定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> STACK_INIT_SIZE 100 <span class=\"comment\">//存储空间初始分配量</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> STACKINCREMENT 10 <span class=\"comment\">//存储空间分配增量</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  SELemType *base;</span><br><span class=\"line\">  SElemType *top;</span><br><span class=\"line\">  <span class=\"type\">int</span> stacksize; <span class=\"comment\">//栈的当前可使用的最大容量</span></span><br><span class=\"line\">&#125;SqStack;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">InitStack</span><span class=\"params\">(SqStack &amp;S)</span> &#123;</span><br><span class=\"line\">  S.base = (SElemType *)<span class=\"built_in\">malloc</span>(STACK_INIT_SIZE*<span class=\"keyword\">sizeof</span>(SElemType));</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!S.base) <span class=\"built_in\">exit</span>(OVERFLOW);</span><br><span class=\"line\">  S.top = S.base;</span><br><span class=\"line\">  S.stacksize = STACK_INIT_SIZE;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看栈顶元素</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">GetTop</span><span class=\"params\">(SqStack S, ElemType &amp;e)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(S.top == S.base) <span class=\"keyword\">return</span> ERROR; <span class=\"comment\">//栈空</span></span><br><span class=\"line\">  e = *(S.top<span class=\"number\">-1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>入栈</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入元素e为新的栈顶元素</span></span><br><span class=\"line\">Status <span class=\"title function_\">Push</span><span class=\"params\">(SqStack &amp;S, SElemType e)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(S.top - S.base &gt;= S.stacksize) &#123; <span class=\"comment\">//栈满，追加存储空间</span></span><br><span class=\"line\">    S.base = (SElemType *)<span class=\"built_in\">realloc</span>((S.stacksize+STACKINCREMENT)*<span class=\"keyword\">sizeof</span>(ElemType));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!S.base) <span class=\"built_in\">exit</span>(OVERFLOW);</span><br><span class=\"line\">    S.top = S.base + S.stacksize;</span><br><span class=\"line\">    S.stacksize +=STACKINCREMENT;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *S.top ++ = e;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出栈</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">Pop</span><span class=\"params\">(SqStack &amp;S, ElemType &amp;e)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(S.top == S.base) <span class=\"keyword\">return</span> ERROR; <span class=\"comment\">//栈空</span></span><br><span class=\"line\">  e = *--S.top;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>注</strong>：验证过<code>*S.top++ = e</code>和<code>e = *--S.top</code>，代码如下，输入结果为1。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *top;</span><br><span class=\"line\">    <span class=\"type\">int</span> *base;</span><br><span class=\"line\">    <span class=\"type\">int</span> stacksize;</span><br><span class=\"line\">&#125; SqStack;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span>&#123;</span><br><span class=\"line\">    SqStack S;</span><br><span class=\"line\">    S.base = (<span class=\"type\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>*<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    S.top = S.base;</span><br><span class=\"line\">    *S.top ++ = <span class=\"number\">1</span>;</span><br><span class=\"line\">    cout&lt;&lt;*--S.top&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>情况分析：<code>S.top = -1</code> 和 <code>S.top = 0</code>。注意：声明struct的时候，用的是<code>ElemType data[Maxsize]</code>，所以不要出现<code>top==Maxsize</code>时<code>S.data[top]</code>，先把top降掉。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>当 <code>S.top = -1</code> 时</strong></th>\n<th><strong>当 <code>S.top = 0</code> 时</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>初始时</strong></td>\n<td><code>S.top = -1</code></td>\n<td><code>S.top = 0</code></td>\n</tr>\n<tr>\n<td><strong>栈的第一个元素</strong></td>\n<td><code>S.data[0]</code></td>\n<td><code>S.data[0]</code></td>\n</tr>\n<tr>\n<td><strong>栈顶指针指向</strong></td>\n<td>指向栈顶元素</td>\n<td>指向栈顶元素的后一个元素</td>\n</tr>\n<tr>\n<td><strong>栈满条件</strong></td>\n<td><code>top == MAX_SIZE - 1</code></td>\n<td><code>top == MAX_SIZE</code></td>\n</tr>\n<tr>\n<td><strong>栈空条件</strong></td>\n<td><code>top == -1</code></td>\n<td><code>top == 0</code></td>\n</tr>\n<tr>\n<td><strong>进栈操作</strong></td>\n<td><code>判栈满，S.data[++top] = x;</code></td>\n<td><code>判栈满，S.data[top++] = x;</code></td>\n</tr>\n<tr>\n<td><strong>出栈操作</strong></td>\n<td><code>判栈空，x = S.data[top--];</code></td>\n<td><code>判栈空，x = S.data[--top];</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"链栈的基本操作\"><a href=\"#链栈的基本操作\" class=\"headerlink\" title=\"链栈的基本操作\"></a>链栈的基本操作</h3><ul>\n<li><p>声明（王道）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Linknode</span> &#123;</span></span><br><span class=\"line\">  ElemType data;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Linknode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;ListStack;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>链栈通常采用单链表实现，并规定所有操作都是在单链表的表头进行的。</p>\n</li>\n<li><p>这里规定链栈没有头结点，Lhead指向栈顶元素。</p>\n</li>\n</ul>\n<h3 id=\"共享栈（考点没写）\"><a href=\"#共享栈（考点没写）\" class=\"headerlink\" title=\"共享栈（考点没写）\"></a>共享栈（考点没写）</h3><ul>\n<li>利用栈底位置相对不变的特性，可让两个顺序栈共享一个一维数组空间，将两个栈的栈底分别设置在共享空间的两端，两个栈顶向共享空间的中间延伸。</li>\n<li>共享栈时为了更有效地利用存储空间，两个栈的空间相互调节，只有再整个存储空间被占满时才发生上溢。</li>\n<li>其存取数据的时间复杂度均为O(1)，所以对存取效率没什么影响。</li>\n</ul>\n<table>\n  <tr>\n    <th>共享栈</th>\n    <th>0号栈</th>\n    <th>1号栈</th>\n  </tr>\n  <tr>\n    <td>初始时</td>\n    <td>top0 = -1</td>\n    <td>top1 = Maxsize</td>\n  </tr>\n  <tr>\n    <td>栈的第一个元素</td>\n    <td>S.data[0]</td>\n    <td>S.data[Maxsize]</td>\n  </tr>\n  <tr>\n    <td>栈顶指针指向</td>\n    <td>指向栈顶元素</td>\n    <td>指向栈顶元素</td>\n  </tr>\n  <tr>\n    <td>栈满条件</td>\n    <td colspan=\"2\">top1 - top0 == 1</td>\n  </tr>\n  <tr>\n    <td>栈空条件</td>\n    <td>top0 == -1，0号栈空</td>\n    <td>top1 == Maxsize，1号栈空</td>\n  </tr>\n  <tr>\n    <td>进栈操作</td>\n    <td>判栈满，S.data[++top0] = x;</td>\n    <td>判栈满，S.data[--top1] = x;</td>\n  </tr>\n  <tr>\n    <td>出栈操作</td>\n    <td>判栈空，x = S.data[top0--];</td>\n    <td>判栈空，x = S.data[top1++];</td>\n  </tr>\n</table>\n\n<h3 id=\"队列的定义\"><a href=\"#队列的定义\" class=\"headerlink\" title=\"队列的定义\"></a>队列的定义</h3><ul>\n<li><strong>队列（Queue）简称队，</strong>是一种先进先出（First In  First Out, FIFO）的线性表，它只允许在表的一端进行插入，而在另一端删除元素。</li>\n<li>这和我们日常生活中的排队是一致的，最早进入队列的元素最早离开。</li>\n<li><strong>队尾（Front）</strong>——允许插入的一端。</li>\n<li><strong>队头（Rear）</strong>——允许删除的一端。</li>\n<li><strong>空队列</strong>——不含任何元素的空表。</li>\n</ul>\n<h3 id=\"队列的逻辑结构\"><a href=\"#队列的逻辑结构\" class=\"headerlink\" title=\"队列的逻辑结构\"></a>队列的逻辑结构</h3><ul>\n<li>队列是一种操作受限的线性表，只允许在表的一端进行插入，而在另一端删除元素，服从先进先出原则。允许插入的一端叫做队尾，允许删除的一端称为队头，队列为空时无法进行出队操作。</li>\n</ul>\n<h3 id=\"队列的操作特性（考点没写）\"><a href=\"#队列的操作特性（考点没写）\" class=\"headerlink\" title=\"队列的操作特性（考点没写）\"></a>队列的操作特性（考点没写）</h3><ul>\n<li>先进先出（FIFO）</li>\n</ul>\n<h3 id=\"队列的特点\"><a href=\"#队列的特点\" class=\"headerlink\" title=\"队列的特点\"></a>队列的特点</h3><ul>\n<li><strong>先进先出（FIFO）</strong>：最先进入的元素最先被移除。</li>\n<li><strong>操作限制</strong>：只能在队列的尾部入队，头部出队。</li>\n<li><strong>队首元素</strong>：队首是当前可以访问和移除的元素。</li>\n<li><strong>空队列</strong>：队列为空时无法进行出队操作。</li>\n<li><strong>动态大小</strong>：可以根据需要扩展或收缩。</li>\n</ul>\n<h3 id=\"队列的基本操作\"><a href=\"#队列的基本操作\" class=\"headerlink\" title=\"队列的基本操作\"></a>队列的基本操作</h3><ul>\n<li><strong>入队（Push）</strong>：将一个元素添加到队列的尾部。</li>\n<li><strong>出队（Pop）</strong>：从队列的头部移除并返回一个元素。</li>\n<li><strong>取队首元素（Front）</strong>：返回队首的元素，但不删除它。</li>\n<li><strong>取队尾元素（Back）</strong>：返回队尾的元素，但不删除它。</li>\n<li><strong>队列判空（isEmpty）</strong>：判断队列中是否有元素。</li>\n<li><strong>获取队列长度（Size）</strong>：获取队列中有效元素个数。</li>\n</ul>\n<h3 id=\"顺序队列的定义\"><a href=\"#顺序队列的定义\" class=\"headerlink\" title=\"顺序队列的定义\"></a>顺序队列的定义</h3><ul>\n<li><strong>顺序队列：</strong>采用顺序存储的队列，利用一块连续的存储单元存放队列中的元素，并附设两个指针front和rear分别指示队头和队尾元素在顺序队列中的位置。</li>\n</ul>\n<h3 id=\"链式队列的定义\"><a href=\"#链式队列的定义\" class=\"headerlink\" title=\"链式队列的定义\"></a>链式队列的定义</h3><ul>\n<li><strong>链队列</strong>是队列的链式表示，它实际上是一个同时有队头指针和队尾指针的单链表。<strong>头指针</strong>指向队头结点，尾指针指向<strong>队尾结点</strong>。</li>\n</ul>\n<h3 id=\"顺序队列和链式队列的特点\"><a href=\"#顺序队列和链式队列的特点\" class=\"headerlink\" title=\"顺序队列和链式队列的特点\"></a>顺序队列和链式队列的特点</h3><table>\n<thead>\n<tr>\n<th>特点</th>\n<th>顺序队列</th>\n<th>链式队列</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>存储结构</strong></td>\n<td>使用数组实现，连续存储元素</td>\n<td>使用链表实现，非连续存储元素</td>\n</tr>\n<tr>\n<td><strong>固定大小</strong></td>\n<td>队列的大小在创建时固定</td>\n<td>可以根据需要动态扩展</td>\n</tr>\n<tr>\n<td><strong>入队和出队效率</strong></td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td><strong>空间浪费</strong></td>\n<td>可能存在未使用的数组空间</td>\n<td>无空间浪费</td>\n</tr>\n<tr>\n<td><strong>队满判断</strong></td>\n<td>需要判定是否队满</td>\n<td>不需要判定队满</td>\n</tr>\n<tr>\n<td><strong>额外开销</strong></td>\n<td>无额外开销</td>\n<td>每个元素需存储指针，空间开销较大</td>\n</tr>\n</tbody></table>\n<h3 id=\"顺序队列的基本操作\"><a href=\"#顺序队列的基本操作\" class=\"headerlink\" title=\"顺序队列的基本操作\"></a>顺序队列的基本操作</h3><p>（例如，还有其他变换，比如&#x3D;1）这四个变换是用来锻炼思维和熟练度的，理清楚就可以举一反三了。</p>\n<table border=\"1\" style=\"border-collapse: collapse; text-align: center; width: 100%; height: 100px;\">\n  <tr>\n    <td style=\"position: relative; width: 24%; height: 80px;\">\n      <div style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(to top right, transparent 49%, black 50%, transparent 51%);\"></div>\n      <div style=\"position: absolute; bottom: 0; left: 0; width: 50%; height: 50%; display: flex; justify-content: center; align-items: center; font-size: 14px;\">\n        队头指针front\n      </div>\n      <div style=\"position: absolute; top: 0; right: 0; width: 50%; height: 50%; display: flex; justify-content: center; align-items: center; font-size: 14px;\">\n        队尾指针rear\n      </div>\n    </td>\n    <td style=\"font-size: 14px; width: 38%;\">① 指向队尾元素</td>\n    <td style=\"font-size: 14px; width: 38%;\">② 指向队尾元素的后一个位置</td>\n  </tr>\n  <tr>\n    <td style=\"font-size: 14px;\">① 指向队头元素</td>\n    <td>\n      <table border=\"1\" style=\"border: 2px solid; width: 100%; text-align: left;\">\n        <tr>\n          <td>初始时</td>\n          <td>Q.front=0; Q.rear=-1;</td>\n        </tr>\n        <tr>\n          <td>判空</td>\n          <td>Q.front==Q.rear+1</td>\n        </tr>\n        <tr>\n          <td>判满（若有限制长度为len）</td>\n          <td>Q.rear-Q.front==len-1</td>\n        </tr>\n        <tr>\n          <td>判再入队一个值，是否会“上溢出”</td>\n          <td>Q.rear+1>=Maxsize</td>\n        </tr>\n        <tr>\n          <td>进队</td>\n          <td>判“上溢出”和“满（若有）”，Q.rear++，赋值</td>\n        </tr>\n        <tr>\n          <td>出队</td>\n          <td>判空，取值，Q.front++</td>\n        </tr>\n      </table>\n    </td>\n    <td>\n      <table border=\"1\" style=\"border: 2px solid; width: 100%; text-align: left;\">\n        <tr>\n          <td>初始时</td>\n          <td>Q.front=Q.rear=0</td>\n        </tr>\n        <tr>\n          <td>判空</td>\n          <td>Q.front==Q.rear</td>\n        </tr>\n        <tr>\n          <td>判满（若有限制长度为len）</td>\n          <td>Q.rear-Q.front==len</td>\n        </tr>\n        <tr>\n          <td>判再入队一个值，是否会“上溢出”</td>\n          <td>Q.rear>=Maxsize</td>\n        </tr>\n        <tr>\n          <td>进队</td>\n          <td>判“上溢出”和“满（若有）”，赋值，Q.rear++</td>\n        </tr>\n        <tr>\n          <td>出队</td>\n          <td>判空，取值，Q.front++</td>\n        </tr>\n      </table>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"font-size: 14px;\">② 指向队头元素的前一个位置</td>\n    <td>\n      <table border=\"1\" style=\"border: 2px solid; width: 100%; text-align: left;\">\n        <tr>\n          <td>初始时</td>\n          <td>Q.front=-1; Q.rear=-1;</td>\n        </tr>\n        <tr>\n          <td>判空</td>\n          <td>Q.front==Q.rear</td>\n        </tr>\n        <tr>\n          <td>判满（若有限制长度为len）</td>\n          <td>Q.rear-Q.front==len</td>\n        </tr>\n        <tr>\n          <td>判再入队一个值，是否会“上溢出”</td>\n          <td>Q.rear+1>=Maxsize</td>\n        </tr>\n        <tr>\n          <td>进队</td>\n          <td>判“上溢出”和“满（若有）”，Q.rear++，赋值</td>\n        </tr>\n        <tr>\n          <td>出队</td>\n          <td>判空，Q.front++，取值</td>\n        </tr>\n      </table>\n    </td>\n    <td>\n      <table border=\"1\" style=\"border: 2px solid; width: 100%; text-align: left;\">\n        <tr>\n          <td>初始时</td>\n          <td>Q.front=-1; Q.rear=0;</td>\n        </tr>\n        <tr>\n          <td>判空</td>\n          <td>Q.front+1==Q.rear</td>\n        </tr>\n        <tr>\n          <td>判满（若有限制长度为len）</td>\n          <td>Q.rear-Q.front-1==len</td>\n        </tr>\n        <tr>\n          <td>判再入队一个值，是否会“上溢出”</td>\n          <td>Q.rear>=Maxsize</td>\n        </tr>\n        <tr>\n          <td>进队</td>\n          <td>判“上溢出”和“满（若有）”，赋值，Q.rear++</td>\n        </tr>\n        <tr>\n          <td>出队</td>\n          <td>判空，Q.front++，取值</td>\n        </tr>\n      </table>\n    </td>\n  </tr>\n</table>\n\n\n\n<h3 id=\"链队列的基本操作\"><a href=\"#链队列的基本操作\" class=\"headerlink\" title=\"链队列的基本操作\"></a>链队列的基本操作</h3><ul>\n<li><p>头指针指向队头结点，尾指针指向队尾结点，即单链表的最后一个结点。</p>\n</li>\n<li><p><strong>不带头结点时</strong>，当<code>Q.front==NULL &amp;&amp; Q.rear==NULL</code>时，链式队列为空。</p>\n</li>\n<li><p>入队时，建立一个新结点，将新结点插入到链表的尾部，并让Q.rear指向这个新插入的结点（若原队列为空队，则令Q.front也指向该结点 <strong>（带头结点时不用操作Q.front，因为它指向头结点）</strong>）。</p>\n</li>\n<li><p>出队时，首先判断队是否为空，若不空，则取出队头元素，将其从链表中摘除，并让Q.front指向下一个结点（若该结点为最后一个结点，则置Q.front和Q.rear都为NULL <strong>（带头结点时只需修改Q.front-&gt;next为下一个结点，Q.front不用动，Q.rear置为指向头结点）</strong>）。</p>\n</li>\n<li><p>不难看出，不带头结点的链式队列在操作上往往比较麻烦，因此通常将链式队列设计成一个<strong>带头结点</strong>的单链表，<strong>这样插入和删除操作就统一了</strong>。</p>\n</li>\n<li><p>用单链表表示的链式队列特别适合于数据元素变动比较大的情形，而且不存在队列满且产生溢出的问题。</p>\n</li>\n<li><p>另外，假如程序中要使用多个队列，与多个栈的情形一样，最好使用链式队列，这样就不会出现存储分配不合理和“溢出”的问题。</p>\n</li>\n<li><p>带头结点和不带头结点的操作是不一样的，要注意。</p>\n</li>\n<li><p>单链队列——队列的链式存储结构</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">QNode</span> &#123;</span></span><br><span class=\"line\">  QElemType data;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">QNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;QNode, *QueuePtr;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  QueuePtr front; <span class=\"comment\">//队头指针</span></span><br><span class=\"line\">  QueuePtr rear;</span><br><span class=\"line\">&#125;LinkQueue;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">InitQueue</span> <span class=\"params\">(LinkQueue &amp;Q)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//构造一个空队列</span></span><br><span class=\"line\">  Q.front = Q.rear = (QueuePtr)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(QNode));</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!Q.front) <span class=\"built_in\">exit</span>(OVERFLOW);</span><br><span class=\"line\">  Q.front -&gt; next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>销毁队列Q</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stauts <span class=\"title function_\">DestroyQueue</span> <span class=\"params\">(LinkQueue &amp;Q)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(Q.front) &#123;</span><br><span class=\"line\">    Q.rear = Q.front -&gt; next;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(Q.front);</span><br><span class=\"line\">    Q.front = Q.rear;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>入队——插入元素e为Q的新的队尾元素</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">EnQueue</span> <span class=\"params\">(LinkQueue &amp;Q, ElemType e)</span> &#123;</span><br><span class=\"line\">  p = (QueuePtr)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(QNode));</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!p) <span class=\"built_in\">exit</span>(OVERFLOW);</span><br><span class=\"line\">  p -&gt; data = e;</span><br><span class=\"line\">  p -&gt; next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  Q.rear -&gt; next = p;</span><br><span class=\"line\">  Q.rear = p; <span class=\"comment\">//别忘记这句！！！</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出队——若队列不空，则删除Q的队头元素，用e返回其值，并返回OK，否则返回ERROR</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">DeQueue</span><span class=\"params\">(LinkQueue &amp;Q, QElemType &amp;e)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(Q.front == Q.rear) <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">  p = Q.front -&gt; next;</span><br><span class=\"line\">  e = p -&gt; data;</span><br><span class=\"line\">  Q.front -&gt; next = p -&gt; next;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(Q.rear == p) Q.rear = Q.front;</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"顺序存储结构中实现循环队列的具体要求\"><a href=\"#顺序存储结构中实现循环队列的具体要求\" class=\"headerlink\" title=\"顺序存储结构中实现循环队列的具体要求\"></a>顺序存储结构中实现循环队列的具体要求</h3><ul>\n<li><p>在顺序队列中，<code>Q.rear==Maxsize</code>并不能作为判断队列满的条件，但在此时如果再插入新的队尾元素，会发生数组越界问题；</p>\n</li>\n<li><p>但此时又不宜像顺序栈那样通过 再分配 来扩大数组空间，因为队列的实际可用空间可能并未占满。这便是一种“假溢出”。</p>\n</li>\n<li><p>为解决这种“假溢出”问题，引出了<strong>循环队列</strong>的概念。将顺序队列臆造为一个环状的空间，即把存储队列元素的表<strong>从逻辑上</strong>视为一个环，称为<strong>循环队列</strong>。</p>\n</li>\n<li><p>当队首指针或队尾指针到达Maxsize-1后，若要再前进一个位置就自动到0，这里可以通过取模(%)的方式实现。</p>\n</li>\n<li><p>初始时：Q.front&#x3D;Q.rear&#x3D;0</p>\n</li>\n<li><p>队首指针进1：Q.front&#x3D;(Q.front+1)%Maxszie</p>\n</li>\n<li><p>队尾指针进1：Q.rear&#x3D;(Q.rear+1)%Maxsize</p>\n</li>\n<li><p>队列长度：(Q.rear+Maxsize-Q.front)%Maxsize</p>\n</li>\n<li><p>出队入队时：指针都按顺时针方向进1</p>\n</li>\n<li><p><strong>为了区分是队空还是堆满的情况，</strong>有3种处理方式：</p>\n<ol>\n<li>牺牲一个单元来区分队空和队满，入队时少用一个队列单元，这是一种较为普遍的做法，约定以“队头指针在队尾指针的下一个位置作为队满的标志”。<br>  队满条件：(Q.rear+1)%Maxsize&#x3D;&#x3D;Q.front；<br>  队空条件：Q.front &#x3D;&#x3D; Q.rear；<br>  队列中元素的个数：(Q.rear-Q.front+Maxsize)%Maxsize。</li>\n<li>类型中增设size数据成员，表示元素个数。删除成功size–，插入成功size++。<br>  队空条件：Q.size&#x3D;&#x3D;0；<br>  队满条件：Q.size&#x3D;&#x3D;Maxsize。<br>  两种情况都有Q.front&#x3D;&#x3D;Q.rear。</li>\n<li>类型中增设tag数据成员，以区分是队满还是队空。<br>  删除成功置tag&#x3D;0，若导致Q.front&#x3D;&#x3D;Q.rear，则为队空；<br>  插入成功置tag&#x3D;1，若导致Q.front&#x3D;&#x3D;Q.rear，则为队满。</li>\n</ol>\n</li>\n<li><p>在C语言中不能用动态分配的一维数组来实现循环队列。如果用户的应用程序中设有循环队列，则必须为它设定一个最大队列长度；若用户无法预估所用的队列的最大长度，则宜采用链队列。</p>\n</li>\n<li><p>这里会有很多变式，考试的时候随机应变，用手模特殊值，然后换成未知量的形式来做题即可。主要是记住队尾rear是入队，队头front是出队。</p>\n</li>\n</ul>\n<h4 id=\"循环队列——队列的顺序存储结构\"><a href=\"#循环队列——队列的顺序存储结构\" class=\"headerlink\" title=\"循环队列——队列的顺序存储结构\"></a>循环队列——队列的顺序存储结构</h4><ul>\n<li><p>类型声明</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXQSIZE 100 <span class=\"comment\">//最大队列长度</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  QElemType *base;</span><br><span class=\"line\">  <span class=\"type\">int</span> front;</span><br><span class=\"line\">  <span class=\"type\">int</span> rear;</span><br><span class=\"line\">&#125;SqQueue;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">InitQueue</span><span class=\"params\">(SqQueue &amp;Q)</span> &#123;</span><br><span class=\"line\">  Q.base = (QElemType *)alloc(MAXQSIZE*<span class=\"keyword\">sizeof</span>(QElemType));</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!Q.base) <span class=\"built_in\">exit</span>(OVERFLOW);</span><br><span class=\"line\">  Q.front = Q.rear = <span class=\"number\">0</span>; <span class=\"comment\">//合法操作，在C语言中，赋值操作不仅会将值赋给变量，还会返回这个值本身</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>返回Q的元素个数，即队列的长度</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">QueueLength</span><span class=\"params\">(SqQueue Q)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (Q.rear-Q.front+MAXQSIZE)%MAXSIZE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>入队</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">EnQueue</span><span class=\"params\">(SqQueue &amp;Q, QElemType e)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((Q.rear+<span class=\"number\">1</span>) % MAXQSIZE == Q.front) <span class=\"keyword\">return</span> ERROR; <span class=\"comment\">//队满</span></span><br><span class=\"line\">  Q.base[Q.rear] = e;</span><br><span class=\"line\">  Q.rear = (Q.rear + <span class=\"number\">1</span>) % MAXQSIZE;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出队</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">DeQueue</span><span class=\"params\">(SqQueue &amp;Q, QElemType &amp;e)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(Q.front == Q.rear) <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">  e = Q.base[Q.front];</span><br><span class=\"line\">  Q.front = (Q.front + <span class=\"number\">1</span>) % MAXQSIZE;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"理解递归调用和栈之间的关系\"><a href=\"#理解递归调用和栈之间的关系\" class=\"headerlink\" title=\"理解递归调用和栈之间的关系\"></a>理解递归调用和栈之间的关系</h3><ul>\n<li><p><strong>递归</strong>是一种重要的程序设计方法。简单地说，若在一个<u>函数、过程或数据结构</u>的定义中又应用了它自身，则这个<u>函数、过程、数据结构</u>被称为是递归定义的，简称递归。<br>它通常把一个大型的复杂问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的代码就可以描述出解题过程所需要的多次重复计算，<strong>大大减少了程序的代码量</strong>。但在通常情况下，<strong>它的效率并不是太高</strong>。</p>\n</li>\n<li><p>一个直接调用自己或通过一系列的调用语句间接地调用自己的函数，称做<strong>递归函数</strong>。</p>\n</li>\n<li><p>栈还有一个重要作用是在程序设计语言中实现递归。（可见栈可以用来实现递归）</p>\n</li>\n<li><p>阶乘函数</p>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Fact</mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>×</mo><mtext>Fact</mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>n</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">\\text{Fact}(n) =\n\\begin{cases}\n1 &amp; \\text{if } n = 0 \\\\\nn \\times \\text{Fact}(n - 1) &amp; \\text{if } n &gt; 0\n\\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Fact</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord text\"><span class=\"mord\">Fact</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">factorial</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// 0 的阶乘为 1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n * factorial(n - <span class=\"number\">1</span>); <span class=\"comment\">// 递归调用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Fibonacci数列</p>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Fibo</mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>Fibo</mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mtext>Fibo</mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">\\text{Fibo}(n) =\n\\begin{cases}\n0 &amp; \\text{if } n = 0 \\\\\n1 &amp; \\text{if } n = 1 \\\\\n\\text{Fibo}(n - 1) + \\text{Fibo}(n - 2) &amp; \\text{if } n &gt; 1\n\\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Fibo</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:4.32em;vertical-align:-1.91em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 316\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"/></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 316\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"/></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Fibo</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord text\"><span class=\"mord\">Fibo</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">fibonacci</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// F(0) = 0</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// F(1) = 1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fibonacci(n - <span class=\"number\">1</span>) + fibonacci(n - <span class=\"number\">2</span>); <span class=\"comment\">// 递归调用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>Ackerman函数<br>Ackermann 函数的定义通常限制 m 和 n 为非负整数。</p>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Ack</mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>m</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>Ack</mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>m</mi><mo>&gt;</mo><mn>0</mn><mtext> and </mtext><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>Ack</mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mtext>Ack</mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo separator=\"true\">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>m</mi><mo>&gt;</mo><mn>0</mn><mtext> and </mtext><mi>n</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">\\text{Ack}(m, n) =\n\\begin{cases}\nn + 1 &amp; \\text{if } m = 0 \\\\\n\\text{Ack}(m - 1, 1) &amp; \\text{if } m &gt; 0 \\text{ and } n = 0 \\\\\n\\text{Ack}(m - 1, \\text{Ack}(m, n - 1)) &amp; \\text{if } m &gt; 0 \\text{ and } n &gt; 0\n\\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Ack</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:4.32em;vertical-align:-1.91em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 316\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"/></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 316\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"/></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Ack</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Ack</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">Ack</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">))</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span><span class=\"mord text\"><span class=\"mord\"> and </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span><span class=\"mord text\"><span class=\"mord\"> and </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ackermann</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            n = <span class=\"number\">1</span>; <span class=\"comment\">// 当 n 为 0 时，设置 n 为 1</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用，使用一个栈来存储 m 和 n 的值</span></span><br><span class=\"line\">            n = ackermann(m, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        m--; <span class=\"comment\">// 减小 m 的值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n + <span class=\"number\">1</span>; <span class=\"comment\">// 返回 n + 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>递归是程序设计中一个强有力的工具</p>\n<ol>\n<li>很多数学函数是递归定义的，比如以上三种；</li>\n<li>有的数据结构，如<strong>二叉树、广义表</strong>等，由于结构本身固有的递归特性，则它们的操作可递归地描述；</li>\n<li>还有一类问题，虽然问题本身没有明显的递归结构，但用递归求解比迭代求解更简单，如<strong>八皇后问题、Hanoi塔问题</strong>等。</li>\n</ol>\n</li>\n<li><p>八皇后问题<br>八皇后问题是一个经典的回溯算法问题，其目标是在 8×8 的国际象棋棋盘上放置 8 个皇后，使得它们彼此之间不能互相攻击。皇后可以在同一行、同一列或对角线上攻击其他皇后。因此，解决八皇后问题的关键在于找到一种摆放方式，使得任意两个皇后不在同一行、同一列或同一对角线上。</p>\n<p><strong>问题描述：</strong></p>\n<ol>\n<li>将 8 个皇后放置在 8×8 的棋盘上。</li>\n<li>每一行放置一个皇后，最终找到一种摆放方案满足互不攻击的条件。</li>\n</ol>\n<p><strong>算法思路：</strong></p>\n<ol>\n<li>从第 1 行开始，每一行尝试放置一个皇后。</li>\n<li>对于当前行的每一列，检查该位置是否安全（即，不与前面的皇后冲突）。</li>\n<li>如果安全，则将皇后放置在该位置，递归地求解下一行。</li>\n<li>如果不安全或无法为下一行找到合法位置，则回溯到上一步，尝试在该行的下一个位置放置皇后。</li>\n</ol>\n<p><strong>判定位置安全性：</strong></p>\n<ol>\n<li>检查该列是否已有皇后。</li>\n<li>检查主对角线和副对角线上是否已有皇后（即，使用两条对角线数组记录状态）。</li>\n</ol>\n<p><strong>C语言实现</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N 8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> board[N]; <span class=\"comment\">// board[i] 表示第 i 行皇后所在的列索引</span></span><br><span class=\"line\"><span class=\"type\">int</span> solution_count = <span class=\"number\">0</span>; <span class=\"comment\">// 解的计数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断当前位置是否安全</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">isSafe</span><span class=\"params\">(<span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查列冲突和对角线冲突</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board[i] == col || <span class=\"built_in\">abs</span>(board[i] - col) == <span class=\"built_in\">abs</span>(i - row)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 递归回溯求解八皇后问题</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">solve</span><span class=\"params\">(<span class=\"type\">int</span> row)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row == N) &#123;</span><br><span class=\"line\">        solution_count++;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Solution %d:\\n&quot;</span>, solution_count);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; N; j++) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(board[i] == j ? <span class=\"string\">&quot; Q &quot;</span> : <span class=\"string\">&quot; . &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> col = <span class=\"number\">0</span>; col &lt; N; col++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSafe(row, col)) &#123;</span><br><span class=\"line\">            board[row] = col; <span class=\"comment\">// 放置皇后</span></span><br><span class=\"line\">            solve(row + <span class=\"number\">1</span>); <span class=\"comment\">// 递归放置下一行的皇后</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    solve(<span class=\"number\">0</span>); <span class=\"comment\">// 从第 0 行开始</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Total solutions: %d\\n&quot;</span>, solution_count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>运行结果</strong><br>每种解法都会在棋盘上打印出 Q 表示皇后的位置，. 表示空位。最后输出总共找到的解的数量。</p>\n</li>\n<li><p>Hanoi塔问题<br>汉诺塔问题（Tower of Hanoi）是一个经典的递归问题，起源于一个古老的传说。假设有三根柱子和一组大小不同（最小圆盘编号为1，最大圆盘编号为n）的圆盘，圆盘一开始按从大到小的顺序（下面大，上面小）堆叠在第一根柱子上。目标是将所有圆盘移动到第三根柱子上，并满足以下规则：</p>\n<ol>\n<li>每次只能移动一个圆盘。</li>\n<li>圆盘只能放在柱子上，并且必须保持小圆盘在大圆盘之上。</li>\n</ol>\n<p><strong>问题描述</strong><br>给定 n 个圆盘，设柱子分别为 A、B 和 C，将圆盘从 A 移动到 C，并使用 B 作为辅助柱子。<br><strong>递归思路</strong><br>汉诺塔问题可以用递归解决，通过将问题分解为子问题逐步求解：</p>\n<ol>\n<li>基本情况：当只有一个圆盘时，直接将圆盘从 A 移动到 C。</li>\n<li>递归情况：<br>  (1) 先将 n-1 个圆盘从 A 移动到 B（使用 C 作为辅助柱）。<br>  (2) 将第 n 个圆盘从 A 移动到 C。<br>  (3) 将 n-1 个圆盘从 B 移动到 C（使用 A 作为辅助柱）。<br>每次递归地解决 n-1 个圆盘的子问题，直到所有圆盘都被移动到目标柱上。<br><strong>C语言实现</strong><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">hanoi</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">char</span> from, <span class=\"type\">char</span> to, <span class=\"type\">char</span> aux)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Move disk 1 from %c to %c\\n&quot;</span>, from, to);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hanoi(n - <span class=\"number\">1</span>, from, aux, to);  <span class=\"comment\">// 将 n-1 个盘子从 from 移到 aux</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Move disk %d from %c to %c\\n&quot;</span>, n, from, to); <span class=\"comment\">// 将第 n 个盘子移到目标柱</span></span><br><span class=\"line\">    hanoi(n - <span class=\"number\">1</span>, aux, to, from);  <span class=\"comment\">// 将 n-1 个盘子从 aux 移到 to</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Enter the number of disks: &quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    hanoi(n, <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<strong>输出示例</strong><br>若n&#x3D;3<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Move disk 1 from A to C</span><br><span class=\"line\">Move disk 2 from A to B</span><br><span class=\"line\">Move disk 1 from C to B</span><br><span class=\"line\">Move disk 3 from A to C</span><br><span class=\"line\">Move disk 1 from B to A</span><br><span class=\"line\">Move disk 2 from B to C</span><br><span class=\"line\">Move disk 1 from A to C</span><br></pre></td></tr></table></figure>\n<strong>时间复杂度</strong><br>汉诺塔问题的时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2^n-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，因为每次增加一个盘子，操作数会翻倍。因此，汉诺塔问题适合用递归解法，但当 n 很大时计算量会非常大。</li>\n</ol>\n</li>\n<li><p>利用栈实现递归调用<br>（gpt给出的）<br><strong>递归调用的定义：</strong><br>递归是一种编程技术，其中一个函数直接或间接地调用自身。递归通常由两个部分组成：<strong>基例（终止条件）</strong>和<strong>递归步骤（即函数如何调用自身）</strong>。<br><strong>栈的作用：</strong><br>在计算机中，递归调用会使用调用栈（Call Stack）来管理函数调用。每当一个函数被调用时，系统会将<strong>该函数的状态（包括参数、局部变量、返回地址等）</strong>压入栈中。当函数执行完毕后，状态会从栈中弹出，<strong>并返回到调用该函数的位置</strong>。<br><strong>栈的增长：</strong><br>当递归调用发生时，每次调用都会在栈上增加一个新的帧（Frame）（调用栈中的每一层，它包含了特定函数调用的所有信息，如参数、局部变量、返回地址等）。如果递归深度较大，栈的空间可能会被耗尽，导致栈溢出（Stack Overflow）错误。<br><strong>基例的重要性：</strong><br>基例是防止无限递归的重要机制。如果没有适当的基例，递归会不断调用自身，直到耗尽栈空间。<br><strong>步骤：</strong></p>\n<ol>\n<li>初始化栈：创建一个栈，用于存储待处理的函数状态（如参数和局部变量）。</li>\n<li>入栈操作：将初始参数（或状态）压入栈中。</li>\n<li>循环处理：使用循环来处理栈中的元素：<br>(1) 从栈中弹出一个状态。<br>(2) 检查是否满足基例（一个或多个不需要再次递归的情况），如果满足，则处理结果（例如返回值）。<br>(3) 如果不满足基例，计算递归步骤，并将新的状态（参数）压入栈中。</li>\n<li>返回结果：继续处理直到栈为空，最终返回结果。<br>（书上的说法↓）<br>为了保证递归函数正确执行，系统需设立一个“递归工作栈”作为整个递归函数运行期间使用的数据存储区。每一层递归所需信息构成一个“工作记录”，其中包括所有的实在参数、所有的局部变量以及上一层的返回地址。每进入一层递归，就从栈顶弹出一个工作记录，则当前执行层的工作记录必是递归工作栈栈顶的工作记录，称这个记录为“活动记录”，并称指示活动记录的栈顶指针为“当前环境指针”。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"掌握栈和队列的经典应用\"><a href=\"#掌握栈和队列的经典应用\" class=\"headerlink\" title=\"掌握栈和队列的经典应用\"></a>掌握栈和队列的经典应用</h3><h4 id=\"栈的应用\"><a href=\"#栈的应用\" class=\"headerlink\" title=\"栈的应用\"></a>栈的应用</h4><ul>\n<li>递归调用↑</li>\n<li>数制转换<br>十进制→八进制：从低位到高位产生八进制数的各个数位，从高位到地位顺序输出。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">conversion</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  InitStack(S);</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;N);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(N) &#123;</span><br><span class=\"line\">    Push(S, N % <span class=\"number\">8</span>);</span><br><span class=\"line\">    N = N / <span class=\"number\">8</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!StackEmpty(S)) &#123;</span><br><span class=\"line\">    Pop(S, e);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>括号匹配的检验</li>\n</ul>\n<ol>\n<li>在算法中设置一个栈，每读入一个括号，若是右括号，则要么使置于栈顶的最急迫的期待得以消解，要么是不合法的情况；</li>\n<li>若是左括号，则作为一个新的更急迫的期待压入栈中，自然使原有的在栈中的所有未消解的期待的急迫性都降了一级。</li>\n<li>另外，在算法的开始和结束时，栈都应该是空的。</li>\n</ol>\n<ul>\n<li>行编辑程序<br>一个简单的行编辑程序的功能是：接受用户的从终端输入的程序或数据，并存入用户的数据区。由于用户在终端上进行输入时，不能保证不出差错，因此，若在编辑程序中，“每接受一个字符即存入用户数据区”的做法显然不是最恰当的。<br>较好的做法是，设立一个输入缓冲区，用以接受用户输入的一行字符，然后逐行存入用户数据区。允许用户输入出差错，并在发现有误时可以及时更正。<br>例如，当用户发现刚刚键入的一个字符是错的时，可补进一个退格符“#”，以表示前一个字符无效；如果发现当前键入的行内差错较多或难以补救，则可以键入一个退行符“@”，以表示当前行中的字符均无效。<br>例如，假设从终端接受了这样的两行字符：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whli##ilr#e(s#*s)</span><br><span class=\"line\">  outcha@putchar(*s++);</span><br></pre></td></tr></table></figure>\n则实际有效的是下列两行：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(*s)</span><br><span class=\"line\">  putchar(*s++);</span><br></pre></td></tr></table></figure>\n为此，可设这个输入缓冲区为一个栈结构，每当从终端接受了一个字符之后先作如下判别：</li>\n</ul>\n<ol>\n<li>如果它既不是退格符也不是退行符，则将该字符压入栈顶；</li>\n<li>如果是一个退格符，则从栈顶删去一个字符；</li>\n<li>如果它是一个退行符，则将字符栈清为空栈。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">LineEdit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  InitStack(S);</span><br><span class=\"line\">  ch = getchar(); <span class=\"comment\">//从终端接收第一个字符</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch!=EOF) &#123; <span class=\"comment\">//EOF为全文结束符</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch!=EOF&amp;&amp;ch!=<span class=\"string\">&#x27;\\n&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(ch) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;#&#x27;</span>: Pop(S, c); <span class=\"keyword\">break</span>; <span class=\"comment\">//仅当栈非空时退栈</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;@&#x27;</span>: ClearStack(S); <span class=\"keyword\">break</span>; <span class=\"comment\">//重置S为空栈</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>: Push(S,ch); <span class=\"keyword\">break</span>; <span class=\"comment\">//有效字符进栈，未考虑栈满情形</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ch = getchar(); <span class=\"comment\">//从终端接收下一个字符</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    将从栈底到栈顶的栈内字符传送至调用过程的数据区;</span><br><span class=\"line\">    ClearStack(S); <span class=\"comment\">//重置S为空栈</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ch != EOF) ch = getchar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  DestroyStack(S);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>迷宫求解<br>BFS用队列，DFS用栈。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//BFS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> directions[<span class=\"number\">4</span>][<span class=\"number\">2</span>] = &#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">isValid</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> n, <span class=\"type\">int</span> m, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; maze, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;&gt;&amp; visited)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class=\"number\">0</span> &amp;&amp; y &lt; m &amp;&amp; maze[x][y] == <span class=\"number\">0</span> &amp;&amp; !visited[x][y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">bfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; maze)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = maze.size();</span><br><span class=\"line\">    <span class=\"type\">int</span> m = maze[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;&gt; visited(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;(m, <span class=\"literal\">false</span>));</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Starting point</span></span><br><span class=\"line\">    q.push(&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    visited[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> steps = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> size = q.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> [x, y] = q.front();</span><br><span class=\"line\">            q.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Check if we reached the end</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x == n - <span class=\"number\">1</span> &amp;&amp; y == m - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> steps;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; dir : directions) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> nx = x + dir[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"type\">int</span> ny = y + dir[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isValid(nx, ny, n, m, maze, visited)) &#123;</span><br><span class=\"line\">                    q.push(&#123;nx, ny&#125;);</span><br><span class=\"line\">                    visited[nx][ny] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        steps++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// If there&#x27;s no path to the destination</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//DFS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> directions[<span class=\"number\">4</span>][<span class=\"number\">2</span>] = &#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; maze, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;&gt;&amp; visited, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> n, <span class=\"type\">int</span> m)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// If out of bounds or not a path, return false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || x &gt;= n || y &lt; <span class=\"number\">0</span> || y &gt;= m || maze[x][y] == <span class=\"number\">1</span> || visited[x][y]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check if reached destination</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == n - <span class=\"number\">1</span> &amp;&amp; y == m - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    visited[x][y] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; dir : directions) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> nx = x + dir[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> ny = y + dir[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dfs(maze, visited, nx, ny, n, m)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// Path found</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// No path found from this cell</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">hasPathDFS</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; maze)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = maze.size();</span><br><span class=\"line\">    <span class=\"type\">int</span> m = maze[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;&gt; visited(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;(m, <span class=\"literal\">false</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dfs(maze, visited, <span class=\"number\">0</span>, <span class=\"number\">0</span>, n, m);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//书上写的（用栈）</span></span><br><span class=\"line\"><span class=\"comment\">//看不下去，太乱了</span></span><br></pre></td></tr></table></figure></li>\n<li>表达式求值<br><code>#</code>是表达式的结束符，为了算法简洁，在表达式的最左边也虚设一个<code>#</code>构成整个表达式的一对括号。<br><code>(</code>和<code>)</code>相遇时，表示括号内的运算已经完成，<code>#</code>和<code>#</code>相遇时表示整个表达式求值完毕。<br>两个工作栈，OPTR寄存运算符，OPND寄存操作数或运算结果。<br>对算术表达式<code>3*(7-2)</code>求值<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th><code>OPTR</code> 栈</th>\n<th><code>OPND</code> 栈</th>\n<th>输入字符</th>\n<th>主要操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td><code>#</code></td>\n<td></td>\n<td><u>3</u>*(7-2)#</td>\n<td><code>PUSH(OPND, &#39;3&#39;)</code></td>\n</tr>\n<tr>\n<td>2</td>\n<td><code>#</code></td>\n<td>3</td>\n<td><u>*</u>(7-2)#</td>\n<td><code>PUSH(OPTR, &#39;*&#39;)</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>#*</code></td>\n<td>3</td>\n<td><u>(</u>7-2)#</td>\n<td><code>PUSH(OPTR, &#39;(&#39;)</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td><code>#*(</code></td>\n<td>3</td>\n<td><u>7</u>-2)#</td>\n<td><code>PUSH(OPND, &#39;7&#39;)</code></td>\n</tr>\n<tr>\n<td>5</td>\n<td><code>#*(</code></td>\n<td>3 7</td>\n<td><u>-</u>2)#</td>\n<td><code>PUSH(OPTR, &#39;-&#39;)</code></td>\n</tr>\n<tr>\n<td>6</td>\n<td><code>#*(-</code></td>\n<td>3 7</td>\n<td><u>2</u>)#</td>\n<td><code>PUSH(OPND, &#39;2&#39;)</code></td>\n</tr>\n<tr>\n<td>7</td>\n<td><code>#*(-</code></td>\n<td>3 7 2</td>\n<td><u>)</u>#</td>\n<td><code>OPERATE(&#39;7&#39;, &#39;-&#39;, &#39;2&#39;)</code></td>\n</tr>\n<tr>\n<td>8</td>\n<td><code>#*(</code></td>\n<td>3 5</td>\n<td>)#</td>\n<td><code>POP(OPTR)&#123;消去一对括号&#125;</code></td>\n</tr>\n<tr>\n<td>9</td>\n<td><code>#*</code></td>\n<td>3 5</td>\n<td>#</td>\n<td><code>OPERATE(&#39;3&#39;, &#39;*&#39;, &#39;5&#39;)</code></td>\n</tr>\n<tr>\n<td>10</td>\n<td><code>#</code></td>\n<td>15</td>\n<td>#</td>\n<td><code>RETURN(GETTOP(OPND))</code></td>\n</tr>\n</tbody></table>\n</li>\n<li>前缀、中缀、后缀表达式<br>前缀表达式：- + A * B - C D &#x2F; E F<br>中缀表达式：A + B * (C - D) - E &#x2F; F<br>后缀表达式：A B C D - * + E F &#x2F; -<br>前缀、中缀、后缀表达式分别对应表达式树的先序、中序、后序遍历。中缀表达式的括号是必须的。</li>\n</ul>\n<p><strong>转换中缀表达式为前缀表达式的步骤</strong></p>\n<ol>\n<li>首先构造一个运算符栈（也可放置括号），栈中的运算符（以括号为分界点）按照<strong>越往栈顶优先级不降低</strong>的原则进行排列。</li>\n<li>从右至左扫描中缀表达式，从右边第一个字符开始判断：<ul>\n<li>如果当前字符是数字，则分析到数字串的结尾并将数字串直接输出。</li>\n<li>如果是运算符，则比较优先级：<ul>\n<li>如果当前运算符的<strong>优先级大于等于</strong>栈顶运算符的优先级（当栈顶是括号时，直接入栈），则将运算符直接<strong>入栈</strong>。</li>\n<li>否则，将栈顶运算符出栈并输出，直到当前运算符的优先级大于等于栈顶运算符的优先级（当栈顶是括号时，直接入栈），再将当前运算符入栈。</li>\n</ul>\n</li>\n<li>如果是括号，则根据括号的方向进行处理：<ul>\n<li>如果是右括号，则直接入栈；</li>\n<li>否则，在遇到左括号之前，将所有的运算符全部出栈并输出；遇到右括号后将左右括号一起出栈（但不输出）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>重复步骤 2，直到扫描结束，将栈内剩余运算符全部出栈并输出。最后逆序输出字符串，中缀表达式就转换为前缀表达式了。</li>\n</ol>\n<p><strong>转换示例表格</strong><br>将中缀表达式“1+((2+3)*4)-5”转换为前缀表达式。</p>\n<table>\n<thead>\n<tr>\n<th>中缀表达式</th>\n<th>前缀表达式</th>\n<th>运算符栈（栈顶）</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5</td>\n<td>5</td>\n<td>空</td>\n<td><code>5</code> 是数字串，直接输出</td>\n</tr>\n<tr>\n<td>-</td>\n<td>5</td>\n<td>-</td>\n<td><code>-</code> 栈内无运算符，直接入栈</td>\n</tr>\n<tr>\n<td>)</td>\n<td>5</td>\n<td>- )</td>\n<td><code>)</code> 直接入栈</td>\n</tr>\n<tr>\n<td>4</td>\n<td>5 4</td>\n<td>- )</td>\n<td><code>4</code> 是数字串，直接输出</td>\n</tr>\n<tr>\n<td>*</td>\n<td>5 4</td>\n<td>- ) *</td>\n<td><code>*</code> 栈顶是括号，直接入栈</td>\n</tr>\n<tr>\n<td>)</td>\n<td>5 4</td>\n<td>- ) * )</td>\n<td><code>)</code> 直接入栈</td>\n</tr>\n<tr>\n<td>3</td>\n<td>5 4 3</td>\n<td>- ) * )</td>\n<td><code>3</code> 是数字串，直接输出</td>\n</tr>\n<tr>\n<td>+</td>\n<td>5 4 3</td>\n<td>- ) * ) +</td>\n<td><code>+</code> 栈顶是括号，直接入栈</td>\n</tr>\n<tr>\n<td>2</td>\n<td>5 4 3 2</td>\n<td>- ) * ) +</td>\n<td><code>2</code> 是数字串，直接输出</td>\n</tr>\n<tr>\n<td>(</td>\n<td>5 4 3 2 +</td>\n<td>- ) *</td>\n<td><code>(</code> 抵消栈中最后一个 <code>)</code> 并释放它们之间的 <code>+</code></td>\n</tr>\n<tr>\n<td>(</td>\n<td>5 4 3 2 + *</td>\n<td>-</td>\n<td><code>(</code> 抵消方法同上</td>\n</tr>\n<tr>\n<td>+</td>\n<td>5 4 3 2 + *</td>\n<td>- +</td>\n<td><code>+</code> 优先级大于等于栈顶运算符，直接入栈</td>\n</tr>\n<tr>\n<td>1</td>\n<td>5 4 3 2 + * 1</td>\n<td>- +</td>\n<td><code>1</code> 是数字串，直接输出</td>\n</tr>\n<tr>\n<td>空</td>\n<td>5 4 3 2 + * 1 + -</td>\n<td>空</td>\n<td>扫描结束，将栈内剩余运算符全部出栈并输出</td>\n</tr>\n<tr>\n<td>空</td>\n<td>- + 1 * + 2 3 4 5</td>\n<td>空</td>\n<td>逆序输出字符串</td>\n</tr>\n</tbody></table>\n<p><strong>中缀表达式转后缀表达式的步骤</strong></p>\n<ol>\n<li>设定一个运算符栈。</li>\n<li>假设表达式的结束符为 <code>#</code>，并预设运算符栈底元素也为 <code>#</code>。</li>\n<li>扫描表达式，按以下规则处理每个字符：<ul>\n<li>如果当前字符是操作数，则直接添加到后缀表达式中。</li>\n<li>如果当前字符是运算符且优先级<strong>高于</strong>栈顶运算符，则将其入栈；否则，将从栈顶开始，依次<strong>弹出</strong>栈中<strong>优先级高于或等于</strong>当前运算符的所有运算符，并加入后缀表达式，然后将当前运算符入栈。</li>\n<li>如果当前字符是结束符 <code>#</code>，则依次将栈中剩余的运算符出栈并添加到后缀表达式。</li>\n<li>如果当前字符是左括号 <code>(</code>，则直接入栈。</li>\n<li>如果当前字符是右括号 <code>)</code>，则从栈顶开始，依次将运算符出栈并添加到后缀表达式，直到遇到左括号 <code>(</code>。将 <code>(</code> 出栈，但不添加到后缀表达式中，然后继续扫描表达式。</li>\n</ul>\n</li>\n</ol>\n<p>（详见gpt和王道p93，书上没看到有写,2018真题有考小题目）</p>\n<h4 id=\"队列的应用\"><a href=\"#队列的应用\" class=\"headerlink\" title=\"队列的应用\"></a>队列的应用</h4><ul>\n<li><p>离散事件模拟<br>书p65。讲的是模拟银行业务，不同的客户在随机时间到达，如果前边有其他客户还在办理业务则需要等待。计算客户的平均逗留时间。<br>每个窗口都被设置成一个<strong>队列</strong>，客户到达银行时排队排在人数最少的那个队伍后边。总之就是用到了<strong>队列</strong>。</p>\n</li>\n<li><p>队列在层次遍历（BFS）中需要用到。</p>\n</li>\n<li><p>数据缓冲区</p>\n</li>\n<li><p>CPU（即中央处理器，它包括运算器和控制器）资源的竞争。在一个带有多终端的计算机系统上，有多个用户需要CPU各自运行自己的程序，它们分别通过各自的终端向操作系统提出占用CPU的请求。操作系统通常按照每个请求在时间上的先后顺序，把它们排成一个<strong>队列</strong>，每次把CPU分配给队首请求的用户使用。当相应的程序运行结束或用完规定的时间间隔后，令其出队，再把CPU分配给新的队首请求的用户使用。这样既满足每个用户的请求，又使CPU能够正常运行。</p>\n</li>\n<li><p>（看一下书p49、p65，王道里也有内容别忘记）</p>\n</li>\n</ul>\n<h2 id=\"五、二叉树、树和森林\"><a href=\"#五、二叉树、树和森林\" class=\"headerlink\" title=\"五、二叉树、树和森林\"></a>五、二叉树、树和森林</h2><h3 id=\"二叉树、树、森林的定义以及它们之间的异同点\"><a href=\"#二叉树、树、森林的定义以及它们之间的异同点\" class=\"headerlink\" title=\"二叉树、树、森林的定义以及它们之间的异同点\"></a>二叉树、树、森林的定义以及它们之间的异同点</h3><h4 id=\"二叉树的定义\"><a href=\"#二叉树的定义\" class=\"headerlink\" title=\"二叉树的定义\"></a>二叉树的定义</h4><ul>\n<li><strong>二叉树</strong>是一种树型结构，它的特点是每个结点至多只有两棵子树（即二叉树中不存在度大于2的结点），并且二叉树的子树有左右之分，其次序不能任意颠倒。</li>\n</ul>\n<ol>\n<li>二叉树可以为<strong>空</strong>，或由一个根节点和两个互不相交的分别被称为左子树和右子树的二叉树组成。</li>\n<li>二叉树是有序树。<br>  (1) 若将其左、右子树颠倒，则成为另一棵不同的二叉树。<br>  (2) 即使树中结点只有一棵子树，也要区分它是左子树还是右子树。</li>\n<li>二叉树与度为2的有序树的区别：<br>  (1) 度为2的树至少有3个结点（因为至少要有一个结点的度为2）。<br>  (2) 度为2的有序树，若某个结点只有一个孩子，则这个孩子就无须区分其左右次序；而二叉树不管孩子是否是2个，都区分次序。</li>\n<li>非空二叉树上的<strong>叶结点数</strong>等于<strong>度为2的结点数</strong>加<strong>1</strong>，即n0&#x3D;n2+1。<blockquote>\n<p><strong>证明：</strong> ①结点总数n&#x3D;n0+n1+n2 ②除根节点外，其余结点都有一个<strong>分支进入</strong>，n&#x3D;B（分支总数）+1 ③这些分支是由度为1或2的结点<strong>射出</strong>的，B&#x3D;n1+2n2 ④n0+n1+n2&#x3D;n1+2n2+1，则n0&#x3D;n2+1。</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li><strong>度为m的树和m叉树的区别</strong><br>度为m的树：至少有一个节点的度为m。<br>m叉树：允许所有节点的度&lt;m，可以是空树。</li>\n</ul>\n<table>\n  <tr>\n    <th style=\"text-align: center;\"></th>\n    <th style=\"text-align: center;\">度为 m</th>\n    <th style=\"text-align: center;\">m 叉树</th>\n  </tr>\n  <tr>\n    <td style=\"text-align: center;\">结点数与度数</td>\n    <td colspan=\"2\" style=\"text-align: center;\">结点数 = 度数 + 1</td>\n  </tr>\n  <tr>\n    <td style=\"text-align: center;\">第 i 层上结点数</td>\n    <td colspan=\"2\" style=\"text-align: center;\">第 i 层上最多有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>m</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">m^{i-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> 个结点（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i \\geq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7955em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>）</td>\n  </tr>\n  <tr>\n    <td style=\"text-align: center;\">高度为 h，总结点数</td>\n    <td colspan=\"2\" style=\"text-align: center;\">至多有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><msup><mi>m</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{m^h - 1}{m - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.4463em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0429em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.927em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 个结点</td>\n  </tr>\n  <tr>\n    <td style=\"text-align: center;\"><b>高度为 h，总结点数</b></td>\n    <td style=\"text-align: center;\"><b>至少有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo>+</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">h + m - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 个结点</b></td>\n    <td style=\"text-align: center;\"><b>至少有 h 个结点</b></td>\n  </tr>\n  <tr>\n    <td style=\"text-align: center;\">有 n 个结点，</td>\n    <td colspan=\"2\" style=\"text-align: center;\">最小高度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>m</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo></mrow><annotation encoding=\"application/x-tex\">\\lceil \\log_m(n(m - 1) + 1) \\rceil</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0573em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)⌉</span></span></span></span>，根据<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mfrac><mrow><msup><mi>m</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">n \\leq \\frac{m^h - 1}{m - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4463em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0429em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.927em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>得出</td>\n  </tr>\n  <tr>\n    <td style=\"text-align: center;\"><b>有 n 个结点，</b></td>\n    <td style=\"text-align: center;\"><b>最大高度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mi>m</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n - m + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></b></td>\n    <td style=\"text-align: center;\"><b>最大高度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mi>m</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n - m + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></b></td>\n  </tr>\n</table>\n\n<ul>\n<li><strong>满二叉树</strong><br>一棵高度为h，且有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^h-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9324em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>个结点的二叉树称为<strong>满二叉树</strong>，即二叉树中的每层都含有最多的结点。<br>（与树相似，二叉树也以递归的形式定义）</li>\n</ul>\n<ol>\n<li><strong>叶结点</strong>都集中在二叉树的<strong>最下一层</strong></li>\n<li>除叶结点外的每个结点<strong>度数均为2</strong>。</li>\n<li>可以按照层次对满二叉树进行编号，自上而下，自左向右。对于编号为<code>i</code>的结点，</li>\n</ol>\n<ul>\n<li><p>若有双亲（<code>i&gt;1</code>），则其<strong>双亲</strong>为<code>⌊i/2⌋</code></p>\n</li>\n<li><p>若有左孩子，则其<strong>左孩子</strong>为<code>2i</code></p>\n</li>\n<li><p>若有有孩子，则其<strong>右孩子</strong>为<code>2i+1</code></p>\n<img src=\"/articles/9eb01842/满二叉树.jpg\" />\n</li>\n<li><p><strong>完全二叉树</strong><br>高度为h，有n个结点的二叉树，<strong>当且仅当</strong>其每个结点都与高度为h的<strong>满二叉树</strong>中编号为1～n的结点<strong>一一对应</strong>时，称为<strong>完全二叉树</strong>。</p>\n</li>\n</ul>\n<ol>\n<li>若<code>i≤⌊n/2⌋</code>，则结点<code>i</code>为<strong>分支节点</strong>，<u>否则为叶结点</u>。</li>\n<li><strong>叶结点</strong>只可能在<strong>层次最大的两层上</strong>出现。对于<strong>最大层次</strong>中的叶结点，都依次排列在该层<strong>最左边</strong>的位置上。</li>\n<li>若有<strong>度为1的结点</strong>，则<strong>最多只可能有一个</strong>，且该结点<strong>只有左孩子</strong>而无右孩子。</li>\n<li><strong>按层次编号后</strong>，一旦出现某结点（编号为i）<strong>为叶结点或只有左孩子</strong>，则<strong>编号大于i</strong>的结点均为<strong>叶结点</strong>。</li>\n<li>若<strong>n为奇数</strong>，则<strong>每个分支节点都有左孩子和右孩子</strong>；若<strong>n为偶数</strong>，则编号最大的分支节点（编号为<strong>n&#x2F;2</strong>）<strong>只有左孩子</strong>，没有右孩子，其余分支节点左、右孩子都有。</li>\n<li>（和满二叉树一样）对于编号为<code>i</code>的结点，</li>\n</ol>\n<ul>\n<li>若有双亲（<code>i&gt;1</code>），则其<strong>双亲</strong>为<code>⌊i/2⌋</code></li>\n<li>若有左孩子，则其<strong>左孩子</strong>为<code>2i</code></li>\n<li>若有有孩子，则其<strong>右孩子</strong>为<code>2i+1</code></li>\n</ul>\n<ol start=\"7\">\n<li>结点<code>i</code>所在层次（深度）为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo></mrow><annotation encoding=\"application/x-tex\">\\lceil log_2(i+1) \\rceil</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)⌉</span></span></span></span>或<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>i</mi><mo stretchy=\"false\">⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\lfloor log_2 i \\rfloor + 1 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>（情况与8一致，证明见下）</li>\n<li>有n(n&gt;0)个结点的完全二叉树的高度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo></mrow><annotation encoding=\"application/x-tex\">\\lceil log_2(n+1) \\rceil</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)⌉</span></span></span></span>或<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\lfloor log_2 n \\rfloor + 1 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>。<blockquote>\n<p><strong>证明：</strong>①<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>&lt;</mo><mi>n</mi><mo>≤</mo><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn><mtext>或者</mtext><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>≤</mo><mi>n</mi><mo>&lt;</mo><msup><mn>2</mn><mi>h</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^{h-1}-1 &lt; n \\leq 2^h-1 或者 2^{h-1} \\leq n &lt; 2^h </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9324em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9324em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9851em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">或者</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span></span></span></span> ②得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>&lt;</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>≤</mo><msup><mn>2</mn><mi>h</mi></msup><mo separator=\"true\">,</mo><mtext>  </mtext><mi>h</mi><mo>−</mo><mn>1</mn><mo>&lt;</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>h</mi><mtext>  </mtext><mtext>或者得</mtext><mtext>  </mtext><mi>h</mi><mo>−</mo><mn>1</mn><mo>≤</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo>&lt;</mo><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">2^{h-1} &lt; n+1 \\leq 2^h, \\; h-1 &lt; log_2 (n+1) \\leq h \\; 或者得 \\; h-1 \\leq log_2 n &lt; h </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8882em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0435em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord cjk_fallback\">或者得</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span> ③∴ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo>=</mo><mo stretchy=\"false\">⌈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo><mtext>或者</mtext><mi>h</mi><mo>=</mo><mo stretchy=\"false\">⌊</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">h=\\lceil log_2(n+1) \\rceil 或者 h=\\lfloor log_2 n \\rfloor +1 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)⌉</span><span class=\"mord cjk_fallback\">或者</span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n</blockquote>\n</li>\n</ol>\n<img src=\"/articles/9eb01842/完全二叉树.jpg\" />\n\n<ul>\n<li><p><strong>二叉排序树</strong><br>左子树上所有结点的关键字均小于根节点的关键字；右子树上所有结点的关键字均大于根节点的关键字；左子树和右子树又各是一棵二叉排序树。</p>\n</li>\n<li><p><strong>平衡二叉树</strong><br>树中任意一个结点的左子树和右子树的高度之差的绝对值不超过1。</p>\n</li>\n<li><p><strong>正则二叉树</strong><br>树中每个分支结点都有2个孩子，即<strong>树中只有度为0或2的结点</strong>。</p>\n</li>\n</ul>\n<h4 id=\"树的定义\"><a href=\"#树的定义\" class=\"headerlink\" title=\"树的定义\"></a>树的定义</h4><ul>\n<li><p>树是n(n≥0)个结点的有限集。当n&#x3D;0时，称为<strong>空树</strong>。</p>\n</li>\n<li><p>在任意一个非空树中应满足：</p>\n<ol>\n<li>有且仅有一个特定的称为<strong>根</strong>的结点。</li>\n<li>当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交的有限集<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>T</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>T</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_1,T_2,\\cdots,T_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，其中每个集合本身又是一棵树，并且称为根的<strong>子树</strong>。</li>\n</ol>\n</li>\n<li><p>显然，树的定义是递归的（二叉树也是），即<strong>在树的定义中又用到了其自身</strong>，树是一种递归的数据结构。树作为一种<strong>逻辑结构</strong>，同时也是一种<strong>分层结构</strong>，具有以下两个特点：</p>\n<ol>\n<li>树的根节点没有前驱，除根节点外的所有结点有且只有一个前驱。</li>\n<li>树中所有结点都可以有零个或多个后继。</li>\n</ol>\n</li>\n<li><p>树适用于表示<strong>具有层次结构的数据</strong>。树中的某个结点（除根节点外）<strong>最多</strong>只和上一层的一个结点（即其父结点）有<strong>直接关系</strong>，根节点没有直接上层结点，因此在n个结点的树中有n-1条边。而树中每个结点与其下一层的0个或多个结点（即其孩子结点）都有直接关系。</p>\n</li>\n<li><p><strong>基本术语</strong></p>\n</li>\n</ul>\n<ol>\n<li>lll</li>\n</ol>\n<h3 id=\"二叉树的实现（包括）\"><a href=\"#二叉树的实现（包括）\" class=\"headerlink\" title=\"二叉树的实现（包括）\"></a>二叉树的实现（包括）</h3><blockquote>\n<p>理解二叉树采用顺序存储结构和链式存储结构的差异性</p>\n</blockquote>\n<h4 id=\"顺序存储结构\"><a href=\"#顺序存储结构\" class=\"headerlink\" title=\"顺序存储结构\"></a>顺序存储结构</h4><h4 id=\"链式存储结构\"><a href=\"#链式存储结构\" class=\"headerlink\" title=\"链式存储结构\"></a>链式存储结构</h4><h3 id=\"二叉树的遍历（四种）\"><a href=\"#二叉树的遍历（四种）\" class=\"headerlink\" title=\"二叉树的遍历（四种）\"></a>二叉树的遍历（四种）</h3><blockquote>\n<p>掌握二叉树的四种遍历，并具有能够依赖遍历完成对二叉树进行操作的能力</p>\n</blockquote>\n<h3 id=\"二叉树结构下的应用及扩展（例如）\"><a href=\"#二叉树结构下的应用及扩展（例如）\" class=\"headerlink\" title=\"二叉树结构下的应用及扩展（例如）\"></a>二叉树结构下的应用及扩展（例如）</h3><blockquote>\n<p>掌握利用二叉树及其扩展下的检索技术；掌握Huffman编码、堆的<strong>实现及应用</strong></p>\n</blockquote>\n<h4 id=\"二叉检索树\"><a href=\"#二叉检索树\" class=\"headerlink\" title=\"二叉检索树\"></a>二叉检索树</h4><h4 id=\"2-3-4树\"><a href=\"#2-3-4树\" class=\"headerlink\" title=\"2-3-4树\"></a>2-3-4树</h4><h4 id=\"B树\"><a href=\"#B树\" class=\"headerlink\" title=\"B树\"></a>B树</h4><h4 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h4><h4 id=\"Huffman编码\"><a href=\"#Huffman编码\" class=\"headerlink\" title=\"Huffman编码\"></a>Huffman编码</h4><h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><h3 id=\"平衡二叉树的定义\"><a href=\"#平衡二叉树的定义\" class=\"headerlink\" title=\"平衡二叉树的定义\"></a>平衡二叉树的定义</h3><h3 id=\"平衡因子的定义\"><a href=\"#平衡因子的定义\" class=\"headerlink\" title=\"平衡因子的定义\"></a>平衡因子的定义</h3><h3 id=\"平衡二叉树的旋转操作\"><a href=\"#平衡二叉树的旋转操作\" class=\"headerlink\" title=\"平衡二叉树的旋转操作\"></a>平衡二叉树的旋转操作</h3><h3 id=\"树和森林的存储结构\"><a href=\"#树和森林的存储结构\" class=\"headerlink\" title=\"树和森林的存储结构\"></a>树和森林的存储结构</h3><blockquote>\n<p>掌握树、森林能够采用的各种存储方式的差异性</p>\n</blockquote>\n<h3 id=\"树和森林的遍历\"><a href=\"#树和森林的遍历\" class=\"headerlink\" title=\"树和森林的遍历\"></a>树和森林的遍历</h3><blockquote>\n<p>掌握树、森林在遍历方面和二叉树的不同以及相关性</p>\n</blockquote>\n<h3 id=\"森林与二叉树的转换\"><a href=\"#森林与二叉树的转换\" class=\"headerlink\" title=\"森林与二叉树的转换\"></a>森林与二叉树的转换</h3><h3 id=\"森林结构的应用（例如）\"><a href=\"#森林结构的应用（例如）\" class=\"headerlink\" title=\"森林结构的应用（例如）\"></a>森林结构的应用（例如）</h3><h4 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h4><blockquote>\n<p>理解并查集的意义，以及掌握并查集的基本操作的实现</p>\n</blockquote>\n<h2 id=\"六、图\"><a href=\"#六、图\" class=\"headerlink\" title=\"六、图\"></a>六、图</h2><h3 id=\"图的定义（包括）\"><a href=\"#图的定义（包括）\" class=\"headerlink\" title=\"图的定义（包括）\"></a>图的定义（包括）</h3><h4 id=\"完全图\"><a href=\"#完全图\" class=\"headerlink\" title=\"完全图\"></a>完全图</h4><h4 id=\"连通图\"><a href=\"#连通图\" class=\"headerlink\" title=\"连通图\"></a>连通图</h4><h4 id=\"简单路径\"><a href=\"#简单路径\" class=\"headerlink\" title=\"简单路径\"></a>简单路径</h4><h4 id=\"有向图\"><a href=\"#有向图\" class=\"headerlink\" title=\"有向图\"></a>有向图</h4><h4 id=\"无向图\"><a href=\"#无向图\" class=\"headerlink\" title=\"无向图\"></a>无向图</h4><h4 id=\"无环图\"><a href=\"#无环图\" class=\"headerlink\" title=\"无环图\"></a>无环图</h4><h4 id=\"等\"><a href=\"#等\" class=\"headerlink\" title=\"等\"></a>等</h4><h3 id=\"图和二叉树、树和森林这种结构之间的异同点（明确理解）\"><a href=\"#图和二叉树、树和森林这种结构之间的异同点（明确理解）\" class=\"headerlink\" title=\"图和二叉树、树和森林这种结构之间的异同点（明确理解）\"></a>图和二叉树、树和森林这种结构之间的异同点（明确理解）</h3><h3 id=\"图的存储（包括）\"><a href=\"#图的存储（包括）\" class=\"headerlink\" title=\"图的存储（包括）\"></a>图的存储（包括）</h3><h4 id=\"邻接矩阵\"><a href=\"#邻接矩阵\" class=\"headerlink\" title=\"邻接矩阵\"></a>邻接矩阵</h4><h4 id=\"邻接表\"><a href=\"#邻接表\" class=\"headerlink\" title=\"邻接表\"></a>邻接表</h4><h4 id=\"差异性\"><a href=\"#差异性\" class=\"headerlink\" title=\"差异性\"></a>差异性</h4><h3 id=\"图的基本操作\"><a href=\"#图的基本操作\" class=\"headerlink\" title=\"图的基本操作\"></a>图的基本操作</h3><h3 id=\"图的两种遍历\"><a href=\"#图的两种遍历\" class=\"headerlink\" title=\"图的两种遍历\"></a>图的两种遍历</h3><h4 id=\"广度优先遍历\"><a href=\"#广度优先遍历\" class=\"headerlink\" title=\"广度优先遍历\"></a>广度优先遍历</h4><h4 id=\"深度优先遍历\"><a href=\"#深度优先遍历\" class=\"headerlink\" title=\"深度优先遍历\"></a>深度优先遍历</h4><h3 id=\"图的基本应用（包括）\"><a href=\"#图的基本应用（包括）\" class=\"headerlink\" title=\"图的基本应用（包括）\"></a>图的基本应用（包括）</h3><h4 id=\"最小支撑树\"><a href=\"#最小支撑树\" class=\"headerlink\" title=\"最小支撑树\"></a>最小支撑树</h4><ul>\n<li><p><strong>Prim算法</strong></p>\n</li>\n<li><p><strong>Kruskal算法</strong></p>\n</li>\n</ul>\n<h4 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h4><ul>\n<li><p><strong>Dijkstra算法</strong></p>\n</li>\n<li><p><strong>BellmanFord算法</strong></p>\n</li>\n<li><p><strong>Floyd算法</strong></p>\n</li>\n</ul>\n<h4 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h4><h4 id=\"关键路径\"><a href=\"#关键路径\" class=\"headerlink\" title=\"关键路径\"></a>关键路径</h4><h2 id=\"七、查找\"><a href=\"#七、查找\" class=\"headerlink\" title=\"七、查找\"></a>七、查找</h2><blockquote>\n<p>查找的定义和与查找有关的算法：顺序查找法、折半查找法、散列（Hash）技术。</p>\n</blockquote>\n<h3 id=\"理解查找的定义\"><a href=\"#理解查找的定义\" class=\"headerlink\" title=\"理解查找的定义\"></a>理解查找的定义</h3><ol>\n<li>查找。在数据集合中寻找满足某种条件的数据元素的过程称为<strong>查找</strong>。</li>\n<li>在数据集合中找了满足条件的数据元素为<strong>查找成功</strong>，否则为<strong>查找失败</strong>。</li>\n<li>用于查找的数据集合为<strong>查找表</strong>，它是由同一类型的数据元素（或记录）组成的。对查找表的<strong>常见操作</strong>有：① 查询符合条件的数据元素；② 插入、删除数据元素。</li>\n<li>静态查找表。若一个查找表的操作只涉及查找操作，则无须动态地修改查找表，此类查找表称为<strong>静态查找表</strong>。与此对应，需要动态地插入或删除的查找表称为<strong>动态查找表</strong>。适合静态查找表的<strong>查找方法</strong>有顺序查找、折半查找、散列查找等；适合动态查找表的<strong>查找方法</strong>有二叉排序树的查找、散列查找等。</li>\n<li>关键字。数据元素中的唯一标识该元素的某个数据项的值，使用基于关键字的查找，查找结果应该是唯一的。例如，在有一个学生元素构成的数据集合中，学生元素中“学号”这一数据项的值唯一地标识一名学生。</li>\n<li>平均查找长度。在查找过程中，一次查找的长度是指需要比较的关键字次数，而平均查找长度则是所有查找过程中进行关键字的比较次数的平均值，其数学定义为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>P</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">ASL=\\sum\\limits_{i=1}^{n}P_i C_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3291em;vertical-align:-0.9777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. 式中，n是查找表的长度（因为每一个元素都要查找，所有都得考虑进去），Pi是查找第i个数据元素的概率，<strong>一般认为每个数据元素的查找概率相等</strong>，即Pi&#x3D;1&#x2F;n；Ci是找到第i个数据元素所需进行的<strong>比较次数</strong>。平均查找长度是<strong>衡量算法效率</strong>的<strong>最主要</strong>指标。</li>\n<li><strong>有序线性表</strong>的<strong>顺序查找</strong>中的线性表可以是<strong>链式存储结构</strong>，而<strong>折半查找</strong>中的线性表只能是顺序存储结构。</li>\n</ol>\n<h3 id=\"衡量查找算法的一些指标：三个查找长度\"><a href=\"#衡量查找算法的一些指标：三个查找长度\" class=\"headerlink\" title=\"衡量查找算法的一些指标：三个查找长度\"></a>衡量查找算法的一些指标：三个查找长度</h3><h4 id=\"顺序查找法\"><a href=\"#顺序查找法\" class=\"headerlink\" title=\"顺序查找法\"></a>顺序查找法</h4><ul>\n<li><strong>一般无序线性表</strong><blockquote>\n<p>从后往前找，a[0]&#x3D;x作为哨兵，若查找不成功，说明是从n比较到0都没找到，即比较了n+1次。</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>平均查找长度（成功不成功都计入，每个概率为1&#x2F;2n）<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>n</mi></mrow></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>3</mn><mn>4</mn></mfrac><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ASL=\\frac{1}{2n}\\sum\\limits_{i=1}^{n}(n-1+1)+\\frac{1}{2}(n+1)=\\frac{3}{4}(n+1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3291em;vertical-align:-0.9777em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3514em;\"><span style=\"top:-2.1223em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop op-symbol small-op\">∑</span></span></span><span style=\"top:-3.95em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9777em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>成功查找的（平均）查找长度  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mo>∑</mo><msup><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msup><msub><mi>P</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mo>∑</mo><msup><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msup><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">ASL=\\sum\\limits{i=1}^{n}P_i C_i=\\frac{1}{n}\\sum\\limits{i=1}^{n}(n-i+1)=\\frac{n+1}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7138em;\"><span style=\"top:-3.1124em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7138em;\"><span style=\"top:-3.1124em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n<li>不成功查找的（平均）查找长度  ASL&#x3D;n+1</li>\n</ol>\n<ul>\n<li><strong>有序线性表</strong></li>\n</ul>\n<ol>\n<li>平均查找长度</li>\n<li>成功查找的（平均）查找长度<br> 有序的结果和一般线性表的顺序查找一样，<strong>但是！！！要注意！！！这里的查找顺序若是从前往后，就不是和上面一样的结果！！！</strong></li>\n<li>不成功查找的（平均）查找长度<blockquote>\n<p>表L是按关键字从小到大排列的，查找的顺序是从前往后。假设有n个结点（这些是查找成功的结点），虚构n+1个查找失败结点。Pi为1&#x2F;(n+1)，1,2,…,n,n为查找失败时的比较次数。</p>\n</blockquote>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo>+</mo><mi>n</mi></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo>=</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>+</mo><mfrac><mi>n</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">ASL=\\frac{1+2+\\cdots+n+n}{n+1}=\\frac{n}{2}+\\frac{n}{n+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2484em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">2</span><span class=\"mbin mtight\">+</span><span class=\"minner mtight\">⋯</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0987em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n</ol>\n<h4 id=\"折半查找法（二分查找）\"><a href=\"#折半查找法（二分查找）\" class=\"headerlink\" title=\"折半查找法（二分查找）\"></a>折半查找法（二分查找）</h4><ol>\n<li>平均查找长度</li>\n<li>成功查找的（平均）查找长度<blockquote>\n<p>等概率，Pi为1&#x2F;n。树上的每个结点都要考虑进去，每个结点的比较次数为它的层数。第一层次数为1（层高），有2^0（2^(j-1)）个结点要计算；第二层次数为2（层高），有2^1（2^(j-1)）个结点要计算……直到最后一层，这里不一定是满二叉树，但就按照满二叉树近似计算了。</p>\n</blockquote>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mo stretchy=\"false\">(</mo><mn>1</mn><mo>×</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>×</mo><mn>2</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>h</mi><mo>×</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mi>n</mi></mfrac><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn><mo>≈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">ASL=\\frac{1}{n}(1×1+2×2+\\cdots+h×2^{h-1})=\\frac{n+1}{n}log_2(n+1)-1≈log_2(n+1)-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>\n<blockquote>\n<p>这里记一下最终结果！（因为不知道咋算出来的）<br>另外，h为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌉</mo></mrow><annotation encoding=\"application/x-tex\">\\lceil log_2(n+1) \\rceil</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)⌉</span></span></span></span>.</p>\n</blockquote>\n</li>\n<li>不成功查找的（平均）查找长度<blockquote>\n<p>虚构出方形结点，挂到圆形结点的下方。如果查找失败，即为方形结点，但是次数是上面那个圆形结点的层数。比如二叉树第3层下面总共挂了4个方形结点，第4层挂了8个方形节点：<br>ASL&#x3D;(3×4+4×8)&#x2F;12&#x3D;11&#x2F;3</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"散列（Hash）查找法\"><a href=\"#散列（Hash）查找法\" class=\"headerlink\" title=\"散列（Hash）查找法\"></a>散列（Hash）查找法</h4><ol>\n<li>平均查找长度</li>\n<li>成功查找的（平均）查找长度</li>\n<li>不成功查找的（平均）查找长度</li>\n</ol>\n<h3 id=\"掌握顺序查找法和折半查找法，并理解二者之间的异同点\"><a href=\"#掌握顺序查找法和折半查找法，并理解二者之间的异同点\" class=\"headerlink\" title=\"掌握顺序查找法和折半查找法，并理解二者之间的异同点\"></a>掌握顺序查找法和折半查找法，并理解二者之间的异同点</h3><h3 id=\"掌握散列技术（包括）\"><a href=\"#掌握散列技术（包括）\" class=\"headerlink\" title=\"掌握散列技术（包括）\"></a>掌握散列技术（包括）</h3><h4 id=\"散列函数\"><a href=\"#散列函数\" class=\"headerlink\" title=\"散列函数\"></a>散列函数</h4><h4 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h4><h4 id=\"散列冲突的发生及其解决方法\"><a href=\"#散列冲突的发生及其解决方法\" class=\"headerlink\" title=\"散列冲突的发生及其解决方法\"></a>散列冲突的发生及其解决方法</h4><h4 id=\"负载因子\"><a href=\"#负载因子\" class=\"headerlink\" title=\"负载因子\"></a>负载因子</h4><h3 id=\"理解不同查找技术的优缺点\"><a href=\"#理解不同查找技术的优缺点\" class=\"headerlink\" title=\"理解不同查找技术的优缺点\"></a>理解不同查找技术的优缺点</h3><h2 id=\"八、排序\"><a href=\"#八、排序\" class=\"headerlink\" title=\"八、排序\"></a>八、排序</h2><h3 id=\"排序的定义（包括）\"><a href=\"#排序的定义（包括）\" class=\"headerlink\" title=\"排序的定义（包括）\"></a>排序的定义（包括）</h3><h4 id=\"内排序\"><a href=\"#内排序\" class=\"headerlink\" title=\"内排序\"></a>内排序</h4><h4 id=\"外排序\"><a href=\"#外排序\" class=\"headerlink\" title=\"外排序\"></a>外排序</h4><h4 id=\"内排序和外排序的区别\"><a href=\"#内排序和外排序的区别\" class=\"headerlink\" title=\"内排序和外排序的区别\"></a>内排序和外排序的区别</h4><h4 id=\"排序的稳定性\"><a href=\"#排序的稳定性\" class=\"headerlink\" title=\"排序的稳定性\"></a>排序的稳定性</h4><h3 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h3><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><h3 id=\"简单选择排序\"><a href=\"#简单选择排序\" class=\"headerlink\" title=\"简单选择排序\"></a>简单选择排序</h3><h3 id=\"Shell排序\"><a href=\"#Shell排序\" class=\"headerlink\" title=\"Shell排序\"></a>Shell排序</h3><h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><h3 id=\"时空复杂度和稳定性\"><a href=\"#时空复杂度和稳定性\" class=\"headerlink\" title=\"时空复杂度和稳定性\"></a>时空复杂度和稳定性</h3><blockquote>\n<p>对直接插入排序、冒泡排序、简单选择排序、Shell排序、快速排序、堆排序、归并排序、基数排序这些算法，掌握其在时间复杂度、空间复杂度以及是否稳定等方面的特点</p>\n</blockquote>\n<h3 id=\"K路归并排序\"><a href=\"#K路归并排序\" class=\"headerlink\" title=\"K路归并排序\"></a>K路归并排序</h3><h4 id=\"k路归并排序的外排序算法\"><a href=\"#k路归并排序的外排序算法\" class=\"headerlink\" title=\"k路归并排序的外排序算法\"></a>k路归并排序的外排序算法</h4><h3 id=\"选择合适排序算法\"><a href=\"#选择合适排序算法\" class=\"headerlink\" title=\"选择合适排序算法\"></a>选择合适排序算法</h3><blockquote>\n<p>具有在不同的应用需求下，能够依据各种排序算法的特点选择合适排序算法的能力</p>\n</blockquote>\n<h2 id=\"九、矩阵和串\"><a href=\"#九、矩阵和串\" class=\"headerlink\" title=\"九、矩阵和串\"></a>九、矩阵和串</h2><h3 id=\"矩阵和串的定义\"><a href=\"#矩阵和串的定义\" class=\"headerlink\" title=\"矩阵和串的定义\"></a>矩阵和串的定义</h3><h3 id=\"特殊矩阵的压缩存储\"><a href=\"#特殊矩阵的压缩存储\" class=\"headerlink\" title=\"特殊矩阵的压缩存储\"></a>特殊矩阵的压缩存储</h3><h3 id=\"稀疏矩阵的三元组表示法以及相应的操作\"><a href=\"#稀疏矩阵的三元组表示法以及相应的操作\" class=\"headerlink\" title=\"稀疏矩阵的三元组表示法以及相应的操作\"></a>稀疏矩阵的三元组表示法以及相应的操作</h3><h3 id=\"多维数组和一维数组的映射\"><a href=\"#多维数组和一维数组的映射\" class=\"headerlink\" title=\"多维数组和一维数组的映射\"></a>多维数组和一维数组的映射</h3><h3 id=\"串的模式匹配\"><a href=\"#串的模式匹配\" class=\"headerlink\" title=\"串的模式匹配\"></a>串的模式匹配</h3><h4 id=\"Brute-Force\"><a href=\"#Brute-Force\" class=\"headerlink\" title=\"Brute-Force\"></a>Brute-Force</h4><h4 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h4>","categories":[],"tags":[]}