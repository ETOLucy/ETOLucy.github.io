{"title":"git系统学习笔记（基于acwing课）","slug":"git系统学习笔记（基于acwing课）","date":"2023-12-12T11:20:53.000Z","updated":"2023-12-12T12:15:26.635Z","comments":true,"path":"api/articles/git系统学习笔记（基于acwing课）.json","excerpt":null,"covers":null,"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这是基于acwing中linux系统课下的git网课写的笔记。</p>\n<p>由于自己没系统学过就直接上手一边用一边现查然后发现玩不下去，所以转而系统学习，课前提要的时候y总也说他学习的时候也是这样的感受，所以让我们不要像学vim、tmux和ssh那样像学工具一样学习，一定要先系统地学完再使用git命令。</p>\n<p>由于git命令实在过于复杂（我认为倒也不是命令复杂，而是里边的逻辑概念很难形成一个清晰的认知，哪怕已经有点概念了，只要不是相当明确，就会出现同样的需求前一次感觉已经谈不上稀里糊涂有点概念地实现成功了，重新再实现一遍居然又遇上新的报错），我写了此篇笔记，用来之后翻看用。</p>\n<h1 id=\"acwing的讲义\"><a href=\"#acwing的讲义\" class=\"headerlink\" title=\"acwing的讲义\"></a>acwing的讲义</h1><blockquote>\n<p>acwing有提供过一套讲义，我先将它复制到此处。</p>\n</blockquote>\n<h2 id=\"git基本概念\"><a href=\"#git基本概念\" class=\"headerlink\" title=\"git基本概念\"></a>git基本概念</h2><ul>\n<li>工作区：仓库的目录。工作区是独立于各个分支的。</li>\n<li>暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。</li>\n<li>版本库：存放所有已经提交到本地仓库的代码版本</li>\n<li>版本结构：树结构，树中每个节点代表一个代码版本。<h2 id=\"git常用命令\"><a href=\"#git常用命令\" class=\"headerlink\" title=\"git常用命令\"></a>git常用命令</h2></li>\n<li><code>git config --global user.name xxx</code>：设置全局用户名，信息记录在<code>~/.gitconfig</code>文件中</li>\n<li><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址，信息记录在<code>~/.gitconfig</code>文件中</li>\n<li><code>git init</code>：将当前目录配置成git仓库，信息记录在隐藏的.git文件夹中</li>\n<li><code>git add XX</code>：将XX文件添加到暂存区<ul>\n<li><code>git add .</code>：将所有待加入暂存区的文件加入暂存区</li>\n</ul>\n</li>\n<li><code>git rm --cached XX</code>：将文件从仓库索引目录中删掉</li>\n<li><code>git commit -m</code> “给自己看的备注信息”：将暂存区的内容提交到当前分支</li>\n<li><code>git status</code>：查看仓库状态</li>\n<li><code>git diff XX</code>：查看XX文件相对于暂存区修改了哪些内容</li>\n<li><code>git log</code>：查看当前分支的所有版本</li>\n<li><code>git reflog</code>：查看HEAD指针的移动历史（包括被回滚的版本）</li>\n<li><code>git reset --hard HEAD^</code> 或 <code>git reset --hard HEAD~</code>：将代码库回滚到上一个版本<ul>\n<li><code>git reset --hard HEAD^^</code>：往上回滚两次，以此类推</li>\n<li><code>git reset --hard HEAD~100</code>：往上回滚100个版本</li>\n<li><code>git reset --hard 版本号</code>：回滚到某一特定版本</li>\n</ul>\n</li>\n<li><code>git checkout — XX</code>或<code>git restore XX</code>：将XX文件尚未加入暂存区的修改全部撤销</li>\n<li><code>git remote add origin git@git.acwing.com:xxx/XXX.git</code>：将本地仓库关联到远程仓库</li>\n<li><code>git push -u</code> (第一次需要-u以后不需要)：将当前分支推送到远程仓库</li>\n<li><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库</li>\n<li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库XXX下载到当前目录下</li>\n<li><code>git checkout -b branch_name</code>：创建并切换到<code>branch_name</code>这个分支</li>\n<li><code>git branch</code>：查看所有分支和当前所处分支</li>\n<li><code>git checkout branch_name</code>：切换到branch_name这个分支</li>\n<li><code>git merge branch_name</code>：将分支branch_name合并到当前分支上</li>\n<li><code>git branch -d branch_name</code>：删除本地仓库的branch_name分支</li>\n<li><code>git branch branch_name</code>：创建新分支</li>\n<li><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</li>\n<li><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</li>\n<li><code>git pull</code>：将远程仓库的当前分支与本地仓库的当前分支合并<ul>\n<li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li>\n</ul>\n</li>\n<li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的<code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</li>\n<li><code>git checkout -t origin/branch_name</code> 将远程的<code>branch_name</code>分支拉取到本地</li>\n<li><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中</li>\n<li><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</li>\n<li><code>git stash drop</code>：删除栈顶存储的修改</li>\n<li><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</li>\n<li><code>git stash list</code>：查看栈中所有元素</li>\n</ul>\n","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这是基于acwing中linux系统课下的git网课写的笔记。</p>\n<p>由于自己没系统学过就直接上手一边用一边现查然后发现玩不下去，所以转而系统学习，课前提要的时候y总也说他学习的时候也是这样的感受，所以让我们不要像学vim、tmux和ssh那样像学工具一样学习，一定要先系统地学完再使用git命令。</p>\n<p>由于git命令实在过于复杂（我认为倒也不是命令复杂，而是里边的逻辑概念很难形成一个清晰的认知，哪怕已经有点概念了，只要不是相当明确，就会出现同样的需求前一次感觉已经谈不上稀里糊涂有点概念地实现成功了，重新再实现一遍居然又遇上新的报错），我写了此篇笔记，用来之后翻看用。</p>\n<h1 id=\"acwing的讲义\"><a href=\"#acwing的讲义\" class=\"headerlink\" title=\"acwing的讲义\"></a>acwing的讲义</h1><blockquote>\n<p>acwing有提供过一套讲义，我先将它复制到此处。</p>\n</blockquote>\n<h2 id=\"git基本概念\"><a href=\"#git基本概念\" class=\"headerlink\" title=\"git基本概念\"></a>git基本概念</h2><ul>\n<li>工作区：仓库的目录。工作区是独立于各个分支的。</li>\n<li>暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。</li>\n<li>版本库：存放所有已经提交到本地仓库的代码版本</li>\n<li>版本结构：树结构，树中每个节点代表一个代码版本。<h2 id=\"git常用命令\"><a href=\"#git常用命令\" class=\"headerlink\" title=\"git常用命令\"></a>git常用命令</h2></li>\n<li><code>git config --global user.name xxx</code>：设置全局用户名，信息记录在<code>~/.gitconfig</code>文件中</li>\n<li><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址，信息记录在<code>~/.gitconfig</code>文件中</li>\n<li><code>git init</code>：将当前目录配置成git仓库，信息记录在隐藏的.git文件夹中</li>\n<li><code>git add XX</code>：将XX文件添加到暂存区<ul>\n<li><code>git add .</code>：将所有待加入暂存区的文件加入暂存区</li>\n</ul>\n</li>\n<li><code>git rm --cached XX</code>：将文件从仓库索引目录中删掉</li>\n<li><code>git commit -m</code> “给自己看的备注信息”：将暂存区的内容提交到当前分支</li>\n<li><code>git status</code>：查看仓库状态</li>\n<li><code>git diff XX</code>：查看XX文件相对于暂存区修改了哪些内容</li>\n<li><code>git log</code>：查看当前分支的所有版本</li>\n<li><code>git reflog</code>：查看HEAD指针的移动历史（包括被回滚的版本）</li>\n<li><code>git reset --hard HEAD^</code> 或 <code>git reset --hard HEAD~</code>：将代码库回滚到上一个版本<ul>\n<li><code>git reset --hard HEAD^^</code>：往上回滚两次，以此类推</li>\n<li><code>git reset --hard HEAD~100</code>：往上回滚100个版本</li>\n<li><code>git reset --hard 版本号</code>：回滚到某一特定版本</li>\n</ul>\n</li>\n<li><code>git checkout — XX</code>或<code>git restore XX</code>：将XX文件尚未加入暂存区的修改全部撤销</li>\n<li><code>git remote add origin git@git.acwing.com:xxx/XXX.git</code>：将本地仓库关联到远程仓库</li>\n<li><code>git push -u</code> (第一次需要-u以后不需要)：将当前分支推送到远程仓库</li>\n<li><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库</li>\n<li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库XXX下载到当前目录下</li>\n<li><code>git checkout -b branch_name</code>：创建并切换到<code>branch_name</code>这个分支</li>\n<li><code>git branch</code>：查看所有分支和当前所处分支</li>\n<li><code>git checkout branch_name</code>：切换到branch_name这个分支</li>\n<li><code>git merge branch_name</code>：将分支branch_name合并到当前分支上</li>\n<li><code>git branch -d branch_name</code>：删除本地仓库的branch_name分支</li>\n<li><code>git branch branch_name</code>：创建新分支</li>\n<li><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</li>\n<li><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</li>\n<li><code>git pull</code>：将远程仓库的当前分支与本地仓库的当前分支合并<ul>\n<li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li>\n</ul>\n</li>\n<li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的<code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</li>\n<li><code>git checkout -t origin/branch_name</code> 将远程的<code>branch_name</code>分支拉取到本地</li>\n<li><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中</li>\n<li><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</li>\n<li><code>git stash drop</code>：删除栈顶存储的修改</li>\n<li><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</li>\n<li><code>git stash list</code>：查看栈中所有元素</li>\n</ul>\n","categories":[],"tags":[{"name":"git多人协作开发","path":"api/tags/git多人协作开发.json"},{"name":"git系统学习笔记","path":"api/tags/git系统学习笔记.json"},{"name":"acwing课","path":"api/tags/acwing课.json"}]}