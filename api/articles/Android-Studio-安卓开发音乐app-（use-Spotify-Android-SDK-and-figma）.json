{"title":"Android Studio - 安卓开发音乐app （use Spotify Android SDK and figma）","slug":"Android-Studio-安卓开发音乐app-（use-Spotify-Android-SDK-and-figma）","date":"2023-12-22T13:48:04.000Z","updated":"2023-12-23T07:33:53.439Z","comments":true,"path":"api/articles/Android-Studio-安卓开发音乐app-（use-Spotify-Android-SDK-and-figma）.json","excerpt":null,"covers":null,"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这是“移动应用开发”这门课的大作业。用了Spotify Android SDK（后端，调取音乐数据）和figma（设计前端）。</p>\n<hr>\n<p><strong>2023.12.22</strong><br>说实话写得很累，写前端卡前端，写后端卡后端。所用的工具软件、看的文档又是全英文的，在一个期末八门大作业（其中三门开发岗项目、一门python大作业，两份课设、两篇论文）要在短短几周内（甚至到现在只剩几天了）写完的情况下，对于小白来说，不仅考验耐心，更考验效率。出现bug的时候更加不容易像平常那样不急不躁地debug，翻遍全网博客每次都是会看到不少同样的或类似的问题，但鲜少能很快地找到解决方案。</p>\n<p>在写这次大作业的时候才发现，之前一直心心念念的论坛，原来一般在开发者平台都能找到（他们若是有把部分项目或文档放到git仓库，可能git仓库底下也有不少能借鉴的Issues），为方便程序员开发，会给程序员建个专属论坛。以往我搜着搜着基本只能搜到stackflow，但大多情况搜到的都是尚未解决的问题，每次见到类似的报错都会很激动，点进去发现一个回答都没有，心又瞬间沉入谷底。</p>\n<p>光是调用Spotify Android SDK做到能打开app点击按钮播放一首设定好的歌曲我就挣扎了两个晚上，第一个晚上我搜了国内的那些音乐app大厂，只有网易云有开发者平台，我喜出望外地填写认证信息，填到最后我傻眼了，因为我那时才发现原来那个开发者平台是给网易云音乐内部的程序员用的。其他的大厂，包括抖音也有个音乐开放平台，但进去都是音乐人合作，或者企业合作。</p>\n<p>之后又搜罗资源，终于找到了spotify，但就那么一点点的入门文档，我就研究了两个晚上，现在才大致明白逻辑，并成功实现了后台播放。我觉得主要问题是版本吧，Android Studio真得改版太多了，其他的平台和它关联起来也需要不断地维护文档，但凡有一处没更新，对于我这样的小白来讲就真得很难处理问题。今天才懂如何去翻各种官方文档（原来不仅敲代码需要熟练度，看文档也需要熟练度啊）。</p>\n<p>目前spotify建了框架，尝试了playlist、track、album，都成功了。我想，开发简易的music player的话，光是这三种也差不多够用了，若是想开发复杂的，估计得看后期的时间是否充裕。</p>\n<p>再讲前端，将figma的文件包导入到Android Studio里，目前尝试过的插件（plugin）有俩，一个是Relay，一个是Dhiwise，但都失败了，接下来会重新再尝试，或者在线生成xml，最不济就只能导出图片然后加透明控件了。</p>\n<p>比较并总结一下Dhiwise和在线生成xml的优缺点（虽然目前Dhiwise没试成功）：</p>\n<ul>\n<li><p>Dhiwise可以生成一整个packages，也就是项目包，里边会有图片、字体等各种丰富地资源，基本是能够完美还原源项目了。但是正是因为有这么多丰富的资源，包括有不同的dpi文件夹（这就意味着能适应各种dpi的手机），因此包很大，引入的依赖也很多，导入的时候很麻烦。且引入的是一整个新的前端包，之前写的后端内容，要重新手动cccv进去（我是小白，我只会手动，或许有什么其他的方法吧）。不过Dhiwise好像除了xml还有一个选项，不知道那个是什么用处，原谅一下我这位小白的无知。</p>\n</li>\n<li><p>在线生成xml的方法，只能是每一个小模块生成一个xml，并且对应的drawable下的xml也需要自己手动创建、复制粘贴，一个稍微好看点的前端界面就有特别特别多的模块，而且稍微复杂点它们的位置就很难调节了，相当得麻烦。</p>\n</li>\n</ul>\n<p>之后的日子再试试看吧，看看能否调出bug或者最终妥协，用“瞎猫”去“捉老鼠”。</p>\n<p>真是一个痛苦、难忘，但又充满着很多新鲜感和激情的期末啊！</p>\n<hr>\n<h1 id=\"git仓库\"><a href=\"#git仓库\" class=\"headerlink\" title=\"git仓库\"></a>git仓库</h1><p>目前还没release，还在创建状态，网址为<a href=\"https://github.com/ETOLucy/Music_app_spotify\">https://github.com/ETOLucy/Music_app_spotify</a>。</p>\n<h1 id=\"前端开发\"><a href=\"#前端开发\" class=\"headerlink\" title=\"前端开发\"></a>前端开发</h1><blockquote>\n<p>从数媒的高中同学那得知有figma这个东西，在国内的镜像版本叫做即使设计。于是就用起了figma。</p>\n</blockquote>\n<p>#TODO</p>\n<h1 id=\"后端开发\"><a href=\"#后端开发\" class=\"headerlink\" title=\"后端开发\"></a>后端开发</h1><h2 id=\"Spotify文档讲解\"><a href=\"#Spotify文档讲解\" class=\"headerlink\" title=\"Spotify文档讲解\"></a>Spotify文档讲解</h2><h3 id=\"网址\"><a href=\"#网址\" class=\"headerlink\" title=\"网址\"></a>网址</h3><blockquote>\n<p>安卓开发网址：<a href=\"https://developer.spotify.com/documentation/android\">https://developer.spotify.com/documentation/android</a><br>论坛网址：<a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer</a></p>\n</blockquote>\n<h3 id=\"创建应用（以实现集成该SDK）\"><a href=\"#创建应用（以实现集成该SDK）\" class=\"headerlink\" title=\"创建应用（以实现集成该SDK）\"></a>创建应用（以实现集成该SDK）</h3><ul>\n<li>先解释下，web端叫做“调取api”，对应的，Android叫做“集成SDK”。</li>\n</ul>\n<ol>\n<li>进入Dashboard，创建应用。参考文档<a href=\"https://developer.spotify.com/documentation/web-api/concepts/apps\">创建应用</a>，这里要解释一下，新手可能会很好奇，明明我用的是SDK为什么跳转到web端去了，这个可以自己在Android的开发文档里仔细找，发现它就是有外链的，它给的外链就是我给的这个网址，我放这是为让读者切过去更方便些。<br>这里的client id是它自动生成，重定向URI按照文档说的设置好（这里我也不是太懂我设置的uri是否在工作），安卓开发要填Android Package，ios开发填Bundle ID。安卓开发的Android Package可以从任意一个activity的java代码第一行里找，比如<code>package com.example.music_app_spotify;</code>则Android Package为<code>com.example.music_app_spotify</code>。<blockquote>\n<p>对了，这里要说明一下，添加这些参数的时候，在输入框的下方会看到很明显的紫色“add”按钮，上面会有很不明显的“remove”按钮，记得一定要<strong>点击“add”按钮</strong>后再点击“save”按钮！！！<br>指纹的话，按照文档来操作吧。</p>\n</blockquote>\n</li>\n<li>现在Android Studio是2023版了（现在都快2024年了），所以就连将库作为模块导入到项目都变了样。</li>\n</ol>\n<ul>\n<li>首先文档中导入方式的截图就和我们现在的Android Studio是不适配的，文档中的截图是new一个module，就可以选择“导入 .JAR&#x2F;AAR 包”选项，但我们的方式，一种是点击左上角File，然后找到“Prject Structuer”，在左边的菜单栏选择“Dependencies”，在这里添加；另一种是在build.gradle.kts里（一般在文件最下边）dependencies{}里边添加<code>implementation(files(&quot;D:\\\\Android\\\\AndroidStudioProjects\\\\Music_app_spotify\\\\app\\\\libs\\\\spotify-app-remote-release-0.8.0.aar&quot;))</code>（路径依据你自己的来，记住别放在你定期清理的位置，放这个项目的libs下最好）。</li>\n</ul>\n<ol start=\"3\">\n<li>在文档教程底下的授权那一篇里，文档提供的代码是：<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.spotify.android:auth:1.2.5&#x27;</span> <span class=\"comment\">// Maven dependency</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// All other dependencies for your app should also be here:</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;androidx.browser:browser:1.0.0&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.appcompat:appcompat:$appCompatVersion&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n而我的代码是（包含一些这份文档其他地方的要求的一些依赖）：<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;com.spotify.android:auth:1.2.6&quot;</span>)</span><br><span class=\"line\">implementation (<span class=\"string\">&quot;androidx.browser:browser:1.6.0&quot;</span>)</span><br><span class=\"line\">implementation(<span class=\"string\">&quot;androidx.appcompat:appcompat&quot;</span>)</span><br><span class=\"line\">implementation(<span class=\"string\">&quot;com.google.android.material:material:1.8.0&quot;</span>)</span><br><span class=\"line\">implementation(files(<span class=\"string\">&quot;D:\\\\Android\\\\AndroidStudioProjects\\\\Music_app_spotify\\\\app\\\\libs\\\\spotify-app-remote-release-0.8.0.aar&quot;</span>))</span><br><span class=\"line\">implementation (<span class=\"string\">&quot;com.google.code.gson:gson:2.10.1&quot;</span>)</span><br><span class=\"line\">implementation(<span class=\"string\">&quot;com.google.android.gms:play-services-auth:20.7.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n文档这里的代码我几乎是加一行报错千万行，然后debug很长很长时间……</li>\n</ol>\n<ul>\n<li>首先是<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n当我把这个添加进去的时候，它显示和自带的maven库冲突，我就把它删掉了，也能跑maven。<br>然后其他的一些，在<a href=\"https://mvnrepository.com/search?q=\">Maven Repository</a>里找到最新版引入的话，会显示Mainfest Merger报错，太老了也不对，就各种调吧，反正目前我这样的版本是可以使用的。</li>\n</ul>\n<h2 id=\"授权登录之Activity的start与finish\"><a href=\"#授权登录之Activity的start与finish\" class=\"headerlink\" title=\"授权登录之Activity的start与finish\"></a>授权登录之Activity的start与finish</h2><p>关于授权，在LoginActivity里和MainActivity里写这部分代码，问了gpt，但是它给的代码差一点（那一点很致命，我只好自己调出那一点）。<br>看我在LoginActivity.java里的<strong>成品</strong>的部分代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"type\">int</span> resultCode, Intent intent)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onActivityResult(requestCode, resultCode, intent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Check if the result comes from the correct activity</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestCode == REQUEST_CODE) &#123;</span><br><span class=\"line\">            <span class=\"type\">AuthorizationResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> AuthorizationClient.getResponse(resultCode, intent);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (((AuthorizationResponse) response).getType()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Response was successful and contains auth token</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> TOKEN:</span><br><span class=\"line\">                    <span class=\"comment\">// Handle successful response, for example, navigate to MainActivity</span></span><br><span class=\"line\"><span class=\"comment\">//                    Intent Main_intent = new Intent(this, MainActivity2.class);</span></span><br><span class=\"line\"><span class=\"comment\">//                    String message = &quot;ok&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//                    Intent intent1 = intent.putExtra(&quot;if_login_in&quot;, message);</span></span><br><span class=\"line\"><span class=\"comment\">//                    startActivity(Main_intent);</span></span><br><span class=\"line\">                    finish(); <span class=\"comment\">// finish the LoginActivity</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Auth flow returned an error</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> ERROR:</span><br><span class=\"line\">                    <span class=\"comment\">// Handle error response</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Most likely auth flow was cancelled</span></span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// Handle other cases</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>以及在MainActivity.java里的<strong>成品</strong>的部分代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        <span class=\"comment\">// Get the Intent that started this activity and extract the string</span></span><br><span class=\"line\"><span class=\"comment\">//        Intent intent = getIntent();</span></span><br><span class=\"line\"><span class=\"comment\">//        String message = intent.getStringExtra(&quot;if_login_in&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        if(message.equals(&quot;ok&quot;))return;</span></span><br><span class=\"line\">        <span class=\"comment\">// Check if the user is already logged in, based on your app&#x27;s logic</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userIsLoggedIn()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// User is logged in, proceed with your main app logic</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// User is not logged in, navigate to LoginActivity</span></span><br><span class=\"line\">            startActivity(<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>, LoginActivity.class));</span><br><span class=\"line\"><span class=\"comment\">//            finish(); // finish the MainActivity</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找到播放按钮</span></span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">playButton</span> <span class=\"operator\">=</span> findViewById(R.id.playButton);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置按钮的点击事件</span></span><br><span class=\"line\">        playButton.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View v)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 在这里处理按钮点击事件，可以添加播放音乐的逻辑</span></span><br><span class=\"line\">                playMusic();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>可以观察一下我注释掉的部分。一开始运行的时候，是一直显示“正在加载…”，加载了之后又立刻弹出来又“正在加载…”，我以为是授权的地方哪里出错了，找了好久bug也没找到。<br>后来发现MainActivity.java里if (userIsLoggedIn())底下没有任何实现，当时也没观察LoginActivity里是有start一个新的activity的（gpt给的代码是start MainActivity，我注释部分是我自己动过，也拿其他页面尝试过没成功），以为登陆进去啥操作也没有了，就开始在那加东西捣鼓，结果印象中是没啥反应（逻辑上应该也成立，因为Login那start一个新的Main页面后，main又授权登录，跳到login那，login再start一个新的main页面，因此死循环卡死了），于是又焦虑半天。<br>再之后，发现login那有写start一个新的main页面，然后开始修改，发现运行结果有变化，这才意识到授权那边的代码没写错，理论上讲，登录应该成功了，出错应该是出在activity的实现上。<br>我现在成品代码的逻辑是，授权成功后关闭login，这样就回到了main页面。</p>\n<h2 id=\"button之play-music-stop-music\"><a href=\"#button之play-music-stop-music\" class=\"headerlink\" title=\"button之play music &amp; stop music\"></a>button之play music &amp; stop music</h2><blockquote>\n<p>首先别忘记在xml页面创建按钮。</p>\n</blockquote>\n<p>先观察下我<strong>成品</strong>代码中的Onstart函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStart</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStart();</span><br><span class=\"line\"><span class=\"comment\">//        ConnectionParams connectionParams =</span></span><br><span class=\"line\"><span class=\"comment\">//                new ConnectionParams.Builder(CLIENT_ID)</span></span><br><span class=\"line\"><span class=\"comment\">//                        .setRedirectUri(REDIRECT_URI)</span></span><br><span class=\"line\"><span class=\"comment\">//                        .showAuthView(true)</span></span><br><span class=\"line\"><span class=\"comment\">//                        .build();</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        SpotifyAppRemote.connect(this, connectionParams,</span></span><br><span class=\"line\"><span class=\"comment\">//                new Connector.ConnectionListener() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//                    public void onConnected(SpotifyAppRemote spotifyAppRemote) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                        mSpotifyAppRemote = spotifyAppRemote;</span></span><br><span class=\"line\"><span class=\"comment\">//                        Log.d(&quot;MyActivity&quot;, &quot;Connected! Yay!&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//                        // Now you can start interacting with App Remote</span></span><br><span class=\"line\"><span class=\"comment\">//                        connected();</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//                    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//                    public void onFailure(Throwable throwable) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                        Log.e(&quot;MyActivity&quot;, throwable.getMessage(), throwable);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//                        // Something went wrong when attempting to connect! Handle errors here</span></span><br><span class=\"line\"><span class=\"comment\">//                    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;);</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>观察一下我注释掉的代码里，有一句<code>connected();</code>，这里的connected函数相当于一个工具，就让它的那么摆着吧，丢到button的onClick里边反而不方便。至于其他部分，会发现它在进行连接，然后调取connected函数，执行<code>mSpotifyAppRemote.getPlayerApi().play(&quot;spotify:track:4lIsrJyQOdtBtRAyYiY2VD&quot;);</code>这句话的时候，就是播放具体的歌曲了。<br>所以把onStart()里除super.onStart();（这个是Onstart()函数存在它就必须得存在的东西，拿走不要命啦）全部拖到OnClick()下（我是在把它们封装在了playMusic函数里，再在OnClick里调用playMusic函数），如此便能实现运行app就后台播放音乐了。</p>\n<h2 id=\"如何stop-music？\"><a href=\"#如何stop-music？\" class=\"headerlink\" title=\"如何stop music？\"></a>如何stop music？</h2><p>至于如何stop music，就再添加一个按钮，但是不能把onStop()下的<code>SpotifyAppRemote.disconnect(mSpotifyAppRemote);</code>放到按钮的OnClick下，这个是断开连接，而不是关闭，要这么写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在这里处理按钮点击事件，停止音乐播放</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (mSpotifyAppRemote != <span class=\"literal\">null</span> &amp;&amp; mSpotifyAppRemote.isConnected()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 SpotifyAppRemote 已连接，则停止音乐播放</span></span><br><span class=\"line\">    mSpotifyAppRemote.getPlayerApi().pause();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>记住！要加上这个if判断条件，不然的话点击停止按钮就会退出app！</strong></p>\n<h2 id=\"关于-“spotify-track-XXXXXX”-怎么用\"><a href=\"#关于-“spotify-track-XXXXXX”-怎么用\" class=\"headerlink\" title=\"关于 “spotify:track:XXXXXX” 怎么用\"></a>关于 “spotify:track:XXXXXX” 怎么用</h2><p>这里其实很简单，我目前发现的有三种，一种是track，一种是album，一种是playlist。</p>\n<blockquote>\n<p>注：查阅了下官方文档，一共四种，还有一个artist。<br>如果是album就”spotify:album:XXXXXX”，以此类推，替换两个冒号中间那个单词就行。<br>至于每个歌曲的”XXXXXXXXXXXXXXXXXX”怎么知道是多少呢？这个其实跟，问到底是专辑（album）还是歌单（playList）还是具体去搜索某首歌（track）一样，去<a href=\"https://open.spotify.com/\">spotify官网</a>，比如我想找邓紫棋唱的面壁者，我搜到这首歌，它的网址是<a href=\"https://open.spotify.com/track/1tCPlIIWX89HBVRhBzc9O1\">https://open.spotify.com/track/1tCPlIIWX89HBVRhBzc9O1</a>，那么track就是两个冒号间要填的，<code>1tCPlIIWX89HBVRhBzc9O1</code>便是”XXXXXXXXX”。</p>\n</blockquote>\n","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这是“移动应用开发”这门课的大作业。用了Spotify Android SDK（后端，调取音乐数据）和figma（设计前端）。</p>\n<hr>\n<p><strong>2023.12.22</strong><br>说实话写得很累，写前端卡前端，写后端卡后端。所用的工具软件、看的文档又是全英文的，在一个期末八门大作业（其中三门开发岗项目、一门python大作业，两份课设、两篇论文）要在短短几周内（甚至到现在只剩几天了）写完的情况下，对于小白来说，不仅考验耐心，更考验效率。出现bug的时候更加不容易像平常那样不急不躁地debug，翻遍全网博客每次都是会看到不少同样的或类似的问题，但鲜少能很快地找到解决方案。</p>\n<p>在写这次大作业的时候才发现，之前一直心心念念的论坛，原来一般在开发者平台都能找到（他们若是有把部分项目或文档放到git仓库，可能git仓库底下也有不少能借鉴的Issues），为方便程序员开发，会给程序员建个专属论坛。以往我搜着搜着基本只能搜到stackflow，但大多情况搜到的都是尚未解决的问题，每次见到类似的报错都会很激动，点进去发现一个回答都没有，心又瞬间沉入谷底。</p>\n<p>光是调用Spotify Android SDK做到能打开app点击按钮播放一首设定好的歌曲我就挣扎了两个晚上，第一个晚上我搜了国内的那些音乐app大厂，只有网易云有开发者平台，我喜出望外地填写认证信息，填到最后我傻眼了，因为我那时才发现原来那个开发者平台是给网易云音乐内部的程序员用的。其他的大厂，包括抖音也有个音乐开放平台，但进去都是音乐人合作，或者企业合作。</p>\n<p>之后又搜罗资源，终于找到了spotify，但就那么一点点的入门文档，我就研究了两个晚上，现在才大致明白逻辑，并成功实现了后台播放。我觉得主要问题是版本吧，Android Studio真得改版太多了，其他的平台和它关联起来也需要不断地维护文档，但凡有一处没更新，对于我这样的小白来讲就真得很难处理问题。今天才懂如何去翻各种官方文档（原来不仅敲代码需要熟练度，看文档也需要熟练度啊）。</p>\n<p>目前spotify建了框架，尝试了playlist、track、album，都成功了。我想，开发简易的music player的话，光是这三种也差不多够用了，若是想开发复杂的，估计得看后期的时间是否充裕。</p>\n<p>再讲前端，将figma的文件包导入到Android Studio里，目前尝试过的插件（plugin）有俩，一个是Relay，一个是Dhiwise，但都失败了，接下来会重新再尝试，或者在线生成xml，最不济就只能导出图片然后加透明控件了。</p>\n<p>比较并总结一下Dhiwise和在线生成xml的优缺点（虽然目前Dhiwise没试成功）：</p>\n<ul>\n<li><p>Dhiwise可以生成一整个packages，也就是项目包，里边会有图片、字体等各种丰富地资源，基本是能够完美还原源项目了。但是正是因为有这么多丰富的资源，包括有不同的dpi文件夹（这就意味着能适应各种dpi的手机），因此包很大，引入的依赖也很多，导入的时候很麻烦。且引入的是一整个新的前端包，之前写的后端内容，要重新手动cccv进去（我是小白，我只会手动，或许有什么其他的方法吧）。不过Dhiwise好像除了xml还有一个选项，不知道那个是什么用处，原谅一下我这位小白的无知。</p>\n</li>\n<li><p>在线生成xml的方法，只能是每一个小模块生成一个xml，并且对应的drawable下的xml也需要自己手动创建、复制粘贴，一个稍微好看点的前端界面就有特别特别多的模块，而且稍微复杂点它们的位置就很难调节了，相当得麻烦。</p>\n</li>\n</ul>\n<p>之后的日子再试试看吧，看看能否调出bug或者最终妥协，用“瞎猫”去“捉老鼠”。</p>\n<p>真是一个痛苦、难忘，但又充满着很多新鲜感和激情的期末啊！</p>\n<hr>\n<h1 id=\"git仓库\"><a href=\"#git仓库\" class=\"headerlink\" title=\"git仓库\"></a>git仓库</h1><p>目前还没release，还在创建状态，网址为<a href=\"https://github.com/ETOLucy/Music_app_spotify\">https://github.com/ETOLucy/Music_app_spotify</a>。</p>\n<h1 id=\"前端开发\"><a href=\"#前端开发\" class=\"headerlink\" title=\"前端开发\"></a>前端开发</h1><blockquote>\n<p>从数媒的高中同学那得知有figma这个东西，在国内的镜像版本叫做即使设计。于是就用起了figma。</p>\n</blockquote>\n<p>#TODO</p>\n<h1 id=\"后端开发\"><a href=\"#后端开发\" class=\"headerlink\" title=\"后端开发\"></a>后端开发</h1><h2 id=\"Spotify文档讲解\"><a href=\"#Spotify文档讲解\" class=\"headerlink\" title=\"Spotify文档讲解\"></a>Spotify文档讲解</h2><h3 id=\"网址\"><a href=\"#网址\" class=\"headerlink\" title=\"网址\"></a>网址</h3><blockquote>\n<p>安卓开发网址：<a href=\"https://developer.spotify.com/documentation/android\">https://developer.spotify.com/documentation/android</a><br>论坛网址：<a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer</a></p>\n</blockquote>\n<h3 id=\"创建应用（以实现集成该SDK）\"><a href=\"#创建应用（以实现集成该SDK）\" class=\"headerlink\" title=\"创建应用（以实现集成该SDK）\"></a>创建应用（以实现集成该SDK）</h3><ul>\n<li>先解释下，web端叫做“调取api”，对应的，Android叫做“集成SDK”。</li>\n</ul>\n<ol>\n<li>进入Dashboard，创建应用。参考文档<a href=\"https://developer.spotify.com/documentation/web-api/concepts/apps\">创建应用</a>，这里要解释一下，新手可能会很好奇，明明我用的是SDK为什么跳转到web端去了，这个可以自己在Android的开发文档里仔细找，发现它就是有外链的，它给的外链就是我给的这个网址，我放这是为让读者切过去更方便些。<br>这里的client id是它自动生成，重定向URI按照文档说的设置好（这里我也不是太懂我设置的uri是否在工作），安卓开发要填Android Package，ios开发填Bundle ID。安卓开发的Android Package可以从任意一个activity的java代码第一行里找，比如<code>package com.example.music_app_spotify;</code>则Android Package为<code>com.example.music_app_spotify</code>。<blockquote>\n<p>对了，这里要说明一下，添加这些参数的时候，在输入框的下方会看到很明显的紫色“add”按钮，上面会有很不明显的“remove”按钮，记得一定要<strong>点击“add”按钮</strong>后再点击“save”按钮！！！<br>指纹的话，按照文档来操作吧。</p>\n</blockquote>\n</li>\n<li>现在Android Studio是2023版了（现在都快2024年了），所以就连将库作为模块导入到项目都变了样。</li>\n</ol>\n<ul>\n<li>首先文档中导入方式的截图就和我们现在的Android Studio是不适配的，文档中的截图是new一个module，就可以选择“导入 .JAR&#x2F;AAR 包”选项，但我们的方式，一种是点击左上角File，然后找到“Prject Structuer”，在左边的菜单栏选择“Dependencies”，在这里添加；另一种是在build.gradle.kts里（一般在文件最下边）dependencies{}里边添加<code>implementation(files(&quot;D:\\\\Android\\\\AndroidStudioProjects\\\\Music_app_spotify\\\\app\\\\libs\\\\spotify-app-remote-release-0.8.0.aar&quot;))</code>（路径依据你自己的来，记住别放在你定期清理的位置，放这个项目的libs下最好）。</li>\n</ul>\n<ol start=\"3\">\n<li>在文档教程底下的授权那一篇里，文档提供的代码是：<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.spotify.android:auth:1.2.5&#x27;</span> <span class=\"comment\">// Maven dependency</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// All other dependencies for your app should also be here:</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;androidx.browser:browser:1.0.0&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.appcompat:appcompat:$appCompatVersion&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n而我的代码是（包含一些这份文档其他地方的要求的一些依赖）：<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;com.spotify.android:auth:1.2.6&quot;</span>)</span><br><span class=\"line\">implementation (<span class=\"string\">&quot;androidx.browser:browser:1.6.0&quot;</span>)</span><br><span class=\"line\">implementation(<span class=\"string\">&quot;androidx.appcompat:appcompat&quot;</span>)</span><br><span class=\"line\">implementation(<span class=\"string\">&quot;com.google.android.material:material:1.8.0&quot;</span>)</span><br><span class=\"line\">implementation(files(<span class=\"string\">&quot;D:\\\\Android\\\\AndroidStudioProjects\\\\Music_app_spotify\\\\app\\\\libs\\\\spotify-app-remote-release-0.8.0.aar&quot;</span>))</span><br><span class=\"line\">implementation (<span class=\"string\">&quot;com.google.code.gson:gson:2.10.1&quot;</span>)</span><br><span class=\"line\">implementation(<span class=\"string\">&quot;com.google.android.gms:play-services-auth:20.7.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n文档这里的代码我几乎是加一行报错千万行，然后debug很长很长时间……</li>\n</ol>\n<ul>\n<li>首先是<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n当我把这个添加进去的时候，它显示和自带的maven库冲突，我就把它删掉了，也能跑maven。<br>然后其他的一些，在<a href=\"https://mvnrepository.com/search?q=\">Maven Repository</a>里找到最新版引入的话，会显示Mainfest Merger报错，太老了也不对，就各种调吧，反正目前我这样的版本是可以使用的。</li>\n</ul>\n<h2 id=\"授权登录之Activity的start与finish\"><a href=\"#授权登录之Activity的start与finish\" class=\"headerlink\" title=\"授权登录之Activity的start与finish\"></a>授权登录之Activity的start与finish</h2><p>关于授权，在LoginActivity里和MainActivity里写这部分代码，问了gpt，但是它给的代码差一点（那一点很致命，我只好自己调出那一点）。<br>看我在LoginActivity.java里的<strong>成品</strong>的部分代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityResult</span><span class=\"params\">(<span class=\"type\">int</span> requestCode, <span class=\"type\">int</span> resultCode, Intent intent)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onActivityResult(requestCode, resultCode, intent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Check if the result comes from the correct activity</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestCode == REQUEST_CODE) &#123;</span><br><span class=\"line\">            <span class=\"type\">AuthorizationResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> AuthorizationClient.getResponse(resultCode, intent);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (((AuthorizationResponse) response).getType()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Response was successful and contains auth token</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> TOKEN:</span><br><span class=\"line\">                    <span class=\"comment\">// Handle successful response, for example, navigate to MainActivity</span></span><br><span class=\"line\"><span class=\"comment\">//                    Intent Main_intent = new Intent(this, MainActivity2.class);</span></span><br><span class=\"line\"><span class=\"comment\">//                    String message = &quot;ok&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//                    Intent intent1 = intent.putExtra(&quot;if_login_in&quot;, message);</span></span><br><span class=\"line\"><span class=\"comment\">//                    startActivity(Main_intent);</span></span><br><span class=\"line\">                    finish(); <span class=\"comment\">// finish the LoginActivity</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Auth flow returned an error</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> ERROR:</span><br><span class=\"line\">                    <span class=\"comment\">// Handle error response</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Most likely auth flow was cancelled</span></span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// Handle other cases</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>以及在MainActivity.java里的<strong>成品</strong>的部分代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        <span class=\"comment\">// Get the Intent that started this activity and extract the string</span></span><br><span class=\"line\"><span class=\"comment\">//        Intent intent = getIntent();</span></span><br><span class=\"line\"><span class=\"comment\">//        String message = intent.getStringExtra(&quot;if_login_in&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        if(message.equals(&quot;ok&quot;))return;</span></span><br><span class=\"line\">        <span class=\"comment\">// Check if the user is already logged in, based on your app&#x27;s logic</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userIsLoggedIn()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// User is logged in, proceed with your main app logic</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// User is not logged in, navigate to LoginActivity</span></span><br><span class=\"line\">            startActivity(<span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>(<span class=\"built_in\">this</span>, LoginActivity.class));</span><br><span class=\"line\"><span class=\"comment\">//            finish(); // finish the MainActivity</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找到播放按钮</span></span><br><span class=\"line\">        <span class=\"type\">Button</span> <span class=\"variable\">playButton</span> <span class=\"operator\">=</span> findViewById(R.id.playButton);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置按钮的点击事件</span></span><br><span class=\"line\">        playButton.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View v)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 在这里处理按钮点击事件，可以添加播放音乐的逻辑</span></span><br><span class=\"line\">                playMusic();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>可以观察一下我注释掉的部分。一开始运行的时候，是一直显示“正在加载…”，加载了之后又立刻弹出来又“正在加载…”，我以为是授权的地方哪里出错了，找了好久bug也没找到。<br>后来发现MainActivity.java里if (userIsLoggedIn())底下没有任何实现，当时也没观察LoginActivity里是有start一个新的activity的（gpt给的代码是start MainActivity，我注释部分是我自己动过，也拿其他页面尝试过没成功），以为登陆进去啥操作也没有了，就开始在那加东西捣鼓，结果印象中是没啥反应（逻辑上应该也成立，因为Login那start一个新的Main页面后，main又授权登录，跳到login那，login再start一个新的main页面，因此死循环卡死了），于是又焦虑半天。<br>再之后，发现login那有写start一个新的main页面，然后开始修改，发现运行结果有变化，这才意识到授权那边的代码没写错，理论上讲，登录应该成功了，出错应该是出在activity的实现上。<br>我现在成品代码的逻辑是，授权成功后关闭login，这样就回到了main页面。</p>\n<h2 id=\"button之play-music-stop-music\"><a href=\"#button之play-music-stop-music\" class=\"headerlink\" title=\"button之play music &amp; stop music\"></a>button之play music &amp; stop music</h2><blockquote>\n<p>首先别忘记在xml页面创建按钮。</p>\n</blockquote>\n<p>先观察下我<strong>成品</strong>代码中的Onstart函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStart</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStart();</span><br><span class=\"line\"><span class=\"comment\">//        ConnectionParams connectionParams =</span></span><br><span class=\"line\"><span class=\"comment\">//                new ConnectionParams.Builder(CLIENT_ID)</span></span><br><span class=\"line\"><span class=\"comment\">//                        .setRedirectUri(REDIRECT_URI)</span></span><br><span class=\"line\"><span class=\"comment\">//                        .showAuthView(true)</span></span><br><span class=\"line\"><span class=\"comment\">//                        .build();</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        SpotifyAppRemote.connect(this, connectionParams,</span></span><br><span class=\"line\"><span class=\"comment\">//                new Connector.ConnectionListener() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//                    public void onConnected(SpotifyAppRemote spotifyAppRemote) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                        mSpotifyAppRemote = spotifyAppRemote;</span></span><br><span class=\"line\"><span class=\"comment\">//                        Log.d(&quot;MyActivity&quot;, &quot;Connected! Yay!&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//                        // Now you can start interacting with App Remote</span></span><br><span class=\"line\"><span class=\"comment\">//                        connected();</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//                    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//                    public void onFailure(Throwable throwable) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                        Log.e(&quot;MyActivity&quot;, throwable.getMessage(), throwable);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//                        // Something went wrong when attempting to connect! Handle errors here</span></span><br><span class=\"line\"><span class=\"comment\">//                    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;);</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>观察一下我注释掉的代码里，有一句<code>connected();</code>，这里的connected函数相当于一个工具，就让它的那么摆着吧，丢到button的onClick里边反而不方便。至于其他部分，会发现它在进行连接，然后调取connected函数，执行<code>mSpotifyAppRemote.getPlayerApi().play(&quot;spotify:track:4lIsrJyQOdtBtRAyYiY2VD&quot;);</code>这句话的时候，就是播放具体的歌曲了。<br>所以把onStart()里除super.onStart();（这个是Onstart()函数存在它就必须得存在的东西，拿走不要命啦）全部拖到OnClick()下（我是在把它们封装在了playMusic函数里，再在OnClick里调用playMusic函数），如此便能实现运行app就后台播放音乐了。</p>\n<h2 id=\"如何stop-music？\"><a href=\"#如何stop-music？\" class=\"headerlink\" title=\"如何stop music？\"></a>如何stop music？</h2><p>至于如何stop music，就再添加一个按钮，但是不能把onStop()下的<code>SpotifyAppRemote.disconnect(mSpotifyAppRemote);</code>放到按钮的OnClick下，这个是断开连接，而不是关闭，要这么写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在这里处理按钮点击事件，停止音乐播放</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (mSpotifyAppRemote != <span class=\"literal\">null</span> &amp;&amp; mSpotifyAppRemote.isConnected()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 SpotifyAppRemote 已连接，则停止音乐播放</span></span><br><span class=\"line\">    mSpotifyAppRemote.getPlayerApi().pause();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>记住！要加上这个if判断条件，不然的话点击停止按钮就会退出app！</strong></p>\n<h2 id=\"关于-“spotify-track-XXXXXX”-怎么用\"><a href=\"#关于-“spotify-track-XXXXXX”-怎么用\" class=\"headerlink\" title=\"关于 “spotify:track:XXXXXX” 怎么用\"></a>关于 “spotify:track:XXXXXX” 怎么用</h2><p>这里其实很简单，我目前发现的有三种，一种是track，一种是album，一种是playlist。</p>\n<blockquote>\n<p>注：查阅了下官方文档，一共四种，还有一个artist。<br>如果是album就”spotify:album:XXXXXX”，以此类推，替换两个冒号中间那个单词就行。<br>至于每个歌曲的”XXXXXXXXXXXXXXXXXX”怎么知道是多少呢？这个其实跟，问到底是专辑（album）还是歌单（playList）还是具体去搜索某首歌（track）一样，去<a href=\"https://open.spotify.com/\">spotify官网</a>，比如我想找邓紫棋唱的面壁者，我搜到这首歌，它的网址是<a href=\"https://open.spotify.com/track/1tCPlIIWX89HBVRhBzc9O1\">https://open.spotify.com/track/1tCPlIIWX89HBVRhBzc9O1</a>，那么track就是两个冒号间要填的，<code>1tCPlIIWX89HBVRhBzc9O1</code>便是”XXXXXXXXX”。</p>\n</blockquote>\n","categories":[{"name":"Android Studio","path":"api/categories/Android Studio.json"},{"name":"Spotify","path":"api/categories/Spotify.json"},{"name":"figma","path":"api/categories/figma.json"}],"tags":[{"name":"Android Studio","path":"api/tags/Android Studio.json"},{"name":"安卓开发","path":"api/tags/安卓开发.json"},{"name":"AS","path":"api/tags/AS.json"},{"name":"Spotify Android SDK","path":"api/tags/Spotify Android SDK.json"},{"name":"figma","path":"api/tags/figma.json"}]}